<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>算法导论fft学习笔记</title>
      <link href="/2018/03/28/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BAfft%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <content type="html"><![CDATA[<p>由于我的辣鸡blog不支持latex，于是我在作业部落上发布了我的笔记</p><p><a href="https://www.zybuluo.com/stevenzheng2002/note/1088967" target="_blank" rel="external">fft学习笔记</a></p>]]></content>
      
      <categories>
          
          <category> 知识点 </category>
          
          <category> 讲解与实践 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> fft </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>bzoj4520 K远点对 题解</title>
      <link href="/2018/03/28/bzoj4520-K%E8%BF%9C%E7%82%B9%E5%AF%B9-%E9%A2%98%E8%A7%A3/"/>
      <content type="html"><![CDATA[<h1 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h1><p>已知平面内 N 个点的坐标，求欧氏距离下的第 K 远点对。</p><h1 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h1><p>kd tree搞事情，priority_queue维护k远</p><h1 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i, a, b) for(int i = a; i &lt;= b; i ++)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REPG(i, x) for(int i = head[x]; i; i = g[i].nxt)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(x, y) memset(x, y, sizeof(x));</span></div><div class="line"> </div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"> </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> LF;</div><div class="line"> </div><div class="line"><span class="function">LL <span class="title">Max</span><span class="params">(LL a, LL b)</span></span>&#123;<span class="keyword">return</span> a &gt; b ? a : b;&#125;</div><div class="line"><span class="function">LL <span class="title">Min</span><span class="params">(LL a, LL b)</span></span>&#123;<span class="keyword">return</span> a &lt; b ? a : b;&#125;</div><div class="line"><span class="function">LL <span class="title">abs</span><span class="params">(LL x)</span></span>&#123;<span class="keyword">return</span> x &gt; <span class="number">0</span> ? x : -x;&#125;</div><div class="line"> </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e5</span> + <span class="number">15</span>;</div><div class="line"><span class="keyword">const</span> LL oo = <span class="number">1e18</span>;</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></div><div class="line">    LL dis;</div><div class="line">    <span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Node &amp;a) <span class="keyword">const</span>&#123;<span class="keyword">return</span> a.dis &lt; dis;&#125;</div><div class="line">&#125;;</div><div class="line">priority_queue &lt;Node&gt; q;</div><div class="line"><span class="keyword">int</span> D, n, m, rt;</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">P</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> d[<span class="number">2</span>], mx[<span class="number">2</span>], mn[<span class="number">2</span>], l, r;</div><div class="line">    <span class="keyword">int</span>&amp; <span class="keyword">operator</span>[](<span class="keyword">int</span> x)&#123;<span class="keyword">return</span> d[x];&#125;</div><div class="line">&#125;p[MAXN];</div><div class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (P a, P b)&#123;<span class="keyword">return</span> a[D] &lt; b[D];&#125;</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">kd_tree</span>&#123;</span></div><div class="line">    P T, t[MAXN];</div><div class="line">    <span class="function">LL <span class="title">sqr</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">return</span> <span class="number">1l</span>l * x * x;&#125;</div><div class="line">    <span class="function">LL <span class="title">getdist</span><span class="params">(P a, P b)</span></span>&#123;</div><div class="line">        LL ret = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i ++) ret += sqr(a[i] - b[i]);</div><div class="line">        <span class="keyword">return</span> ret;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> k)</span></span>&#123;</div><div class="line">        P lson = t[t[k].l], rson = t[t[k].r];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i ++)&#123;</div><div class="line">            <span class="keyword">if</span>(t[k].l) t[k].mn[i] = min(t[k].mn[i], lson.mn[i]), t[k].mx[i] = max(t[k].mx[i], lson.mx[i]);</div><div class="line">            <span class="keyword">if</span>(t[k].r) t[k].mn[i] = min(t[k].mn[i], rson.mn[i]), t[k].mx[i] = max(t[k].mx[i], rson.mx[i]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> now)</span></span>&#123;</div><div class="line">        D = now; <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</div><div class="line">        nth_element(p + l, p + mid, p + r + <span class="number">1</span>);</div><div class="line">        t[mid] = p[mid];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i ++) t[mid].mn[i] = t[mid].mx[i] = t[mid][i];</div><div class="line">        <span class="keyword">if</span>(l &lt; mid) t[mid].l = build(l, mid - <span class="number">1</span>, now ^ <span class="number">1</span>);</div><div class="line">        <span class="keyword">if</span>(r &gt; mid) t[mid].r = build(mid + <span class="number">1</span>, r, now ^ <span class="number">1</span>);</div><div class="line">        update(mid);</div><div class="line">        <span class="keyword">return</span> mid;</div><div class="line">    &#125;</div><div class="line">    <span class="function">LL <span class="title">get</span><span class="params">(<span class="keyword">int</span> k, P p)</span></span>&#123;</div><div class="line">        LL ret = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i ++) ret += Max(sqr(t[k].mn[i] - p[i]), sqr(t[k].mx[i] - p[i]));</div><div class="line">        <span class="keyword">return</span> ret;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">qry</span><span class="params">(<span class="keyword">int</span> k)</span></span>&#123;</div><div class="line">        LL d, dl = <span class="number">0</span>, dr = <span class="number">0</span>;</div><div class="line">        d = getdist(t[k], T); <span class="keyword">if</span>(d &gt; q.top().dis)&#123;q.pop(); Node tmp = (Node)&#123;d&#125;; q.push(tmp);&#125;</div><div class="line">        <span class="keyword">if</span>(t[k].l) dl = get(t[k].l, T);</div><div class="line">        <span class="keyword">if</span>(t[k].r) dr = get(t[k].r, T);</div><div class="line">        <span class="keyword">if</span>(dl &gt; dr)&#123;</div><div class="line">            <span class="keyword">if</span>(dl &gt; q.top().dis) qry(t[k].l);</div><div class="line">            <span class="keyword">if</span>(dr &gt; q.top().dis) qry(t[k].r);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">if</span>(dr &gt; q.top().dis) qry(t[k].r);</div><div class="line">            <span class="keyword">if</span>(dl &gt; q.top().dis) qry(t[k].l);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">(P p)</span></span>&#123;T = p; qry(rt);&#125;</div><div class="line">&#125;kd;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> r = <span class="number">0</span>, z = <span class="number">1</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line">    <span class="keyword">while</span>(ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch == <span class="string">'-'</span>) z = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">while</span>(ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>)&#123;r = r * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">return</span> r * z;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">    n = read(), m = read(); m *= <span class="number">2</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) p[i][<span class="number">0</span>] = read(), p[i][<span class="number">1</span>] = read();</div><div class="line">    <span class="comment">//for(int i = 1; i &lt;= n; i ++) printf("%d %d\n", p[i][0], p[i][1]);</span></div><div class="line">    rt = kd.build(<span class="number">1</span>, n, <span class="number">0</span>);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i ++)&#123;</div><div class="line">        Node tmp = (Node)&#123;<span class="number">0</span>&#125;;</div><div class="line">        q.push(tmp);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) kd.query(p[i]);</div><div class="line">    <span class="comment">//for(int i = 1; i &lt; m; i ++)&#123;cout&lt;&lt;q.top().dis&lt;&lt;" ";q.pop();&#125; puts("");</span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, q.top().dis);</div><div class="line">    <span class="comment">//cout&lt;&lt;p[1][0]&lt;&lt;" "&lt;&lt;p[1][1]&lt;&lt;" "&lt;&lt;p[3][0]&lt;&lt;" "&lt;&lt;p[3][1]&lt;&lt;endl;</span></div><div class="line">    <span class="comment">//cout&lt;&lt;kd.getdist(p[1], p[3])&lt;&lt;endl;</span></div><div class="line">&#125;</div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    work();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 知识点 </category>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kd-tree </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>bzoj1941 Hide and Seek 题解</title>
      <link href="/2018/03/28/bzoj1941-Hide-and-Seek-%E9%A2%98%E8%A7%A3/"/>
      <content type="html"><![CDATA[<h1 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h1><p>小猪iPig在PKU刚上完了无聊的猪性代数课，天资聪慧的iPig被这门对他来说无比简单的课弄得非常寂寞，为了消除寂寞感，他决定和他的好朋友giPi（鸡皮）玩一个更加寂寞的游戏—-捉迷藏。</p><p>但是，他们觉得，玩普通的捉迷藏没什么意思，还是不够寂寞，于是，他们决定玩寂寞无比的螃蟹版捉迷藏，顾名思义，就是说他们在玩游戏的时候只能沿水平或垂直方向走。一番寂寞的剪刀石头布后，他们决定iPig去捉giPi。由于他们都很熟悉PKU的地形了，所以giPi只会躲在PKU内n个隐秘地点，显然iPig也只会在那n个地点内找giPi。游戏一开始，他们选定一个地点，iPig保持不动，然后giPi用30秒的时间逃离现场（显然，giPi不会呆在原地）。然后iPig会随机地去找giPi，直到找到为止。由于iPig很懒，所以他到总是走最短的路径，而且，他选择起始点不是随便选的，他想找一个地点，使得该地点到最远的地点和最近的地点的距离差最小。iPig现在想知道这个距离差最小是多少。</p><p>由于iPig现在手上没有电脑，所以不能编程解决这个如此简单的问题，所以他马上打了个电话，要求你帮他解决这个问题。iPig告诉了你PKU的n个隐秘地点的坐标，请你编程求出iPig的问题。</p><h1 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h1><p>这道题就是裸的kd tree，对于每个点求一个最远的，一个最近的，然后find ans。</p><h1 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"> </div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"> </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> LF;</div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(x, y) memset(x, y, sizeof(x))</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> oo 2147483647</span></div><div class="line"> </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e6</span> + <span class="number">15</span>;</div><div class="line"> </div><div class="line"><span class="keyword">int</span> D, rt, n;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">P</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> d[<span class="number">2</span>], mn[<span class="number">2</span>], mx[<span class="number">2</span>], l, r;</div><div class="line">    <span class="keyword">int</span>&amp; <span class="keyword">operator</span>[](<span class="keyword">int</span> x)&#123;<span class="keyword">return</span> d[x];&#125;</div><div class="line">&#125;p[MAXN];</div><div class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (P a, P b)&#123;<span class="keyword">return</span> a[D] &lt; b[D];&#125;</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">kd_tree</span>&#123;</span></div><div class="line">    P T, t[MAXN]; <span class="keyword">int</span> ans;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> k)</span></span>&#123;</div><div class="line">        P lson = t[t[k].l], rson = t[t[k].r];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i ++)&#123;</div><div class="line">            <span class="keyword">if</span>(t[k].l) t[k].mn[i] = min(t[k].mn[i], lson.mn[i]), t[k].mx[i] = max(t[k].mx[i], lson.mx[i]);</div><div class="line">            <span class="keyword">if</span>(t[k].r) t[k].mn[i] = min(t[k].mn[i], rson.mn[i]), t[k].mx[i] = max(t[k].mx[i], rson.mx[i]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> now)</span></span>&#123;</div><div class="line">        D = now; <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</div><div class="line">        nth_element(p + l, p + mid, p + r + <span class="number">1</span>);</div><div class="line">        t[mid] = p[mid];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i ++) t[mid].mn[i] = t[mid].mx[i] = t[mid][i];</div><div class="line">        <span class="keyword">if</span>(l &lt; mid) t[mid].l = build(l, mid - <span class="number">1</span>, now ^ <span class="number">1</span>);</div><div class="line">        <span class="keyword">if</span>(r &gt; mid) t[mid].r = build(mid + <span class="number">1</span>, r, now ^ <span class="number">1</span>);</div><div class="line">        update(mid);</div><div class="line">        <span class="keyword">return</span> mid;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getdist</span><span class="params">(P a, P b)</span></span>&#123;</div><div class="line">        <span class="keyword">int</span> ret = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i ++) ret += <span class="built_in">abs</span>(a[i] - b[i]);</div><div class="line">        <span class="keyword">return</span> ret;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getmx</span><span class="params">(<span class="keyword">int</span> k, P p)</span></span>&#123;</div><div class="line">        <span class="keyword">int</span> ret = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i ++) ret += max(t[k].mx[i] - p[i], <span class="number">0</span>) + max(p[i] - t[k].mn[i], <span class="number">0</span>);</div><div class="line">        <span class="keyword">return</span> ret;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getmn</span><span class="params">(<span class="keyword">int</span> k, P p)</span></span>&#123;</div><div class="line">        <span class="keyword">int</span> ret = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i ++) ret += max(p[i] - t[k].mx[i], <span class="number">0</span>) + max(t[k].mn[i] - p[i], <span class="number">0</span>);</div><div class="line">        <span class="keyword">return</span> ret;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">qry_mx</span><span class="params">(<span class="keyword">int</span> k)</span></span>&#123;</div><div class="line">        <span class="keyword">int</span> d, dl = <span class="number">0</span>, dr = <span class="number">0</span>;</div><div class="line">        d = getdist(t[k], T); <span class="keyword">if</span>(d &gt; ans) ans = d;</div><div class="line">        <span class="keyword">if</span>(t[k].l) dl = getmx(t[k].l, T); <span class="keyword">if</span>(t[k].r) dr = getmx(t[k].r, T);</div><div class="line">        <span class="keyword">if</span>(dl &gt; dr)&#123;</div><div class="line">            <span class="keyword">if</span>(dl &gt; ans) qry_mx(t[k].l);</div><div class="line">            <span class="keyword">if</span>(dr &gt; ans) qry_mx(t[k].r);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">if</span>(dr &gt; ans) qry_mx(t[k].r);</div><div class="line">            <span class="keyword">if</span>(dl &gt; ans) qry_mx(t[k].l);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">qry_mn</span><span class="params">(<span class="keyword">int</span> k)</span></span>&#123;</div><div class="line">        <span class="keyword">int</span> d, dl = oo, dr = oo;</div><div class="line">        d = getdist(t[k], T); <span class="keyword">if</span>(d &lt; ans &amp;&amp; d) ans = d;</div><div class="line">        <span class="keyword">if</span>(t[k].l) dl = getmn(t[k].l, T); <span class="keyword">if</span>(t[k].r) dr = getmn(t[k].r, T);</div><div class="line">        <span class="keyword">if</span>(dl &lt; dr)&#123;</div><div class="line">            <span class="keyword">if</span>(dl &lt; ans) qry_mn(t[k].l);</div><div class="line">            <span class="keyword">if</span>(dr &lt; ans) qry_mn(t[k].r);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">if</span>(dr &lt; ans) qry_mn(t[k].r);</div><div class="line">            <span class="keyword">if</span>(dl &lt; ans) qry_mn(t[k].l);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">query_min</span><span class="params">(P p)</span></span>&#123;T = p; ans = oo; qry_mn(rt); <span class="keyword">return</span> ans;&#125;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">query_max</span><span class="params">(P p)</span></span>&#123;T = p; ans = <span class="number">0</span>; qry_mx(rt); <span class="keyword">return</span> ans;&#125;</div><div class="line">&#125;kd;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> r = <span class="number">0</span>, z = <span class="number">1</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line">    <span class="keyword">while</span>(ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch == <span class="string">'-'</span>) z = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">while</span>(ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;=<span class="string">'9'</span>)&#123;r = r * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">return</span> r * z;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">    n = read();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) p[i][<span class="number">0</span>] = read(), p[i][<span class="number">1</span>] = read();</div><div class="line">    rt = kd.build(<span class="number">1</span>, n, <span class="number">0</span>);</div><div class="line">    <span class="keyword">int</span> ans = oo;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)&#123;</div><div class="line">        <span class="keyword">int</span> mxans = kd.query_max(p[i]), mnans = kd.query_min(p[i]);</div><div class="line">        <span class="comment">//printf("%d %d %d %d\n",p[i][0], p[i][1], mxans, mnans);</span></div><div class="line">        ans = min(ans, mxans - mnans);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    work();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 知识点 </category>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kd-tree </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>bzoj3053 The Closest M Points 题解</title>
      <link href="/2018/03/25/bzoj3053-The-Closest-M-Points-%E9%A2%98%E8%A7%A3/"/>
      <content type="html"><![CDATA[<h1 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h1><p>软工学院的课程很讨厌！ZLC同志遇到了一个头疼的问题：在K维空间里面有许多的点，对于某些给定的点，ZLC需要找到和它最近的m个点。</p><p>（这里的距离指的是欧几里得距离：D(p, q) = D(q, p) =  sqrt((q1 - p1) ^ 2 + (q2 - p2) ^ 2 + (q3 - p3) ^ 2 + … + (qn - pn) ^ 2)</p><p>ZLC要去打Dota，所以就麻烦你帮忙解决一下了……</p><p>【Input】</p><p>第一行，两个非负整数：点数n(1 &lt;= n &lt;= 50000)，和维度数k(1 &lt;= k &lt;= 5)。<br>接下来的n行，每行k个整数，代表一个点的坐标。<br>接下来一个正整数：给定的询问数量t(1 &lt;= t &lt;= 10000)<br>下面2*t行：<br>　　第一行，k个整数：给定点的坐标<br>　　第二行：查询最近的m个点(1 &lt;= m &lt;= 10)</p><p>所有坐标的绝对值不超过10000。<br>有多组数据！</p><p>【Output】</p><p>对于每个询问，输出m+1行：<br>第一行：”the closest m points are:” m为查询中的m<br>接下来m行每行代表一个点，按照从近到远排序。</p><p>保证方案唯一，下面这种情况不会出现：<br>2 2<br>1 1<br>3 3<br>1<br>2 2<br>1</p><h1 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h1><p>这道题就是裸的kdtree，只不过把常见的2维扩展到了k维，求答案的时候我们先往priority_queue中插入m个mp(INF,0)，然后没找到一个新的距离，就和队首比较即可。</p><h1 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line">   </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int, int&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> fir first</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> sec second</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> oo 2147483647</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(x, y) memset(x, y, sizeof(x));</span></div><div class="line">   </div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line">   </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> LF;</div><div class="line">   </div><div class="line"><span class="function">LL <span class="title">Max</span><span class="params">(LL a, LL b)</span></span>&#123;<span class="keyword">return</span> a &gt; b ? a : b;&#125;</div><div class="line"><span class="function">LL <span class="title">Min</span><span class="params">(LL a, LL b)</span></span>&#123;<span class="keyword">return</span> a &lt; b ? a : b;&#125;</div><div class="line"><span class="function">LL <span class="title">abs</span><span class="params">(LL x)</span></span>&#123;<span class="keyword">return</span> x &gt; <span class="number">0</span> ? x : -x;&#125;</div><div class="line">   </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e5</span> + <span class="number">15</span>;</div><div class="line">   </div><div class="line"><span class="keyword">int</span> n, m, D, rt, h, tot = <span class="number">0</span>, f[MAXN], tt;    <span class="comment">//h:最小的h个 </span></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">P</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> d[<span class="number">15</span>], mn[<span class="number">15</span>], mx[<span class="number">15</span>], l, r;</div><div class="line">    <span class="keyword">int</span>&amp; <span class="keyword">operator</span>[](<span class="keyword">int</span> x)&#123;<span class="keyword">return</span> d[x];&#125;</div><div class="line">&#125;p[MAXN];</div><div class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (P a, P b)&#123;<span class="keyword">return</span> a[D] &lt; b[D];&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">sqr</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">return</span> x * x;&#125;</div><div class="line">   </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">getdis</span><span class="params">(P a, P b)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i ++) ret += sqr(a[i] - b[i]);</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line">   </div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">kdtree</span>&#123;</span></div><div class="line">    P T, t[MAXN]; priority_queue &lt;pii&gt; qq;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> k)</span></span>&#123;</div><div class="line">        P lson = t[t[k].l], rson = t[t[k].r];</div><div class="line">        <span class="keyword">if</span>(t[k].l) <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i ++) t[k].mn[i] = min(t[k].mn[i], lson.mn[i]), t[k].mx[i] = max(t[k].mx[i], lson.mx[i]);</div><div class="line">        <span class="keyword">if</span>(t[k].r) <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i ++) t[k].mn[i] = min(t[k].mn[i], rson.mn[i]), t[k].mx[i] = max(t[k].mx[i], rson.mx[i]);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> now)</span></span>&#123;</div><div class="line">        D = now; <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</div><div class="line">        nth_element(p + l, p + mid, p + r + <span class="number">1</span>);</div><div class="line">        t[mid] = p[mid];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i ++) t[mid].mn[i] = t[mid].mx[i] = t[mid][i];</div><div class="line">        <span class="keyword">if</span>(l &lt; mid) t[mid].l = build(l, mid - <span class="number">1</span>, (now + <span class="number">1</span>) % m);</div><div class="line">        <span class="keyword">else</span> t[mid].l = <span class="number">0</span>;</div><div class="line">        <span class="keyword">if</span>(r &gt; mid) t[mid].r = build(mid + <span class="number">1</span>, r, (now + <span class="number">1</span>) % m);</div><div class="line">        <span class="keyword">else</span> t[mid].r = <span class="number">0</span>;</div><div class="line">        update(mid);</div><div class="line">        <span class="keyword">return</span> mid;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> k, P p)</span></span>&#123;</div><div class="line">        <span class="keyword">int</span> ret = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i ++)&#123;</div><div class="line">            <span class="keyword">if</span>(p[i] &lt; t[k].mn[i]) ret += sqr(t[k].mn[i] - p[i]);</div><div class="line">            <span class="keyword">if</span>(p[i] &gt; t[k].mx[i]) ret += sqr(p[i] - t[k].mx[i]);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> ret;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">qry</span><span class="params">(<span class="keyword">int</span> k)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(!k) <span class="keyword">return</span> ;</div><div class="line">        <span class="keyword">int</span> d, dl = oo, dr = oo;</div><div class="line">        d = getdis(t[k], T);<span class="comment">//cout&lt;&lt;t[k][0]&lt;&lt;" "&lt;&lt;t[k][1]&lt;&lt;" "&lt;&lt;T[0]&lt;&lt;" "&lt;&lt;T[1]&lt;&lt;" "&lt;&lt;d&lt;&lt;" "&lt;&lt;k&lt;&lt;endl;</span></div><div class="line">        <span class="keyword">if</span>(qq.top().fir &gt; d)&#123;qq.pop(); qq.push(mp(d, k));&#125;</div><div class="line">        <span class="keyword">if</span>(t[k].l) dl = get(t[k].l, T);</div><div class="line">        <span class="keyword">if</span>(t[k].r) dr = get(t[k].r, T);</div><div class="line">        <span class="keyword">if</span>(dl &lt; dr)&#123;</div><div class="line">            <span class="keyword">if</span>(dl &lt; qq.top().fir) qry(t[k].l);</div><div class="line">            <span class="keyword">if</span>(dr &lt; qq.top().fir) qry(t[k].r);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">if</span>(dr &lt; qq.top().fir) qry(t[k].r);</div><div class="line">            <span class="keyword">if</span>(dl &lt; qq.top().fir) qry(t[k].l);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">(P p)</span></span>&#123; tot = <span class="number">0</span>;</div><div class="line">        T = p; <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= h; i ++) qq.push(mp(oo, <span class="number">0</span>));</div><div class="line">        qry(rt);</div><div class="line">        <span class="keyword">while</span>(!qq.empty())&#123;</div><div class="line">            pii ans = qq.top(); qq.pop();</div><div class="line">            f[++ tot] = ans.sec;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"the closest %d points are:\n"</span>, h);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = h; i; i --)&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j ++)&#123;</div><div class="line">                <span class="keyword">if</span>(j) <span class="built_in">printf</span>(<span class="string">" "</span>);</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"%d"</span>, t[f[i]][j]);</div><div class="line">            &#125;</div><div class="line">            <span class="built_in">puts</span>(<span class="string">""</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;kd;</div><div class="line">   </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> r = <span class="number">0</span>, z = <span class="number">1</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line">    <span class="keyword">while</span>(ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch == <span class="string">'-'</span>) z = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">while</span>(ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>)&#123;r = r * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">return</span> r * z;</div><div class="line">&#125;</div><div class="line">   </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">    P gg;</div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m) != EOF)&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j ++) p[i][j] = read();</div><div class="line">        rt = kd.build(<span class="number">1</span>, n, <span class="number">0</span>);</div><div class="line">        tt = read();</div><div class="line">        <span class="keyword">while</span>(tt --)&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i ++) gg[i] = read(); h = read();</div><div class="line">            kd.query(gg);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">   </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    work();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 知识点 </category>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kd-tree </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>bzoj2716 天使玩偶 题解</title>
      <link href="/2018/03/24/bzoj2716-%E5%A4%A9%E4%BD%BF%E7%8E%A9%E5%81%B6-%E9%A2%98%E8%A7%A3/"/>
      <content type="html"><![CDATA[<h1 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h1><p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=2716" target="_blank" rel="external">传送门</a></p><h1 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h1><p>裸的kd tree</p><h1 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i, a, b) for(int i = a; i &lt;= b; i ++)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REPG(i, x) for(int i = head[x]; i; i = g[i].nxt)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> oo 2147483647</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(x, y) memset(x, y, sizeof(x));</span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> LF;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">Max</span><span class="params">(LL a, LL b)</span></span>&#123;<span class="keyword">return</span> a &gt; b ? a : b;&#125;</div><div class="line"><span class="function">LL <span class="title">Min</span><span class="params">(LL a, LL b)</span></span>&#123;<span class="keyword">return</span> a &lt; b ? a : b;&#125;</div><div class="line"><span class="function">LL <span class="title">abs</span><span class="params">(LL x)</span></span>&#123;<span class="keyword">return</span> x &gt; <span class="number">0</span> ? x : -x;&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e6</span> + <span class="number">15</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m, D, rt;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">P</span>&#123;</span></div><div class="line"><span class="keyword">int</span> d[<span class="number">2</span>], mn[<span class="number">2</span>], mx[<span class="number">2</span>], l, r;</div><div class="line"><span class="keyword">int</span>&amp; <span class="keyword">operator</span>[](<span class="keyword">int</span> x)&#123;<span class="keyword">return</span> d[x];&#125;</div><div class="line">P(<span class="keyword">int</span> x = <span class="number">0</span>, <span class="keyword">int</span> y = <span class="number">0</span>)&#123;l = r = <span class="number">0</span>; d[<span class="number">0</span>] = x, d[<span class="number">1</span>] = y;&#125;</div><div class="line">&#125;p[MAXN];</div><div class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (P a, P b)&#123;<span class="keyword">return</span> a[D] &lt; b[D];&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">getdis</span><span class="params">(P a, P b)</span></span>&#123;<span class="keyword">return</span> <span class="built_in">abs</span>(a[<span class="number">0</span>] - b[<span class="number">0</span>]) + <span class="built_in">abs</span>(a[<span class="number">1</span>] - b[<span class="number">1</span>]);&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">kdtree</span>&#123;</span></div><div class="line"><span class="keyword">int</span> ans; P T, t[MAXN];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> k)</span></span>&#123;</div><div class="line">P lson = t[t[k].l], rson = t[t[k].r];</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i ++)&#123;</div><div class="line"><span class="keyword">if</span>(t[k].l) t[k].mn[i] = min(t[k].mn[i], lson.mn[i]), t[k].mx[i] = max(t[k].mx[i], lson.mx[i]);</div><div class="line"><span class="keyword">if</span>(t[k].r) t[k].mn[i] = min(t[k].mn[i], rson.mn[i]), t[k].mx[i] = max(t[k].mx[i], rson.mx[i]);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> now)</span></span>&#123;</div><div class="line">D = now; <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</div><div class="line">nth_element(p + l, p + mid, p + r + <span class="number">1</span>);</div><div class="line">t[mid] = p[mid];</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i ++) t[mid].mn[i] = t[mid].mx[i] = t[mid][i];</div><div class="line"><span class="keyword">if</span>(l &lt; mid) t[mid].l = build(l, mid - <span class="number">1</span>, now ^ <span class="number">1</span>);</div><div class="line"><span class="keyword">if</span>(r &gt; mid) t[mid].r = build(mid + <span class="number">1</span>, r, now ^ <span class="number">1</span>);</div><div class="line">update(mid);</div><div class="line"><span class="keyword">return</span> mid;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> k, P p)</span></span>&#123;</div><div class="line"><span class="keyword">int</span> ret = <span class="number">0</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i ++) ret += max(t[k].mn[i] - p[i], <span class="number">0</span>) + max(p[i] - t[k].mx[i], <span class="number">0</span>);</div><div class="line"><span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> now)</span></span>&#123;</div><div class="line"><span class="keyword">if</span>(T[now] &lt; t[k][now])&#123;</div><div class="line"><span class="keyword">if</span>(t[k].l) ins(t[k].l, now ^ <span class="number">1</span>);</div><div class="line"><span class="keyword">else</span> &#123;</div><div class="line">t[k].l = ++ n; t[n] = T;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i ++) t[n].mn[i] = t[n].mx[i] = t[n][i];</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> &#123;</div><div class="line"><span class="keyword">if</span>(t[k].r) ins(t[k].r, now ^ <span class="number">1</span>);</div><div class="line"><span class="keyword">else</span> &#123;</div><div class="line">t[k].r = ++ n; t[n] = T;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i ++) t[n].mn[i] = t[n].mx[i] = t[n][i];</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">update(k);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">qry</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> now)</span></span>&#123;</div><div class="line"><span class="keyword">int</span> d, dl = oo, dr = oo;</div><div class="line">d = getdis(t[k], T); ans = min(ans, d);</div><div class="line"><span class="keyword">if</span>(t[k].l) dl = get(t[k].l, T);</div><div class="line"><span class="keyword">if</span>(t[k].r) dr = get(t[k].r, T);</div><div class="line"><span class="keyword">if</span>(dl &lt; dr)&#123;</div><div class="line"><span class="keyword">if</span>(dl &lt; ans) qry(t[k].l, now ^ <span class="number">1</span>);</div><div class="line"><span class="keyword">if</span>(dr &lt; ans) qry(t[k].r, now ^ <span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> &#123;</div><div class="line"><span class="keyword">if</span>(dr &lt; ans) qry(t[k].r, now ^ <span class="number">1</span>);</div><div class="line"><span class="keyword">if</span>(dl &lt; ans) qry(t[k].l, now ^ <span class="number">1</span>);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(P p)</span></span>&#123;ans = oo; T = p; qry(rt, <span class="number">0</span>); <span class="keyword">return</span> ans;&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(P p)</span></span>&#123;T = p; ins(rt, <span class="number">0</span>);&#125;</div><div class="line">&#125;kd;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">int</span> r = <span class="number">0</span>, z = <span class="number">1</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line"><span class="keyword">while</span>(ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch == <span class="string">'-'</span>) z = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">while</span>(ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>)&#123;r = r * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">return</span> r * z;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">n = read(); m = read();</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) p[i][<span class="number">0</span>] = read(), p[i][<span class="number">1</span>] = read();</div><div class="line">rt = kd.build(<span class="number">1</span>, n, <span class="number">0</span>);</div><div class="line"><span class="keyword">while</span>(m --)&#123;</div><div class="line"><span class="keyword">int</span> opt = read(), x = read(), y = read();</div><div class="line"><span class="keyword">if</span>(opt == <span class="number">1</span>) kd.insert(P(x, y));</div><div class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, kd.query(P(x, y)));</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">work();</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 知识点 </category>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kd-tree </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>bzoj2648 SJY摆棋子 题解</title>
      <link href="/2018/03/24/bzoj2648-SJY%E6%91%86%E6%A3%8B%E5%AD%90-%E9%A2%98%E8%A7%A3/"/>
      <content type="html"><![CDATA[<h1 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h1><p>这天，SJY显得无聊。在家自己玩。在一个棋盘上，有N个黑色棋子。他每次要么放到棋盘上一个黑色棋子，要么放上一个白色棋子，如果是白色棋子，他会找出距离这个白色棋子最近的黑色棋子。此处的距离是 曼哈顿距离 即(|x1-x2|+|y1-y2|) 。现在给出N&lt;=500000个初始棋子。和M&lt;=500000个操作。对于每个白色棋子，输出距离这个白色棋子最近的黑色棋子的距离。同一个格子可能有多个棋子。</p><h1 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h1><p>裸的kd tree，直接搞</p><h1 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i, a, b) for(int i = a; i &lt;= b; i ++)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REPG(i, x) for(int i = head[x]; i; i = g[i].nxt)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> oo 2147483647</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(x, y) memset(x, y, sizeof(x));</span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> LF;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">Max</span><span class="params">(LL a, LL b)</span></span>&#123;<span class="keyword">return</span> a &gt; b ? a : b;&#125;</div><div class="line"><span class="function">LL <span class="title">Min</span><span class="params">(LL a, LL b)</span></span>&#123;<span class="keyword">return</span> a &lt; b ? a : b;&#125;</div><div class="line"><span class="function">LL <span class="title">abs</span><span class="params">(LL x)</span></span>&#123;<span class="keyword">return</span> x &gt; <span class="number">0</span> ? x : -x;&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e6</span> + <span class="number">15</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m, rt, D;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">P</span>&#123;</span></div><div class="line"><span class="keyword">int</span> d[<span class="number">2</span>], mn[<span class="number">2</span>], mx[<span class="number">2</span>], l, r;</div><div class="line"><span class="keyword">int</span>&amp; <span class="keyword">operator</span>[](<span class="keyword">int</span> x)&#123;<span class="keyword">return</span> d[x];&#125;</div><div class="line">P(<span class="keyword">int</span> x = <span class="number">0</span>, <span class="keyword">int</span> y = <span class="number">0</span>)&#123;l = r = <span class="number">0</span>; d[<span class="number">0</span>] = x, d[<span class="number">1</span>] = y;&#125;</div><div class="line">&#125;p[MAXN];</div><div class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (P a, P b)&#123;<span class="keyword">return</span> a[D] &lt; b[D];&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">dis</span><span class="params">(P a, P b)</span></span>&#123;<span class="keyword">return</span> <span class="built_in">abs</span>(a[<span class="number">0</span>] - b[<span class="number">0</span>]) + <span class="built_in">abs</span>(a[<span class="number">1</span>] - b[<span class="number">1</span>]);&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">kdtree</span>&#123;</span></div><div class="line"><span class="keyword">int</span> ans; P t[MAXN], T;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> k)</span></span>&#123;</div><div class="line">P l = t[t[k].l], r = t[t[k].r];</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i ++)&#123;</div><div class="line"><span class="keyword">if</span>(t[k].l) t[k].mn[i] = min(t[k].mn[i], l.mn[i]), t[k].mx[i] = max(t[k].mx[i], l.mx[i]);</div><div class="line"><span class="keyword">if</span>(t[k].r) t[k].mn[i] = min(t[k].mn[i], r.mn[i]), t[k].mx[i] = max(t[k].mx[i], r.mx[i]);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> now)</span></span>&#123;</div><div class="line">D = now; <span class="keyword">int</span> o = l + r &gt;&gt; <span class="number">1</span>;</div><div class="line">nth_element(p + l, p + o, p + r + <span class="number">1</span>);</div><div class="line">t[o] = p[o];</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i ++) t[o].mn[i] = t[o].mx[i] = t[o][i];</div><div class="line"><span class="keyword">if</span>(l &lt; o) t[o].l = build(l, o - <span class="number">1</span>, now ^ <span class="number">1</span>);</div><div class="line"><span class="keyword">if</span>(r &gt; o) t[o].r = build(o + <span class="number">1</span>, r, now ^ <span class="number">1</span>);</div><div class="line">update(o);</div><div class="line"><span class="keyword">return</span> o;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> k, P p)</span></span>&#123;</div><div class="line"><span class="keyword">int</span> tmp = <span class="number">0</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i ++) tmp += max(t[k].mn[i] - p[i], <span class="number">0</span>);</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i ++) tmp += max(p[i] - t[k].mx[i], <span class="number">0</span>);</div><div class="line"><span class="keyword">return</span> tmp;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> now)</span></span>&#123;</div><div class="line"><span class="keyword">if</span>(T[now] &gt;= t[k][now])&#123;</div><div class="line"><span class="keyword">if</span>(t[k].r) ins(t[k].r, now ^ <span class="number">1</span>);</div><div class="line"><span class="keyword">else</span> &#123;</div><div class="line">t[k].r = ++ n; t[n] = T;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i ++) t[n].mn[i] = t[n].mx[i] = t[n][i];</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> &#123;</div><div class="line"><span class="keyword">if</span>(t[k].l) ins(t[k].l, now ^ <span class="number">1</span>);</div><div class="line"><span class="keyword">else</span> &#123;</div><div class="line">t[k].l = ++ n; t[n] = T;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i ++) t[n].mn[i] = t[n].mx[i] = t[n][i];</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">update(k);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">qry</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> now)</span></span>&#123;</div><div class="line"><span class="keyword">int</span> d, dl = oo, dr = oo;</div><div class="line">d = dis(t[k], T); ans = min(ans, d);</div><div class="line"><span class="keyword">if</span>(t[k].l) dl = get(t[k].l, T);</div><div class="line"><span class="keyword">if</span>(t[k].r) dr = get(t[k].r, T);</div><div class="line"><span class="keyword">if</span>(dl &lt; dr)&#123;</div><div class="line"><span class="keyword">if</span>(dl &lt; ans) qry(t[k].l, now ^ <span class="number">1</span>);</div><div class="line"><span class="keyword">if</span>(dr &lt; ans) qry(t[k].r, now ^ <span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> &#123;</div><div class="line"><span class="keyword">if</span>(dr &lt; ans) qry(t[k].r, now ^ <span class="number">1</span>);</div><div class="line"><span class="keyword">if</span>(dl &lt; ans) qry(t[k].l, now ^ <span class="number">1</span>);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(P p)</span></span>&#123;</div><div class="line">ans = oo; T = p; qry(rt, <span class="number">0</span>);</div><div class="line"><span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(P p)</span></span>&#123;T = p; ins(rt, <span class="number">0</span>);&#125;</div><div class="line">&#125;kd;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">int</span> r = <span class="number">0</span>, z = <span class="number">1</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line"><span class="keyword">while</span>(ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch == <span class="string">'-'</span>) z = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">while</span>(ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>)&#123;r = r * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">return</span> r * z;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">n = read(), m = read();</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) p[i][<span class="number">0</span>] = read(), p[i][<span class="number">1</span>] = read();</div><div class="line">rt = kd.build(<span class="number">1</span>, n, <span class="number">0</span>);</div><div class="line"><span class="keyword">while</span>(m --)&#123;</div><div class="line"><span class="keyword">int</span> opt = read(), x = read(), y = read();</div><div class="line"><span class="keyword">if</span>(opt == <span class="number">1</span>) kd.insert(P(x, y));</div><div class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, kd.query(P(x, y)));</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">work();</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 知识点 </category>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kd-tree </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>bzoj2820 YY的GCD 题解</title>
      <link href="/2018/03/20/bzoj2820-YY%E7%9A%84GCD-%E9%A2%98%E8%A7%A3/"/>
      <content type="html"><![CDATA[<h1 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h1><p>神犇YY虐完数论后给傻×kAc出了一题给定N, M,求1&lt;=x&lt;=N, 1&lt;=y&lt;=M且gcd(x, y)为质数的(x, y)有多少对kAc这种傻×必然不会了，于是向你来请教……多组输入</p><h1 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h1><p>对于本题，我们设f(d)为满足gcd(x,y)=d且1&lt;=x&lt;=n和1&lt;=y&lt;=m的(x, y)的对数</p><p>F(d)为满足d|gcd(x,y)且1&lt;=x&lt;=n和1&lt;=y&lt;=m的(x, y)的对数        显然，$F(x)=\frac{n}{x}\times \frac{m}{x}$，反演之后可以得到$f(x)=\sum<em>{x|d}\mu(\frac{d}{x})F(d)=\sum</em>{x|d}\mu(\frac{d}{x})\frac{n}{d}\frac{m}{d}$</p><p>此时我们可以枚举每一个质数p，然后得到：</p><p>$ans=\sum<em>{p}^{min(n,m)}(\sum</em>{d}^{min(n,m)}\mu(d)\frac{n}{pd}\frac{n}{pd})$</p><p>当然，这样肯定超时，所以我们要<strong>优化</strong></p><p>我们设T=pd，那么</p><p>$ans=\sum<em>{T=1}^{min(n,m)}\frac{n}{T}\times\frac{m}{T}(\sum</em>{p|T且p是质数}\mu(\frac{T}{p}))$</p><p>我们需要预处理出$\sum_{p|T且p是质数}\mu(\frac{T}{p})$的值：</p><p>(1)i % prime[j]，$g(i*prime[j])=\mu(x)-g(x)$</p><p>(2)!(i % prime[j])，$g(i*prime[j])=\mu(x)$</p><p>前缀和优化即可。</p><h1 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> LF;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> lson o &lt;&lt; 1</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rson o &lt;&lt; 1 | 1</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e7</span> + <span class="number">15</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> prime[MAXN], cnt = <span class="number">0</span>, miu[MAXN], g[MAXN], sum[MAXN];</div><div class="line"><span class="keyword">bool</span> vis[MAXN];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">int</span> r = <span class="number">0</span>, z = <span class="number">1</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line"><span class="keyword">while</span>(ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch == <span class="string">'-'</span>) z = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">while</span>(ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>)&#123;r = r * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">return</span> r * z;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">miu[<span class="number">1</span>] = <span class="number">1</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; MAXN; i ++)&#123;</div><div class="line"><span class="keyword">if</span>(!vis[i]) prime[++ cnt] = i, miu[i] = <span class="number">-1</span>, g[i] = <span class="number">1</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>, k; j &lt;= cnt, k = i * prime[j], k &lt; MAXN; j ++)&#123;</div><div class="line">vis[i * prime[j]] = <span class="number">1</span>;</div><div class="line"><span class="keyword">if</span>(i % prime[j]) miu[i * prime[j]] = -miu[i], g[i * prime[j]] = miu[i] - g[i];</div><div class="line"><span class="keyword">else</span> &#123;miu[i * prime[j]] = <span class="number">0</span>, g[i * prime[j]] = miu[i]; <span class="keyword">break</span>;&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; MAXN; i ++) sum[i] = sum[i - <span class="number">1</span>] + g[i];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">init();</div><div class="line"><span class="keyword">int</span> T = read(); <span class="keyword">while</span>(T --)&#123;</div><div class="line"><span class="keyword">int</span> n = read(), m = read(); <span class="keyword">int</span> lst; LL ans = <span class="number">0</span>;</div><div class="line"><span class="keyword">if</span>(n &gt; m) swap(n, m);</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i = lst + <span class="number">1</span>)&#123;</div><div class="line">lst = min(n / (n / i), m / (m / i));</div><div class="line">ans += (LL)(n / i) * (m / i) * (sum[lst] - sum[i - <span class="number">1</span>]);</div><div class="line">&#125;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">work();</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 知识点 </category>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 莫比乌斯反演 </tag>
            
            <tag> 数学 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>bzoj3999 旅游 题解</title>
      <link href="/2018/02/26/bzoj3999-%E6%97%85%E6%B8%B8-%E9%A2%98%E8%A7%A3/"/>
      <content type="html"><![CDATA[<h1 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h1><p>为了提高智商，ZJY准备去往一个新世界去旅游。这个世界的城市布局像一棵树。每两座城市之间只有一条路径可</p><p>以互达。每座城市都有一种宝石，有一定的价格。ZJY为了赚取最高利益，她会选择从A城市买入再转手卖到B城市</p><p>。由于ZJY买宝石时经常卖萌，因而凡是ZJY路过的城市，这座城市的宝石价格会上涨。让我们来算算ZJY旅游完之</p><p>后能够赚取的最大利润。（如a城市宝石价格为v，则ZJY出售价格也为v）</p><h1 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h1><p>这道题吗，它让你求x到y的路径上两数之差的最大值，小一点的数先走到，最后再都加上v。</p><p>很明显的树剖啊，挺裸的，就是维护的东西多了点。</p><p>我们维护每个链上的maxn，minn，$suml = max(vi-vj) (i<j)$，$sumr =="" max(vi-vj)="" (i="">j)$</j)$，$sumr></p><p>为什么这样维护呢？我们会发现，一条路径普遍情况是倒V型，左边的这条路径我们要找ans的话应该找suml，右边的路径则找sumr。</p><p><img src="/2018/02/26/bzoj3999-旅游-题解/1.png" alt=""></p><p>具体的合并看代码就好了，一般就三种情况：左边找一个maxn/minn，右边找一个minn/maxn，两个之差；左边的suml/sumr；右边的suml/sumr，取max。</p><p>代码一定要细心地写啊。。。要不然就会像我一样调了2天。</p><h1 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line">  </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i, a, b) for(int i = a; i &lt;= b; i ++)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REPG(i, x) for(int i = head[x]; i; i = g[i].nxt)</span></div><div class="line">  </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(x, y) memset(x, y, sizeof(x));</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> lson o &lt;&lt; 1</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rson o &lt;&lt; 1 | 1</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x7ffffff</span></div><div class="line">  </div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line">  </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> LF;</div><div class="line">  </div><div class="line"><span class="function">LL <span class="title">Max</span><span class="params">(LL a, LL b)</span></span>&#123;<span class="keyword">return</span> a &gt; b ? a : b;&#125;</div><div class="line"><span class="function">LL <span class="title">Min</span><span class="params">(LL a, LL b)</span></span>&#123;<span class="keyword">return</span> a &lt; b ? a : b;&#125;</div><div class="line"><span class="function">LL <span class="title">abs</span><span class="params">(LL x)</span></span>&#123;<span class="keyword">return</span> x &gt; <span class="number">0</span> ? x : -x;&#125;</div><div class="line">  </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e5</span> + <span class="number">15</span>;</div><div class="line">  </div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span><span class="keyword">int</span> to, nxt;&#125;g[MAXN &lt;&lt; <span class="number">2</span>];</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SegmentTree</span>&#123;</span><span class="keyword">int</span> suml, sumr, maxn, minn;&#125;s[MAXN &lt;&lt; <span class="number">2</span>];</div><div class="line">SegmentTree Null = &#123;-INF, -INF, -INF, INF&#125;;</div><div class="line"><span class="keyword">int</span> n, q, head[MAXN], cnt = <span class="number">0</span>, tt = <span class="number">0</span>, size[MAXN], son[MAXN], top[MAXN], fa[MAXN], w[MAXN], wt[MAXN], id[MAXN], dep[MAXN], lzy[MAXN &lt;&lt; <span class="number">2</span>];</div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span>&#123;g[++ cnt] = (Edge)&#123;v, head[u]&#125;; head[u] = cnt;&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span>&#123;add(u, v); add(v, u);&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">up</span><span class="params">(<span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">    s[o].maxn = max(s[lson].maxn, s[rson].maxn);</div><div class="line">    s[o].minn = min(s[lson].minn, s[rson].minn);</div><div class="line">    s[o].suml = max(s[lson].maxn - s[rson].minn, max(s[lson].suml, s[rson].suml));</div><div class="line">    s[o].sumr = max(s[rson].maxn - s[lson].minn, max(s[lson].sumr, s[rson].sumr));</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">down</span><span class="params">(<span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(!lzy[o]) <span class="keyword">return</span> ;</div><div class="line">    lzy[lson] += lzy[o]; lzy[rson] += lzy[o];</div><div class="line">    s[lson].maxn += lzy[o]; s[rson].maxn += lzy[o];</div><div class="line">    s[lson].minn += lzy[o]; s[rson].minn += lzy[o];</div><div class="line">    lzy[o] = <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> r = <span class="number">0</span>, z = <span class="number">1</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line">    <span class="keyword">while</span>(ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch == <span class="string">'-'</span>) z = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">while</span>(ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>)&#123;r = r * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">return</span> r * z;</div><div class="line">&#125;</div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(l == r)&#123;</div><div class="line">        s[o] = (SegmentTree)&#123;<span class="number">0</span>, <span class="number">0</span>, wt[l], wt[l]&#125;;</div><div class="line">        <span class="keyword">return</span> ;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</div><div class="line">    build(lson, l, mid); build(rson, mid + <span class="number">1</span>, r);</div><div class="line">    up(o);</div><div class="line">&#125;</div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> c)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(x &lt;= l &amp;&amp; r &lt;= y)&#123;</div><div class="line">        s[o].maxn += c, s[o].minn += c, lzy[o] += c;</div><div class="line">        <span class="keyword">return</span> ;</div><div class="line">    &#125;</div><div class="line">    down(o);</div><div class="line">    <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</div><div class="line">    <span class="keyword">if</span>(x &lt;= mid) modify(lson, l, mid, x, y, c);</div><div class="line">    <span class="keyword">if</span>(y &gt; mid) modify(rson, mid + <span class="number">1</span>, r, x, y, c);</div><div class="line">    up(o);</div><div class="line">&#125;</div><div class="line">  </div><div class="line"><span class="function">SegmentTree <span class="title">getans</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(x &lt;= l &amp;&amp; r &lt;= y) <span class="keyword">return</span> s[o];</div><div class="line">    down(o);</div><div class="line">    <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</div><div class="line">    <span class="keyword">if</span>(y &lt;= mid) <span class="keyword">return</span> getans(lson, l, mid, x, y);</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(x &gt; mid) <span class="keyword">return</span> getans(rson, mid + <span class="number">1</span>, r, x, y);</div><div class="line">    SegmentTree ret, t1 = getans(lson, l, mid, x, y), t2 = getans(rson, mid + <span class="number">1</span>, r, x, y);</div><div class="line">    ret.maxn = max(t1.maxn, t2.maxn); ret.minn = min(t1.minn, t2.minn);</div><div class="line">    ret.suml = max(t1.maxn - t2.minn, max(t1.suml, t2.suml));</div><div class="line">    ret.sumr = max(t2.maxn - t1.minn, max(t1.sumr, t2.sumr));</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> fafa, <span class="keyword">int</span> dd)</span></span>&#123;</div><div class="line">    dep[u] = dd; fa[u] = fafa; size[u] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; i; i = g[i].nxt)&#123;</div><div class="line">        <span class="keyword">int</span> v = g[i].to; <span class="keyword">if</span>(v == fafa) <span class="keyword">continue</span>;</div><div class="line">        dfs1(v, u, dd + <span class="number">1</span>);</div><div class="line">        size[u] += size[v];</div><div class="line">        <span class="keyword">if</span>(size[v] &gt; size[son[u]]) son[u] = v;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> topf)</span></span>&#123;</div><div class="line">    id[u] = ++ tt; wt[tt] = w[u]; top[u] = topf;</div><div class="line">    <span class="keyword">if</span>(!son[u]) <span class="keyword">return</span> ;</div><div class="line">    dfs2(son[u], topf);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; i; i = g[i].nxt)&#123;</div><div class="line">        <span class="keyword">int</span> v = g[i].to; <span class="keyword">if</span>(v == fa[u] || v == son[u]) <span class="keyword">continue</span>;</div><div class="line">        dfs2(v, v);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> c)</span></span>&#123;</div><div class="line">    SegmentTree ansl = Null, ansr = Null, t;</div><div class="line">    <span class="keyword">int</span> f1 = top[x], f2 = top[y];</div><div class="line">    <span class="keyword">while</span>(f1 != f2)&#123;</div><div class="line">        <span class="keyword">if</span>(dep[f1] &lt; dep[f2])&#123;</div><div class="line">            t = getans(<span class="number">1</span>, <span class="number">1</span>, n, id[f2], id[y]);</div><div class="line">            ansr.sumr = max(ansr.maxn - t.minn, max(t.sumr, ansr.sumr));</div><div class="line">            ansr.maxn = max(ansr.maxn, t.maxn); ansr.minn = min(ansr.minn, t.minn);</div><div class="line">            modify(<span class="number">1</span>, <span class="number">1</span>, n, id[f2], id[y], c);</div><div class="line">            y = fa[f2], f2 = top[y];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            t = getans(<span class="number">1</span>, <span class="number">1</span>, n, id[f1], id[x]);</div><div class="line">            ansl.suml = max(t.maxn - ansl.minn, max(t.suml, ansl.suml));</div><div class="line">            ansl.maxn = max(ansl.maxn, t.maxn); ansl.minn = min(ansl.minn, t.minn);</div><div class="line">            modify(<span class="number">1</span>, <span class="number">1</span>, n, id[f1], id[x], c);</div><div class="line">            x = fa[f1], f1 = top[x];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(dep[x] &lt; dep[y])&#123;</div><div class="line">        t = getans(<span class="number">1</span>, <span class="number">1</span>, n, id[x], id[y]);</div><div class="line">        ansr.sumr = max(ansr.maxn - t.minn, max(t.sumr, ansr.sumr));</div><div class="line">        ansr.maxn = max(ansr.maxn, t.maxn); ansr.minn = min(ansr.minn, t.minn);</div><div class="line">        modify(<span class="number">1</span>, <span class="number">1</span>, n, id[x], id[y], c);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">        t = getans(<span class="number">1</span>, <span class="number">1</span>, n, id[y], id[x]);</div><div class="line">        ansl.suml = max(t.maxn - ansl.minn, max(t.suml, ansl.suml));</div><div class="line">        ansl.maxn = max(ansl.maxn, t.maxn); ansl.minn = min(ansl.minn, t.minn);</div><div class="line">        modify(<span class="number">1</span>, <span class="number">1</span>, n, id[y], id[x], c);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, max(ansr.maxn - ansl.minn, max(ansl.suml, ansr.sumr)));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">    n = read();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) w[i] = read();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i ++)&#123;</div><div class="line">        <span class="keyword">int</span> u = read(), v = read();</div><div class="line">        add_edge(u, v);</div><div class="line">    &#125;</div><div class="line">    dfs1(<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>); dfs2(<span class="number">1</span>, <span class="number">1</span>);</div><div class="line">    build(<span class="number">1</span>, <span class="number">1</span>, n);</div><div class="line">    q = read();</div><div class="line">    <span class="keyword">while</span>(q --)&#123;</div><div class="line">        <span class="keyword">int</span> a = read(), b = read(), c = read();</div><div class="line">        query(a, b, c);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    work();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 知识点 </category>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
            <tag> 树链剖分 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>洛谷2483 魔法猪学院 题解</title>
      <link href="/2018/02/22/%E6%B4%9B%E8%B0%B72483-%E9%AD%94%E6%B3%95%E7%8C%AA%E5%AD%A6%E9%99%A2-%E9%A2%98%E8%A7%A3/"/>
      <content type="html"><![CDATA[<h1 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h1><p>iPig在假期来到了传说中的魔法猪学院，开始为期两个月的魔法猪训练。经过了一周理论知识和一周基本魔法的学习之后，iPig对猪世界的世界本原有了很多的了解：众所周知，世界是由元素构成的；元素与元素之间可以互相转换；能量守恒……。</p><p>能量守恒……iPig 今天就在进行一个麻烦的测验。iPig 在之前的学习中已经知道了很多种元素，并学会了可以转化这些元素的魔法，每种魔法需要消耗 iPig 一定的能量。作为 PKU 的顶尖学猪，让 iPig 用最少的能量完成从一种元素转换到另一种元素……等等，iPig 的魔法导猪可没这么笨！这一次，他给 iPig 带来了很多 1 号元素的样本，要求 iPig 使用学习过的魔法将它们一个个转化为 N 号元素，为了增加难度，要求每份样本的转换过程都不相同。这个看似困难的任务实际上对 iPig 并没有挑战性，因为，他有坚实的后盾……现在的你呀！</p><p>注意，两个元素之间的转化可能有多种魔法，转化是单向的。转化的过程中，可以转化到一个元素（包括开始元素）多次，但是一但转化到目标元素，则一份样本的转化过程结束。iPig 的总能量是有限的，所以最多能够转换的样本数一定是一个有限数。具体请参看样例。</p><h1 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h1><p>这道题就是K短路模板。</p><p>我们用spfa+A*来解决这道题。</p><p>首先有个叫<strong>估价函数</strong>的重要内容：f(x)=g(x)+h(x)；</p><p>f(x)为总估价值，g(x)为当前真实价值，h(x)为当前估价值。</p><p>用人话讲就是：</p><ul><li>f(x)表示从1～n的总花费</li><li>g(x)表示从1～x所走过的路径总和</li><li>h(x)表示从x～n估计要走的长度</li></ul><p>首先，h(x)是要往小的方向估计，所以<strong>h(x)最小时就是x到n的最短路</strong>，于是就反向跑一遍spfa预处理就好了。</p><h1 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i, a, b) for(int i = a; i &lt;= b; i ++)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REPG(i, x) for(int i = head[x]; i; i = g[i].nxt)</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(x, y) memset(x, y, sizeof(x));</span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> LF;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">Max</span><span class="params">(LL a, LL b)</span></span>&#123;<span class="keyword">return</span> a &gt; b ? a : b;&#125;</div><div class="line"><span class="function">LL <span class="title">Min</span><span class="params">(LL a, LL b)</span></span>&#123;<span class="keyword">return</span> a &lt; b ? a : b;&#125;</div><div class="line"><span class="function">LL <span class="title">abs</span><span class="params">(LL x)</span></span>&#123;<span class="keyword">return</span> x &gt; <span class="number">0</span> ? x : -x;&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">5e3</span> + <span class="number">15</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXM = <span class="number">2e5</span> + <span class="number">15</span>;</div><div class="line"><span class="keyword">const</span> LF INF = <span class="number">2e9</span>;</div><div class="line"><span class="keyword">const</span> LF eps = <span class="number">1e-7</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> now; LF step, h;</div><div class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Node x) <span class="keyword">const</span> &#123;</div><div class="line">        <span class="keyword">return</span> (h == x.h) ? step &gt; x.step : h &gt; x.h;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span><span class="keyword">int</span> to, nxt; LF dis;&#125;g[MAXM &lt;&lt; <span class="number">1</span>];</div><div class="line"><span class="keyword">int</span> head[MAXN], cnt = <span class="number">-1</span>, n, m, ans = <span class="number">0</span>; LF e, dist[MAXN];</div><div class="line"><span class="built_in">queue</span> &lt;<span class="keyword">int</span>&gt; q; priority_queue &lt;Node&gt; q1; <span class="keyword">bool</span> vis[MAXN];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> r = <span class="number">0</span>, z = <span class="number">1</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line">    <span class="keyword">while</span>(ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch == <span class="string">'-'</span>) z = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">while</span>(ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>)&#123;r = r * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">return</span> r * z;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, LF dis)</span></span>&#123;g[++ cnt] = (Edge)&#123;v, head[u], dis&#125;; head[u] = cnt;&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, LF dis)</span></span>&#123;add(u, v, dis); add(v, u, dis);&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">spfa</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) dist[i] = INF;</div><div class="line">    q.push(n); vis[n] = <span class="number">1</span>; dist[n] = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span>(!q.empty())&#123;</div><div class="line">        <span class="keyword">int</span> u = q.front(); q.pop(); vis[u] = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; ~i; i = g[i].nxt)&#123;</div><div class="line">            <span class="keyword">if</span>(!(i &amp; <span class="number">1</span>)) <span class="keyword">continue</span>;</div><div class="line">            <span class="keyword">int</span> v = g[i].to;</div><div class="line">            <span class="keyword">if</span>(dist[v] &gt; dist[u] + g[i].dis)&#123;</div><div class="line">                dist[v] = dist[u] + g[i].dis;</div><div class="line">                <span class="keyword">if</span>(!vis[v])&#123;vis[v] = <span class="number">1</span>; q.push(v);&#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//for(int i = 1; i &lt;= n; i ++) printf("%.2lf ", dist[i]); printf("\n");</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Astar</span><span class="params">()</span></span>&#123;</div><div class="line">    Node s;</div><div class="line">    s.now = <span class="number">1</span>; s.step = <span class="number">0</span>; s.h = s.step + dist[s.now]; q1.push(s);</div><div class="line">    <span class="keyword">while</span>(!q1.empty())&#123;</div><div class="line">        Node x = q1.top(); q1.pop();</div><div class="line">        <span class="keyword">if</span>(x.step &gt; e) <span class="keyword">continue</span> ;</div><div class="line">        <span class="keyword">if</span>(x.now == n)&#123;</div><div class="line">            <span class="keyword">if</span>(e &gt;= x.step) ans ++, e -= x.step;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">return</span> ;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(x.h &gt; e) <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = head[x.now]; ~i; i = g[i].nxt)&#123;</div><div class="line">            <span class="keyword">if</span>(i &amp; <span class="number">1</span>) <span class="keyword">continue</span>;</div><div class="line">            <span class="keyword">int</span> v = g[i].to; Node y;</div><div class="line">            y.now = v; y.step = x.step + g[i].dis; y.h = y.step + dist[v];</div><div class="line">            <span class="keyword">if</span>(y.h &gt; e) <span class="keyword">continue</span>;</div><div class="line">            q1.push(y);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">    clr(head, <span class="number">-1</span>);</div><div class="line">    n = read(), m = read(); <span class="built_in">scanf</span>(<span class="string">"%lf"</span>, &amp;e);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i ++)&#123;</div><div class="line">        <span class="keyword">int</span> u = read(), v = read(); LF dis; <span class="built_in">scanf</span>(<span class="string">"%lf"</span>, &amp;dis);</div><div class="line">        add_edge(u, v, dis);</div><div class="line">    &#125;</div><div class="line">    spfa();</div><div class="line">    Astar();</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    work();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 知识点 </category>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SPFA </tag>
            
            <tag> Astar </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>bzoj1412 狼和羊的故事 题解</title>
      <link href="/2018/02/20/bzoj1412-%E7%8B%BC%E5%92%8C%E7%BE%8A%E7%9A%84%E6%95%85%E4%BA%8B-%E9%A2%98%E8%A7%A3/"/>
      <content type="html"><![CDATA[<h1 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h1><p>“狼爱上羊啊爱的疯狂，谁让他们真爱了一场；狼爱上羊啊并不荒唐，他们说有爱就有方向．．．．．．” Orez听到这首歌，心想：狼和羊如此和谐，为什么不尝试羊狼合养呢？说干就干！ Orez的羊狼圈可以看作一个n*m个矩阵格子，这个矩阵的边缘已经装上了篱笆。可是Drake很快发现狼再怎么也是狼，它们总是对羊垂涎三尺，那首歌只不过是一个动人的传说而已。所以Orez决定在羊狼圈中再加入一些篱笆，还是要将羊狼分开来养。 通过仔细观察，Orez发现狼和羊都有属于自己领地，若狼和羊们不能呆在自己的领地，那它们就会变得非常暴躁，不利于他们的成长。 Orez想要添加篱笆的尽可能的短。当然这个篱笆首先得保证不能改变狼羊的所属领地，再就是篱笆必须修筑完整，也就是说必须修建在单位格子的边界上并且不能只修建一部分。</p><h1 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h1><p>（题解来自hzwer）<br>挖掘栅栏的本质：只能建在相邻两个，且建好后使得狼和羊之间不存在通路。而割的定义是：使S集和T集不存在通路。而题目又要求建的栅栏最少，于是就是最小割问题了。</p><p>从源点向所有狼连一条∞的边，从所有羊向汇点连一条∞的边，这样就能保证狼和羊都在不同的点集里。然后再从狼到相邻的羊和空地，空地到相邻的空地和羊连一条流量为1的边，最大流求最小割即可。</p><p>或者将所有点向四周连边。。就是时间长了点</p><h1 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"> </div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"> </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> LF;</div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(x, y) memset(x, y, sizeof(x))</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x7fffffff</span></div><div class="line"> </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">2e4</span> + <span class="number">15</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXM = <span class="number">2e6</span> + <span class="number">15</span>;</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span><span class="keyword">int</span> to, nxt, c;&#125;g[MAXM &lt;&lt; <span class="number">1</span>];</div><div class="line"><span class="keyword">int</span> head[MAXN], cur[MAXN], cnt = <span class="number">-1</span>, d[MAXN], n, m, a[<span class="number">115</span>][<span class="number">115</span>], s, t;</div><div class="line"><span class="keyword">int</span> dx[<span class="number">5</span>] = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>&#125;;</div><div class="line"><span class="keyword">int</span> dy[<span class="number">5</span>] = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>&#125;;</div><div class="line"><span class="built_in">queue</span> &lt;<span class="keyword">int</span>&gt; q;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w)</span></span>&#123;g[++ cnt] = (Edge)&#123;v, head[u], w&#125;; head[u] = cnt;&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w)</span></span>&#123;add(u, v, w); add(v, u, <span class="number">0</span>);&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> r = <span class="number">0</span>, z = <span class="number">1</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line">    <span class="keyword">while</span>(ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch == <span class="string">'-'</span>) z = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">while</span>(ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>)&#123;r = r * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">return</span> r * z;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">bfs</span><span class="params">()</span></span>&#123;</div><div class="line">    clr(d, <span class="number">-1</span>);</div><div class="line">    q.push(s); d[s] = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span>(!q.empty())&#123;</div><div class="line">        <span class="keyword">int</span> u = q.front(); q.pop();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; ~i; i = g[i].nxt)&#123;</div><div class="line">            <span class="keyword">int</span> v = g[i].to;</div><div class="line">            <span class="keyword">if</span>(g[i].c &gt; <span class="number">0</span> &amp;&amp; d[v] == <span class="number">-1</span>)&#123;</div><div class="line">                d[v] = d[u] + <span class="number">1</span>;</div><div class="line">                q.push(v);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> (d[t] != <span class="number">-1</span>);</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> flow)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(u == t) <span class="keyword">return</span> flow;</div><div class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span>&amp; i = cur[u]; ~i; i = g[i].nxt)&#123;</div><div class="line">        <span class="keyword">int</span> v = g[i].to;</div><div class="line">        <span class="keyword">if</span>(g[i].c &gt; <span class="number">0</span> &amp;&amp; d[v] == d[u] + <span class="number">1</span>)&#123;</div><div class="line">            <span class="keyword">int</span> tmp = dfs(v, min(flow, g[i].c));</div><div class="line">            flow -= tmp; g[i].c -= tmp;</div><div class="line">            ret += tmp; g[i ^ <span class="number">1</span>].c += tmp;</div><div class="line">            <span class="keyword">if</span>(!flow) <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(!ret) d[u] = <span class="number">-1</span>;</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dinic</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span>(bfs())&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n * m + <span class="number">2</span>; i ++) cur[i] = head[i];</div><div class="line">        ret += dfs(s, INF);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ret);</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">    clr(head, <span class="number">-1</span>);</div><div class="line">    n = read(), m = read(); s = n * m + <span class="number">1</span>, t = n * m + <span class="number">2</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j ++) a[i][j] = read();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j ++)&#123;</div><div class="line">            <span class="keyword">if</span>(a[i][j] == <span class="number">1</span>) add_edge(s, (i - <span class="number">1</span>) * m + j, INF);</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(a[i][j] == <span class="number">2</span>) add_edge((i - <span class="number">1</span>) * m + j, t, INF);</div><div class="line">            <span class="keyword">if</span>(a[i][j] == <span class="number">2</span>) <span class="keyword">continue</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> gg = <span class="number">1</span>; gg &lt;= <span class="number">4</span>; gg ++)&#123;</div><div class="line">                <span class="keyword">int</span> nowx = i + dx[gg], nowy = j + dy[gg];</div><div class="line">                <span class="keyword">if</span>(nowx &lt; <span class="number">1</span> || nowx &gt; n || nowy &lt; <span class="number">1</span> || nowy &gt; m) <span class="keyword">continue</span>;</div><div class="line">                <span class="keyword">if</span>(a[i][j] != <span class="number">1</span> || a[nowx][nowy] != <span class="number">1</span>) add_edge((i - <span class="number">1</span>) * m + j, (nowx - <span class="number">1</span>) * m + nowy, <span class="number">1</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    dinic();</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    work();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      
    </entry>
    
    <entry>
      <title>bzoj1051 受欢迎的牛 题解</title>
      <link href="/2018/02/20/bzoj1051-%E5%8F%97%E6%AC%A2%E8%BF%8E%E7%9A%84%E7%89%9B-%E9%A2%98%E8%A7%A3/"/>
      <content type="html"><![CDATA[<h1 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h1><p>每一头牛的愿望就是变成一头最受欢迎的牛。现在有N头牛，给你M对整数(A,B)，表示牛A认为牛B受欢迎。 这</p><p>种关系是具有传递性的，如果A认为B受欢迎，B认为C受欢迎，那么牛A也认为牛C受欢迎。你的任务是求出有多少头</p><p>牛被所有的牛认为是受欢迎的。</p><h1 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h1><p>直接tarjan缩点，然后如果出度为0的点只有一个，输出这个点包含的原先的点的个数，否则为0；</p><h1 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i, n) for(int i = 1; i &lt;= n; i ++)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REPG(i, x) for(int i = head[x]; i; i = g[i].nxt)</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> mem(x, y) memset(x, y, sizeof(x));</span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> DB;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">Max</span><span class="params">(LL a, LL b)</span></span>&#123;<span class="keyword">return</span> a &gt; b ? a : b;&#125;</div><div class="line"><span class="function">LL <span class="title">Min</span><span class="params">(LL a, LL b)</span></span>&#123;<span class="keyword">return</span> a &lt; b ? a : b;&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e5</span> + <span class="number">15</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span><span class="keyword">int</span> to, nxt;&#125;g[MAXN], e[MAXN];</div><div class="line"><span class="keyword">int</span> ans1 = <span class="number">0</span>, ans2 = <span class="number">0</span>;</div><div class="line"><span class="keyword">int</span> head[MAXN], head_sd[MAXN], cnt = <span class="number">0</span>, cnt_sd = <span class="number">0</span>;</div><div class="line"><span class="keyword">int</span> in[MAXN], out[MAXN], ans = <span class="number">0</span>, dfns = <span class="number">0</span>, n, m, tot = <span class="number">0</span>;</div><div class="line"><span class="keyword">int</span> dfn[MAXN], low[MAXN], sta[MAXN], in_sd[MAXN], out_sd[MAXN], belong[MAXN];</div><div class="line"><span class="keyword">int</span> orzqyf[MAXN];</div><div class="line"><span class="keyword">bool</span> instack[MAXN];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span>&#123;g[++ cnt] = (Edge)&#123;v, head[u]&#125;; head[u] = cnt;&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_sd</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span>&#123;e[++ cnt_sd] = (Edge)&#123;v, head_sd[u]&#125;; head_sd[u] = cnt_sd;&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> r = <span class="number">0</span>, z = <span class="number">1</span>;</div><div class="line">    <span class="keyword">char</span> ch = getchar();</div><div class="line">    <span class="keyword">while</span>(ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch == <span class="string">'-'</span>) z = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">while</span>(ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>)&#123;r = r * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">return</span> r * z;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</div><div class="line">    dfn[u] = low[u] = ++ dfns; instack[u] = <span class="number">1</span>; sta[++ tot] = u;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; i; i = g[i].nxt)&#123;</div><div class="line">        <span class="keyword">int</span> v = g[i].to;</div><div class="line">        <span class="keyword">if</span>(!dfn[v])&#123;tarjan(v); low[u] = min(low[u], low[v]);&#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(instack[v]) low[u] = min(low[u], dfn[v]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(dfn[u] == low[u])&#123;</div><div class="line">        ans ++;</div><div class="line">        <span class="keyword">while</span>(sta[tot] != u)&#123;</div><div class="line">            <span class="keyword">int</span> gg = sta[tot];</div><div class="line">            instack[gg] = <span class="number">0</span>;</div><div class="line">            belong[gg] = ans;</div><div class="line">            tot --;</div><div class="line">        &#125;</div><div class="line">        instack[u] = <span class="number">0</span>; tot --; belong[u] = ans;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">suodian</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)&#123;</div><div class="line">        <span class="keyword">if</span>(!belong[i]) belong[i] = ++ ans;</div><div class="line">        orzqyf[belong[i]] ++;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)&#123;</div><div class="line">        <span class="keyword">int</span> u1 = belong[i];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = head[i]; j; j = g[j].nxt)&#123;</div><div class="line">            <span class="keyword">int</span> v1 = belong[g[j].to];</div><div class="line">            <span class="keyword">if</span>(u1 != v1)&#123;add_sd(u1, v1); in_sd[v1] ++; out_sd[u1] ++;&#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">doit</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)&#123;</div><div class="line">        <span class="keyword">if</span>(!dfn[i]) tarjan(i);</div><div class="line">    &#125;</div><div class="line">    suodian();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    n = read(), m = read();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i ++)&#123;</div><div class="line">        <span class="keyword">int</span> u = read(), v = read();</div><div class="line">        add(u, v);</div><div class="line">    &#125;</div><div class="line">    doit();</div><div class="line">    <span class="keyword">int</span> orzcjr = <span class="number">0</span>, orzpkl;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= ans; i ++)&#123;</div><div class="line">        <span class="keyword">if</span>(!out_sd[i])&#123;orzcjr ++; orzpkl = i;&#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(orzcjr &gt; <span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">"0\n"</span>);</div><div class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, orzqyf[orzpkl]);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    init();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 知识点 </category>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图论 </tag>
            
            <tag> tarjan </tag>
            
            <tag> 缩点 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>bzoj1003 物流运输 题解</title>
      <link href="/2018/02/20/bzoj1003-%E7%89%A9%E6%B5%81%E8%BF%90%E8%BE%93-%E9%A2%98%E8%A7%A3/"/>
      <content type="html"><![CDATA[<h1 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h1><p>物流公司要把一批货物从码头A运到码头B。由于货物量比较大，需要n天才能运完。货物运输过程中一般要转<br>停好几个码头。物流公司通常会设计一条固定的运输路线，以便对整个运输过程实施严格的管理和跟踪。由于各种<br>因素的存在，有的时候某个码头会无法装卸货物。这时候就必须修改运输路线，让货物能够按时到达目的地。但是<br>修改路线是一件十分麻烦的事情，会带来额外的成本。因此物流公司希望能够订一个n天的运输计划，使得总成本<br>尽可能地小。</p><h1 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h1><p>动规$g[i][j]$表示i到j天一直用同一条最短路的最小费用</p><p>即i到j天不改路线的最短路 spfa(i,j)求$g[i][j]$就好了</p><p>至于某个点在这段时间内是不是被更改过的判断</p><h1 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i, n) for(int i = 1; i &lt;= n; i ++)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REPG(i, x) for(int i = head[x]; i; i = g[i].nxt)</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> mem(x, y) memset(x, y, sizeof(x));</span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> DB;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">Max</span><span class="params">(LL a, LL b)</span></span>&#123;<span class="keyword">return</span> a &gt; b ? a : b;&#125;</div><div class="line"><span class="function">LL <span class="title">Min</span><span class="params">(LL a, LL b)</span></span>&#123;<span class="keyword">return</span> a &lt; b ? a : b;&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">115</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXM = <span class="number">25</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> f[MAXN][MAXN], dp[MAXN], dist[MAXM][MAXM], g[MAXM][MAXM];</div><div class="line"><span class="keyword">bool</span> isp[MAXM][MAXN], gg[MAXM];</div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> r = <span class="number">0</span>, z = <span class="number">1</span>;</div><div class="line">    <span class="keyword">char</span> ch = getchar();</div><div class="line">    <span class="keyword">while</span>(ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch == <span class="string">'-'</span>) z = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">while</span>(ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>)&#123;r = r * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">return</span> r * z;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">SPFA</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; m; i ++)&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = l; j &lt;= r; j ++) <span class="keyword">if</span>(isp[i][j])&#123;gg[i] = <span class="number">1</span>; <span class="keyword">break</span>;&#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i ++)&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j ++)&#123;</div><div class="line">            dist[i][j] = g[i][j];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i ++)&#123;</div><div class="line">        <span class="keyword">if</span>(!gg[i])&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j ++)&#123;</div><div class="line">                <span class="keyword">if</span>(gg[j]) <span class="keyword">continue</span>;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= m; k ++)&#123;</div><div class="line">                    <span class="keyword">if</span>(gg[k]) <span class="keyword">continue</span>;</div><div class="line">                    dist[j][k] = min(dist[j][k], dist[j][i] + dist[i][k]);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">memset</span>(gg, <span class="number">0</span>, <span class="keyword">sizeof</span>(gg));</div><div class="line">    <span class="keyword">return</span> dist[<span class="number">1</span>][m];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    n = read(), m = read();</div><div class="line">    <span class="keyword">int</span> k = read(), e = read();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i ++)&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j ++) <span class="keyword">if</span>(i != j) g[i][j] = <span class="number">1e7</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= e; i ++)&#123;</div><div class="line">        <span class="keyword">int</span> u = read(), v = read(), dis = read();</div><div class="line">        g[u][v] = g[v][u] = dis;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> d = read();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= d; i ++)&#123;</div><div class="line">        <span class="keyword">int</span> p = read(), a = read(), b = read();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = a; j &lt;= b; j ++) isp[p][j] = <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = i; j &lt;= n; j ++)&#123;</div><div class="line">            f[i][j] = SPFA(i, j);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) dp[i] = <span class="number">1e8</span>; dp[<span class="number">0</span>] = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)&#123;</div><div class="line">        dp[i] = f[<span class="number">1</span>][i] * i;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j ++)&#123;</div><div class="line">            dp[i] = min(dp[i], dp[j] + k + f[j + <span class="number">1</span>][i] * (i - j));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, dp[n]);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    init();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 知识点 </category>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
            <tag> SPFA </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>bzoj1001 狼抓兔子 题解</title>
      <link href="/2018/02/20/bzoj1001-%E7%8B%BC%E6%8A%93%E5%85%94%E5%AD%90-%E9%A2%98%E8%A7%A3/"/>
      <content type="html"><![CDATA[<h1 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h1><p>现在小朋友们最喜欢的”喜羊羊与灰太狼”,话说灰太狼抓羊不到，但抓兔子还是比较在行的，</p><p>而且现在的兔子还比较笨，它们只有两个窝，现在你做为狼王，面对下面这样一个网格的地形：</p><p> <img src="http://www.lydsy.com/JudgeOnline/images/1001.jpg" alt="img"></p><p>左上角点为(1,1),右下角点为(N,M)(上图中N=4,M=5).有以下三种类型的道路 </p><p>1:(x,y)&lt;==&gt;(x+1,y) </p><p>2:(x,y)&lt;==&gt;(x,y+1) </p><p>3:(x,y)&lt;==&gt;(x+1,y+1) </p><p>道路上的权值表示这条路上最多能够通过的兔子数，道路是无向的. 左上角和右下角为兔子的两个窝，</p><p>开始时所有的兔子都聚集在左上角(1,1)的窝里，现在它们要跑到右下解(N,M)的窝中去，狼王开始伏击</p><p>这些兔子.当然为了保险起见，如果一条道路上最多通过的兔子数为K，狼王需要安排同样数量的K只狼，</p><p>才能完全封锁这条道路，你需要帮助狼王安排一个伏击方案，使得在将兔子一网打尽的前提下，参与的</p><p>狼的数量要最小。因为狼还要去找喜羊羊麻烦.</p><h1 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h1><p>裸的最小割</p><h1 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i, a, b) for(int i = a; i &lt;= b; i ++)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REPG(i, x) for(int i = head[x]; i; i = g[i].nxt)</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(x, y) memset(x, y, sizeof(x));</span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> LF;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">Max</span><span class="params">(LL a, LL b)</span></span>&#123;<span class="keyword">return</span> a &gt; b ? a : b;&#125;</div><div class="line"><span class="function">LL <span class="title">Min</span><span class="params">(LL a, LL b)</span></span>&#123;<span class="keyword">return</span> a &lt; b ? a : b;&#125;</div><div class="line"><span class="function">LL <span class="title">abs</span><span class="params">(LL x)</span></span>&#123;<span class="keyword">return</span> x &gt; <span class="number">0</span> ? x : -x;&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXX = <span class="number">1e3</span> + <span class="number">15</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e6</span> + <span class="number">15</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">2e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span><span class="keyword">int</span> to, nxt, f;&#125;g[MAXN * <span class="number">6</span>];</div><div class="line"><span class="keyword">int</span> head[MAXN], cur[MAXN], d[MAXN], cnt = <span class="number">-1</span>, mark[MAXX][MAXX], n, m, s, t;</div><div class="line"><span class="built_in">queue</span> &lt;<span class="keyword">int</span>&gt; q;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> f)</span></span>&#123;g[++ cnt] = (Edge)&#123;v, head[u], f&#125;; head[u] = cnt;&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> f)</span></span>&#123;add(u, v, f); add(v, u, f);&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">int</span> r = <span class="number">0</span>, z = <span class="number">1</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line"><span class="keyword">while</span>(ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch == <span class="string">'-'</span>) z = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">while</span>(ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>)&#123;r = r * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">return</span> r * z;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">bfs</span><span class="params">()</span></span>&#123;</div><div class="line">clr(d, <span class="number">-1</span>); d[s] = <span class="number">0</span>; q.push(s);</div><div class="line"><span class="keyword">while</span>(!q.empty())&#123;</div><div class="line"><span class="keyword">int</span> u = q.front(); q.pop();</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; ~i; i = g[i].nxt)&#123;</div><div class="line"><span class="keyword">int</span> v = g[i].to;</div><div class="line"><span class="keyword">if</span>(d[v] == <span class="number">-1</span> &amp;&amp; g[i].f)&#123;</div><div class="line">d[v] = d[u] + <span class="number">1</span>;</div><div class="line">q.push(v);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> d[t] != <span class="number">-1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">dinic</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> flow)</span></span>&#123;</div><div class="line"><span class="keyword">if</span>(u == t) <span class="keyword">return</span> flow;</div><div class="line"><span class="keyword">int</span> ret = <span class="number">0</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span>&amp; i = cur[u]; ~i; i = g[i].nxt)&#123;</div><div class="line"><span class="keyword">int</span> v = g[i].to;</div><div class="line"><span class="keyword">if</span>(g[i].f &amp;&amp; d[v] == d[u] + <span class="number">1</span>)&#123;</div><div class="line"><span class="keyword">int</span> tmp = dinic(v, min(flow, g[i].f));</div><div class="line">g[i].f -= tmp, flow -= tmp;</div><div class="line">g[i ^ <span class="number">1</span>].f += tmp, ret += tmp;</div><div class="line"><span class="keyword">if</span>(!flow) <span class="keyword">break</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>(!ret) d[u] = <span class="number">-1</span>;</div><div class="line"><span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">clr(head, <span class="number">-1</span>);</div><div class="line">n = read(), m = read(); <span class="keyword">int</span> tmp = <span class="number">0</span>, ans = <span class="number">0</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j ++) mark[i][j] = ++ tmp; s = mark[n][m] + <span class="number">1</span>, t = mark[n][m] + <span class="number">2</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; m; j ++) tmp = read(), add_edge(mark[i][j], mark[i][j + <span class="number">1</span>], tmp);</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i ++)</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j ++) tmp = read(), add_edge(mark[i][j], mark[i + <span class="number">1</span>][j], tmp);</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i ++)</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; m; j ++) tmp = read(), add_edge(mark[i][j], mark[i + <span class="number">1</span>][j + <span class="number">1</span>], tmp);</div><div class="line">add_edge(s, <span class="number">1</span>, INF); add_edge(n * m, t, INF);</div><div class="line"><span class="keyword">while</span>(bfs())&#123;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n * m + <span class="number">2</span>; i ++) cur[i] = head[i];</div><div class="line">ans += dinic(s, INF);</div><div class="line">&#125; <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">work();</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 知识点 </category>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络流 </tag>
            
            <tag> 最小割 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>NOIP2015总结</title>
      <link href="/2018/02/19/NOIP2015%E6%80%BB%E7%BB%93/"/>
      <content type="html"><![CDATA[<h1 id="神奇的幻方"><a href="#神奇的幻方" class="headerlink" title="神奇的幻方"></a>神奇的幻方</h1><h2 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h2><p>幻方是一种很神奇的N<em>N矩阵：它由数字1,2,3,……,N</em>N构成，且每行、每列及两条对角线上的数字之和都相同。</p><p>当N为奇数时，我们可以通过以下方法构建一个幻方：</p><p>首先将1写在第一行的中间。</p><p>之后，按如下方式从小到大依次填写每个数K(K=2,3,…,N*N)：</p><p>1.若(K−1)在第一行但不在最后一列，则将K填在最后一行，(K−1)所在列的右一列；</p><p>2.若(K−1)在最后一列但不在第一行，则将K填在第一列，(K−1)所在行的上一行；</p><p>3.若(K−1)在第一行最后一列，则将K填在(K−1)的正下方；</p><p>4.若(K−1)既不在第一行，也不在最后一列，如果(K−1)的右上方还未填数，则将K填在(K−1)的右上方，否则将K填在(K−1)的正下方。</p><p>现给定N请按上述方法构造N*N的幻方。</p><h2 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h2><p>直接模拟</p><h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i, a, b) for(int i = a; i &lt;= b; i ++)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REPG(i, x) for(int i = head[x]; i; i = g[i].nxt)</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(x, y) memset(x, y, sizeof(x));</span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> LF;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">Max</span><span class="params">(LL a, LL b)</span></span>&#123;<span class="keyword">return</span> a &gt; b ? a : b;&#125;</div><div class="line"><span class="function">LL <span class="title">Min</span><span class="params">(LL a, LL b)</span></span>&#123;<span class="keyword">return</span> a &lt; b ? a : b;&#125;</div><div class="line"><span class="function">LL <span class="title">abs</span><span class="params">(LL x)</span></span>&#123;<span class="keyword">return</span> x &gt; <span class="number">0</span> ? x : -x;&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">115</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> a[MAXN][MAXN];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> r = <span class="number">0</span>, z = <span class="number">1</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line">    <span class="keyword">while</span>(ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch == <span class="string">'-'</span>) z = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">while</span>(ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>)&#123;r = r * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">return</span> r * z;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> n = read(), x = <span class="number">1</span>, y = (n + <span class="number">1</span>) / <span class="number">2</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n * n; i ++)&#123;</div><div class="line">        a[x][y] = i;</div><div class="line">        <span class="keyword">if</span>(x == <span class="number">1</span> &amp;&amp; y != n)&#123;x = n; y ++;&#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(x != <span class="number">1</span> &amp;&amp; y == n)&#123;x --; y = <span class="number">1</span>;&#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(x == <span class="number">1</span> &amp;&amp; y == n) x ++;</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">if</span>(!a[x - <span class="number">1</span>][y + <span class="number">1</span>]) x --, y ++;</div><div class="line">            <span class="keyword">else</span> x ++;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j ++) <span class="built_in">printf</span>(<span class="string">"%d "</span>, a[i][j]);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    work();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="信息传递"><a href="#信息传递" class="headerlink" title="信息传递"></a>信息传递</h1><h2 id="题意：-1"><a href="#题意：-1" class="headerlink" title="题意："></a>题意：</h2><p>有n个同学（编号为1到n）正在玩一个信息传递的游戏。在游戏里每人都有一个固定的信息传递对象，其中，编号为i的同学的信息传递对象是编号为Ti同学。</p><p>游戏开始时，每人都只知道自己的生日。之后每一轮中，所有人会同时将自己当前所知的生日信息告诉各自的信息传递对象（注意：可能有人可以从若干人那里获取信息，但是每人只会把信息告诉一个人，即自己的信息传递对象）。当有人从别人口中得知自己的生日时，游戏结束。请问该游戏一共可以进行几轮？</p><h2 id="题解：-1"><a href="#题解：-1" class="headerlink" title="题解："></a>题解：</h2><p>这道题我们可以把它转化成一个图，i给j递纸条，我们就加一条i-&gt;j的边。</p><p>然后跑tarjan，求双连通分量，找最小环。</p><p>为什么这样可以呢？因为每个点只会连出去一条边，所有是等价的。</p><h2 id="代码：-1"><a href="#代码：-1" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> LF;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(x, y) memset(x, y, sizeof(x))</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> lson o &lt;&lt; 1</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rson o &lt;&lt; 1 | 1</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">2e5</span> + <span class="number">15</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span><span class="keyword">int</span> to, nxt;&#125;g[MAXN &lt;&lt; <span class="number">8</span>];</div><div class="line"><span class="keyword">int</span> n, head[MAXN], cnt = <span class="number">0</span>, low[MAXN], dfn[MAXN], tim = <span class="number">0</span>, ans = <span class="number">2e9</span>;</div><div class="line"><span class="keyword">bool</span> instack[MAXN]; <span class="built_in">stack</span> &lt;<span class="keyword">int</span>&gt; sta;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span>&#123;g[++ cnt] = (Edge)&#123;v, head[u]&#125;; head[u] = cnt;&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> r = <span class="number">0</span>, z = <span class="number">1</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line">    <span class="keyword">while</span>(ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch == <span class="string">'-'</span>) z = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">while</span>(ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>)&#123;r = r * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">return</span> r * z;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</div><div class="line">    dfn[u] = low[u] = ++ tim; sta.push(u); instack[u] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; i; i = g[i].nxt)&#123;</div><div class="line">        <span class="keyword">int</span> v = g[i].to;</div><div class="line">        <span class="keyword">if</span>(!dfn[v])&#123;</div><div class="line">            tarjan(v);</div><div class="line">            low[u] = min(low[u], low[v]);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(instack[v]) low[u] = min(low[u], dfn[v]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(low[u] == dfn[u])&#123;</div><div class="line">        <span class="keyword">int</span> anss = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span>(sta.top() != u)&#123;</div><div class="line">            <span class="keyword">int</span> x = sta.top(); sta.pop(); instack[x] = <span class="number">0</span>; anss ++;</div><div class="line">        &#125;</div><div class="line">        sta.pop(); instack[u] = <span class="number">0</span>; anss ++;</div><div class="line">        <span class="keyword">if</span>(anss == <span class="number">2</span>)&#123;<span class="built_in">printf</span>(<span class="string">"2\n"</span>); <span class="built_in">exit</span>(<span class="number">0</span>);&#125;</div><div class="line">        <span class="keyword">if</span>(anss &gt; <span class="number">1</span>) ans = min(ans, anss);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> n = read();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)&#123;</div><div class="line">        <span class="keyword">int</span> x = read();</div><div class="line">        add(i, x);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) <span class="keyword">if</span>(!dfn[i]) tarjan(i);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    work();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="斗地主"><a href="#斗地主" class="headerlink" title="斗地主"></a>斗地主</h1><h2 id="题意：-2"><a href="#题意：-2" class="headerlink" title="题意："></a>题意：</h2><p>牛牛最近迷上了一种叫斗地主的扑克游戏。斗地主是一种使用黑桃、红心、梅花、方片的A到K加上大小王的共54张牌来进行的扑克牌游戏。在斗地主中，牌的大小关系根据牌的数码表示如下：3&lt;4&lt;5&lt;6&lt;7&lt;8&lt;9&lt;10&lt;J&lt;Q&lt;K&lt;A&lt;2&lt;小王&lt;大王，而花色并不对牌的大小产生影响。每一局游戏中，一副手牌由n张牌组成。游戏者每次可以根据规定的牌型进行出牌，首先打光自己的手牌一方取得游戏的胜利。</p><p>现在，牛牛只想知道，对于自己的若干组手牌，分别最少需要多少次出牌可以将它们打光。请你帮他解决这个问题。</p><p>需要注意的是，本题中游戏者每次可以出手的牌型与一般的斗地主相似而略有不同。</p><h2 id="题解：-2"><a href="#题解：-2" class="headerlink" title="题解："></a>题解：</h2><p>这题其实（看了题解后）不难。</p><p>我们先搜顺子（3-&gt;1），然后贪心的带牌，如以下代码。</p><h2 id="代码：-2"><a href="#代码：-2" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i, a, b) for(int i = a; i &lt;= b; i ++)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REPG(i, x) for(int i = head[x]; i; i = g[i].nxt)</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(x, y) memset(x, y, sizeof(x));</span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> LF;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">Max</span><span class="params">(LL a, LL b)</span></span>&#123;<span class="keyword">return</span> a &gt; b ? a : b;&#125;</div><div class="line"><span class="function">LL <span class="title">Min</span><span class="params">(LL a, LL b)</span></span>&#123;<span class="keyword">return</span> a &lt; b ? a : b;&#125;</div><div class="line"><span class="function">LL <span class="title">abs</span><span class="params">(LL x)</span></span>&#123;<span class="keyword">return</span> x &gt; <span class="number">0</span> ? x : -x;&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, t, ans, a[<span class="number">115</span>], c[<span class="number">5</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> r = <span class="number">0</span>, z = <span class="number">1</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line">    <span class="keyword">while</span>(ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch == <span class="string">'-'</span>) z = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">while</span>(ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>)&#123;r = r * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">return</span> r * z;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">getans</span><span class="params">()</span></span>&#123;<span class="comment">//带牌贪心 </span></div><div class="line">    clr(c, <span class="number">0</span>);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">13</span>; i ++) c[a[i]] ++;</div><div class="line">    <span class="keyword">int</span> tot = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span>(c[<span class="number">4</span>] &amp;&amp; c[<span class="number">2</span>] &gt; <span class="number">1</span>) c[<span class="number">4</span>] --, c[<span class="number">2</span>] -= <span class="number">2</span>, tot ++;<span class="comment">//4 + 2(2)</span></div><div class="line">    <span class="keyword">while</span>(c[<span class="number">4</span>] &amp;&amp; c[<span class="number">1</span>] &gt; <span class="number">1</span>) c[<span class="number">4</span>] --, c[<span class="number">1</span>] -= <span class="number">2</span>, tot ++;<span class="comment">//4 + 2(1)</span></div><div class="line">    <span class="keyword">while</span>(c[<span class="number">4</span>] &amp;&amp; c[<span class="number">2</span>]) c[<span class="number">4</span>] --, c[<span class="number">2</span>] --, tot ++; <span class="comment">//4 + 1(2)</span></div><div class="line">    <span class="keyword">while</span>(c[<span class="number">3</span>] &amp;&amp; c[<span class="number">2</span>]) c[<span class="number">3</span>] --, c[<span class="number">2</span>] --, tot ++;        <span class="comment">//3 + 2</span></div><div class="line">    <span class="keyword">while</span>(c[<span class="number">3</span>] &amp;&amp; c[<span class="number">1</span>]) c[<span class="number">3</span>] --, c[<span class="number">1</span>] --, tot ++;        <span class="comment">//3 + 1</span></div><div class="line">    <span class="keyword">return</span> tot + c[<span class="number">1</span>] + c[<span class="number">2</span>] + c[<span class="number">3</span>] + c[<span class="number">4</span>];<span class="comment">//剩余的牌</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> now)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(now &gt;= ans) <span class="keyword">return</span> ;</div><div class="line">    <span class="keyword">int</span> tmp = getans();</div><div class="line">    <span class="keyword">if</span>(now + tmp &lt; ans) ans = now + tmp;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= <span class="number">13</span>; i ++)&#123;<span class="comment">//三顺子 </span></div><div class="line">        <span class="keyword">int</span> j = i;</div><div class="line">        <span class="keyword">while</span>(a[j] &gt;= <span class="number">3</span>) j ++;</div><div class="line">        <span class="keyword">if</span>(j - i &gt;= <span class="number">2</span>)&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> jj = i + <span class="number">1</span>; jj &lt;= j - <span class="number">1</span>; jj ++)&#123;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k = i; k &lt;= jj; k ++) a[k] -= <span class="number">3</span>;</div><div class="line">                dfs(now + <span class="number">1</span>);</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k = i; k &lt;= jj; k ++) a[k] += <span class="number">3</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= <span class="number">13</span>; i ++)&#123;<span class="comment">//双顺子 </span></div><div class="line">        <span class="keyword">int</span> j = i;</div><div class="line">        <span class="keyword">while</span>(a[j] &gt;= <span class="number">2</span>) j ++;</div><div class="line">        <span class="keyword">if</span>(j - i &gt;= <span class="number">3</span>)&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> jj = i + <span class="number">2</span>; jj &lt;= j - <span class="number">1</span>; jj ++)&#123;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k = i; k &lt;= jj; k ++) a[k] -= <span class="number">2</span>;</div><div class="line">                dfs(now + <span class="number">1</span>);</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k = i; k &lt;= jj; k ++) a[k] += <span class="number">2</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= <span class="number">13</span>; i ++)&#123;<span class="comment">//单顺子 </span></div><div class="line">        <span class="keyword">int</span> j = i;</div><div class="line">        <span class="keyword">while</span>(a[j] &gt;= <span class="number">1</span>) j ++;</div><div class="line">        <span class="keyword">if</span>(j - i &gt;= <span class="number">5</span>)&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> jj = i + <span class="number">4</span>; jj &lt;= j - <span class="number">1</span>; jj ++)&#123;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k = i; k &lt;= jj; k ++) a[k] -= <span class="number">1</span>;</div><div class="line">                dfs(now + <span class="number">1</span>);</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k = i; k &lt;= jj; k ++) a[k] += <span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">    t = read(), n = read();</div><div class="line">    <span class="keyword">while</span>(t --)&#123;</div><div class="line">        clr(a, <span class="number">0</span>);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)&#123;</div><div class="line">            <span class="keyword">int</span> x = read(), y = read();</div><div class="line">            <span class="keyword">if</span>(x == <span class="number">1</span>) x = <span class="number">13</span>;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(x) x --;</div><div class="line">            a[x] ++;</div><div class="line">        &#125;</div><div class="line">        ans = <span class="number">2e9</span>; dfs(<span class="number">0</span>);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    work();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="跳石头："><a href="#跳石头：" class="headerlink" title="跳石头："></a>跳石头：</h1><h2 id="题意：-3"><a href="#题意：-3" class="headerlink" title="题意："></a>题意：</h2><p>这项比赛将在一条笔直的河道中进行,河道中分布着一些巨大岩石。组委会已经选择好了两块岩石作为比赛起点和终点。在起点和终点之间,有 N 块岩石(不含起点和终 点的岩石)。在比赛过程中,选手们将从起点出发,每一步跳向相邻的岩石,直至到达 终点。</p><p>为了提高比赛难度,组委会计划移走一些岩石,使得选手们在比赛过程中的最短跳 跃距离尽可能长。由于预算限制,组委会至多从起点和终点之间移走 M 块岩石(不能 移走起点和终点的岩石)。</p><h2 id="题解：-3"><a href="#题解：-3" class="headerlink" title="题解："></a>题解：</h2><p>二分答案，判断是否可行。</p><h2 id="代码：-3"><a href="#代码：-3" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> LF;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(x, y) memset(x, y, sizeof(x))</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> lson o &lt;&lt; 1</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rson o &lt;&lt; 1 | 1</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e5</span> + <span class="number">15</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> a[MAXN], len, n, m; </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> r = <span class="number">0</span>, z = <span class="number">1</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line">    <span class="keyword">while</span>(ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch == <span class="string">'-'</span>) z = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">while</span>(ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>)&#123;r = r * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">return</span> r * z;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>, last = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)&#123;</div><div class="line">        <span class="keyword">if</span>(a[i] - a[last] &lt; x) sum ++;</div><div class="line">    <span class="keyword">else</span> last = i;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> sum &lt;= m;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">    len = read(), n = read(), m = read();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) a[i] = read();</div><div class="line">    a[++ n] = len;</div><div class="line">    <span class="keyword">int</span> l = <span class="number">1</span>, r = len, ans = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span>(l &lt;= r)&#123;</div><div class="line">        <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span>(check(mid))&#123;ans = mid; l = mid+ <span class="number">1</span>;&#125;</div><div class="line">        <span class="keyword">else</span> r = mid - <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    work();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="子串"><a href="#子串" class="headerlink" title="子串"></a>子串</h1><h2 id="题意：-4"><a href="#题意：-4" class="headerlink" title="题意："></a>题意：</h2><p>有两个仅包含小写英文字母的字符串 A 和 B。现在要从字符串 A 中取出 k 个互不重叠的非空子串,然后把这 k 个子串按照其在字符串 A 中出现的顺序依次连接起来得到一 个新的字符串,请问有多少种方案可以使得这个新串与字符串 B 相等?注意:子串取出 的位置不同也认为是不同的方案。</p><h2 id="题解：-4"><a href="#题解：-4" class="headerlink" title="题解："></a>题解：</h2><p>这题代码挺短的，但是真的不太好想。</p><p>首先我们这样想：$dp<em>{i,j,k}$表示s1扫到了i，s2扫到了j，s1选了k个子串。那么：$dp</em>{i,j,k}=dp<em>{i-1,j-1,k}+dp</em>{i-1,j-1,k-1},s1[i]==s2[j]$</p><p>不过这种是错的，因为我们这种只考虑了当前的这个字符<strong>单独成一个子串</strong>的方案，它还可能跟前面的有交集。</p><p>这时候我们的解决方案就比较巧妙：</p><p>$s<em>{i,j,k}$表示s1[i]必须使得方案数；$f</em>{i,j,k}$表示s1[i]选+不选的方案数。</p><p>对于s数组，每次遇到a[i]==b[j]的时候，有两种情况：单成一串或者和之前的一串（这个就成功的解决的我们的问题）$s<em>{i,j,k}=f</em>{i-1,j-1,k-1}+s_{i-1,j-1,k}$</p><p>$f<em>{i,j,k}=s</em>{i,j,k}+f_{i-1,j,k}$分选和不选两种。</p><p>第一位数组可以不用，因为我们每次都只用i-1（或i）的状态</p><h2 id="代码：-4"><a href="#代码：-4" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> LF;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(x, y) memset(x, y, sizeof(x))</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> lson o &lt;&lt; 1</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rson o &lt;&lt; 1 | 1</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">215</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line">LL f[MAXN][MAXN] = &#123;<span class="number">1</span>&#125;, sum[MAXN][MAXN], n, m, kk;</div><div class="line"><span class="keyword">char</span> a[MAXN &lt;&lt; <span class="number">3</span>], b[MAXN];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">int</span> r = <span class="number">0</span>, z = <span class="number">1</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line"><span class="keyword">while</span>(ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch == <span class="string">'-'</span>) z = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">while</span>(ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>)&#123;r = r * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">return</span> r * z;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">n = read(), m = read(), kk = read();</div><div class="line"><span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = m; j &gt;= <span class="number">1</span>; j --)</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k = kk; k &gt;= <span class="number">1</span>; k --)&#123;</div><div class="line">        <span class="keyword">if</span>(a[i - <span class="number">1</span>] == b[j - <span class="number">1</span>]) sum[j][k] = sum[j - <span class="number">1</span>][k] + f[j - <span class="number">1</span>][k - <span class="number">1</span>];</div><div class="line">        <span class="keyword">else</span> sum[j][k] = <span class="number">0</span>;</div><div class="line">            f[j][k] = (f[j][k] + sum[j][k]) % MOD;</div><div class="line">        &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, f[m][kk]);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">work();</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="运输计划"><a href="#运输计划" class="headerlink" title="运输计划"></a>运输计划</h1><h2 id="题意：-5"><a href="#题意：-5" class="headerlink" title="题意："></a>题意：</h2><p>L 国有 n 个星球,还有 n-1 条双向航道,每条航道建立在两个星球之间,这 n-1 条航道连通了 L 国的所有星球。</p><p>小 P 掌管一家物流公司,该公司有很多个运输计划,每个运输计划形如:有一艘物</p><p>流飞船需要从 ui 号星球沿最快的宇航路径飞行到 vi 号星球去。显然,飞船驶过一条航道 是需要时间的,对于航道 j,任意飞船驶过它所花费的时间为 tj,并且任意两艘飞船之 间不会产生任何干扰。</p><p>为了鼓励科技创新,L 国国王同意小 P 的物流公司参与 L 国的航道建设,即允许小 P 把某一条航道改造成虫洞,飞船驶过虫洞不消耗时间。</p><p>在虫洞的建设完成前小 P 的物流公司就预接了 m 个运输计划。在虫洞建设完成后, 这 m 个运输计划会同时开始,所有飞船一起出发。当这 m 个运输计划都完成时,小 P 的 物流公司的阶段性工作就完成了。</p><p>如果小 P 可以自由选择将哪一条航道改造成虫洞,试求出小 P 的物流公司完成阶段 性工作所需要的最短时间是多少?</p><h2 id="题解：-5"><a href="#题解：-5" class="headerlink" title="题解："></a>题解：</h2><p>(题解来自cjr大佬)</p><p>暴力大法好。题解里主要是拿二分+树上差分或树剖来写的。我的思路比较简单。</p><p>首先肯定是把前k长路径交上的一条边改造成虫洞。原因很简单，加入我们改造k+1长路径上的一条边，而这条边不在第k条边上，那么消耗时间至少是第k条路径的长度，没有意义。第二改造的边是路径交上最大的边，这个无需解释。。。</p><p>所以做法就是，先将路径按长度排序，从最长的开始求交，选前k条路径交上最大值w改造后的时间就是max(最长边-w, 第k+1长边 )，最后取最小值就是答案。</p><p>这样需要实现路径最值和路径求交，都可用倍增法求lca解决，路径最值只需倍增时记录即可。路径求交有一个结论：树上(a,b)和(c,d)两条路径的交是lca(a,c), lca(b,d), lca(a,d), lca(b,c)四点之间最深的两个点之间的路径，如果这两点重合，表示两条路径没有公共边。这个分类讨论即可证明。</p><p>算法时间复杂度O(nlgn)，在luogu上最慢的点用了800ms。noip大概会被卡掉最后一个点。</p><h2 id="代码：-5"><a href="#代码：-5" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> mem(x, y) memset(x, y, sizeof(x))</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i, m, n) for(int i = m; i &lt;= n; i ++)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REPG(i, u) for(int i = head[u]; i; i = g[i].next)</span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> DB;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">Max</span><span class="params">(LL a, LL b)</span></span>&#123;<span class="keyword">return</span> a &gt; b ? a : b;&#125;</div><div class="line"><span class="function">LL <span class="title">Min</span><span class="params">(LL a, LL b)</span></span>&#123;<span class="keyword">return</span> a &lt; b ? a : b;&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e6</span> + <span class="number">15</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> to, nxt, dis;</div><div class="line">&#125;g[MAXN &lt;&lt; <span class="number">1</span>];</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">plan</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> x, y, d;</div><div class="line">&#125;e[MAXN];</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"><span class="keyword">int</span> head[MAXN], cnt = <span class="number">0</span>;</div><div class="line"><span class="keyword">int</span> p[MAXN][<span class="number">20</span>], mx[MAXN][<span class="number">20</span>];</div><div class="line"><span class="keyword">int</span> dist[MAXN], d[MAXN];</div><div class="line"><span class="keyword">int</span> x[MAXN], y[MAXN];</div><div class="line"><span class="keyword">int</span> mxdist = <span class="number">-1</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> r = <span class="number">0</span>, z = <span class="number">1</span>;</div><div class="line">    <span class="keyword">char</span> ch = getchar();</div><div class="line">    <span class="keyword">while</span>(ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch == <span class="string">'-'</span>) z = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">while</span>(ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>)&#123;r = r * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">return</span> r * z;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> dis)</span></span>&#123;</div><div class="line">    g[++ cnt] = (Edge)&#123;v, head[u], dis&#125;;</div><div class="line">    head[u] = cnt;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">pre</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i ++) d[i] = <span class="number">-1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; i; i = g[i].nxt)&#123;</div><div class="line">        <span class="keyword">int</span> v = g[i].to;</div><div class="line">        <span class="keyword">if</span>(d[v] == <span class="number">-1</span> &amp;&amp; u != p[v][<span class="number">0</span>])&#123;</div><div class="line">            d[v] = d[u] + <span class="number">1</span>;</div><div class="line">            dist[v] = dist[u] + g[i].dis;</div><div class="line">            mx[v][<span class="number">0</span>] = g[i].dis;</div><div class="line">            p[v][<span class="number">0</span>] = u;</div><div class="line">            dfs(v);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">doit</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; (<span class="number">1</span> &lt;&lt; j) &lt;= n; j ++)&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)&#123;</div><div class="line">            <span class="keyword">if</span>(p[i][j - <span class="number">1</span>])&#123;</div><div class="line">                p[i][j] = p[p[i][j - <span class="number">1</span>]][j - <span class="number">1</span>];</div><div class="line">                mx[i][j] = max(mx[i][j - <span class="number">1</span>], mx[p[i][j - <span class="number">1</span>]][j - <span class="number">1</span>]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">lca</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> i;</div><div class="line">    <span class="keyword">if</span>(d[x] &lt; d[y]) swap(x, y);</div><div class="line">    mxdist = max(mxdist, mx[x][<span class="number">0</span>]);</div><div class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; (<span class="number">1</span> &lt;&lt; i) &lt;= d[x]; i ++);</div><div class="line">    i --;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = i; j &gt;= <span class="number">0</span>; j --)&#123;</div><div class="line">        <span class="keyword">if</span>(d[x] - (<span class="number">1</span> &lt;&lt; j) &gt;= d[y])&#123;</div><div class="line">            mxdist = max(mxdist, mx[x][j]);</div><div class="line">            x = p[x][j];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(x == y) <span class="keyword">return</span> x;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = i; j &gt;= <span class="number">0</span>; j --)&#123;</div><div class="line">        <span class="keyword">if</span>(p[x][j] &amp;&amp; p[x][j] != p[y][j])&#123;</div><div class="line">            mxdist = max(mxdist, mx[x][j]);</div><div class="line">            mxdist = max(mxdist, mx[y][j]);</div><div class="line">            x = p[x][j]; y = p[y][j];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    mxdist = max(mxdist, max(mx[x][<span class="number">0</span>], mx[y][<span class="number">0</span>]));</div><div class="line">    <span class="keyword">return</span> p[x][<span class="number">0</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> fafa = lca(x, y);</div><div class="line">    <span class="keyword">return</span> dist[x] + dist[y] - (dist[fafa] &lt;&lt; <span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Make_A_Init</span><span class="params">()</span></span>&#123;</div><div class="line">    pre();</div><div class="line">    dfs(<span class="number">1</span>);</div><div class="line">    doit();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(plan x, plan y)</span></span>&#123;<span class="keyword">return</span> x.d &gt; y.d;&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ctmp</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;<span class="keyword">return</span> d[x] &gt; d[y];&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    n = read(), m = read();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i ++)&#123;</div><div class="line">        <span class="keyword">int</span> u = read(), v = read(), dis = read();</div><div class="line">        add(u, v, dis); add(v, u, dis);</div><div class="line">    &#125;</div><div class="line">    Make_A_Init();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i ++)&#123;e[i].x = read(), e[i].y = read(); e[i].d = calc(e[i].x, e[i].y);&#125;</div><div class="line">    sort(e + <span class="number">1</span>, e + m + <span class="number">1</span>, cmp);</div><div class="line">    e[m + <span class="number">1</span>].d = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> gg[<span class="number">6</span>];</div><div class="line">    <span class="keyword">int</span> ans = e[<span class="number">1</span>].d, xx, yy;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i ++)&#123;</div><div class="line">        <span class="keyword">if</span>(i == <span class="number">1</span>)&#123;xx = e[<span class="number">1</span>].x, yy = e[<span class="number">1</span>].y;&#125;</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            gg[<span class="number">1</span>] = lca(xx, e[i].x); gg[<span class="number">2</span>] = lca(xx, e[i].y);</div><div class="line">            gg[<span class="number">3</span>] = lca(yy, e[i].x); gg[<span class="number">4</span>] = lca(yy, e[i].y);</div><div class="line">            sort(gg + <span class="number">1</span>, gg + <span class="number">5</span>, ctmp);</div><div class="line">            xx = gg[<span class="number">1</span>], yy = gg[<span class="number">2</span>];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(xx == yy) <span class="keyword">break</span>;</div><div class="line">        mxdist = <span class="number">-1</span>;</div><div class="line">        <span class="keyword">int</span> fafa = lca(xx, yy);</div><div class="line">        <span class="keyword">int</span> maxn = e[<span class="number">1</span>].d - mxdist;</div><div class="line">        maxn = max(maxn, e[i + <span class="number">1</span>].d);</div><div class="line">        ans = min(ans, maxn);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    init();</div><div class="line">    <span class="keyword">return</span>  <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 总结 </category>
          
          <category> 刷题总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图论 </tag>
            
            <tag> 模拟 </tag>
            
            <tag> 字符串 </tag>
            
            <tag> 最近公共祖先 </tag>
            
            <tag> 动态规划 </tag>
            
            <tag> 枚举 </tag>
            
            <tag> 搜索 </tag>
            
            <tag> 并查集 </tag>
            
            <tag> dfs </tag>
            
            <tag> 贪心 </tag>
            
            <tag> 二分答案 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>NOIP2014总结</title>
      <link href="/2018/02/19/NOIP2014%E6%80%BB%E7%BB%93/"/>
      <content type="html"><![CDATA[<h1 id="生活大爆炸版石头剪刀布"><a href="#生活大爆炸版石头剪刀布" class="headerlink" title="生活大爆炸版石头剪刀布"></a>生活大爆炸版石头剪刀布</h1><h2 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h2><p>石头剪刀布是常见的猜拳游戏：石头胜剪刀，剪刀胜布，布胜石头。如果两个人出拳一样，则不分胜负。在《生活大爆炸》第二季第8 集中出现了一种石头剪刀布的升级版游戏。</p><p>升级版游戏在传统的石头剪刀布游戏的基础上，增加了两个新手势：</p><p>斯波克：《星际迷航》主角之一。</p><p>蜥蜴人：《星际迷航》中的反面角色。</p><p>这五种手势的胜负关系如表一所示，表中列出的是甲对乙的游戏结果。</p><p>现在，小A 和小B 尝试玩这种升级版的猜拳游戏。已知他们的出拳都是有周期性规律的，但周期长度不一定相等。例如：如果小 A以“石头 - 布- 石头- 剪刀- 蜥蜴人- 斯波克”长度为6 的周期出拳，那么他的出拳序列就是“石头- 布- 石头- 剪刀- 蜥蜴人- 斯波克- 石头- 布- 石头- 剪刀- 蜥蜴人- 斯波克- ……”，而如果小B 以“剪刀- 石头- 布- 斯波克- 蜥蜴人”长度为5 的周期出拳，那么他出拳的序列就是“剪刀- 石头- 布- 斯波克- 蜥蜴人- 剪刀- 石头- 布-斯波克- 蜥蜴人- ……”</p><p>已知小A 和小B 一共进行N 次猜拳。每一次赢的人得1 分，输的得0 分；平局两人都得0 分。现请你统计N 次猜拳结束之后两人的得分。</p><h2 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h2><p>这个。。。直接模拟就完了。</p><h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i, a, b) for(int i = a; i &lt;= b; i ++)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REPG(i, x) for(int i = head[x]; i; i = g[i].nxt)</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(x, y) memset(x, y, sizeof(x));</span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> LF;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">Max</span><span class="params">(LL a, LL b)</span></span>&#123;<span class="keyword">return</span> a &gt; b ? a : b;&#125;</div><div class="line"><span class="function">LL <span class="title">Min</span><span class="params">(LL a, LL b)</span></span>&#123;<span class="keyword">return</span> a &lt; b ? a : b;&#125;</div><div class="line"><span class="function">LL <span class="title">abs</span><span class="params">(LL x)</span></span>&#123;<span class="keyword">return</span> x &gt; <span class="number">0</span> ? x : -x;&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> a[<span class="number">5</span>][<span class="number">5</span>] = &#123;&#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>&#125;, &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>&#125;, &#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;&#125;;</div><div class="line"><span class="keyword">int</span> x[<span class="number">215</span>], y[<span class="number">215</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> r = <span class="number">0</span>, z = <span class="number">1</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line">    <span class="keyword">while</span>(ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch == <span class="string">'-'</span>) z = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">while</span>(ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>)&#123;r = r * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">return</span> r * z;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> n = read(), na = read(), nb = read(), ans1 = <span class="number">0</span>, ans2 = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= na; i ++) x[i] = read();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= nb; i ++) y[i] = read();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)&#123;</div><div class="line">        <span class="keyword">int</span> tmp1 = i % na; <span class="keyword">if</span>(!tmp1) tmp1 = na;</div><div class="line">        <span class="keyword">int</span> tmp2 = i % nb; <span class="keyword">if</span>(!tmp2) tmp2 = nb;</div><div class="line">        ans1 += a[x[tmp1]][y[tmp2]]; ans2 += a[y[tmp2]][x[tmp1]];</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, ans1, ans2);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    work();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="联合权值"><a href="#联合权值" class="headerlink" title="联合权值"></a>联合权值</h1><h2 id="题意：-1"><a href="#题意：-1" class="headerlink" title="题意："></a>题意：</h2><p>无向连通图G 有n 个点，n - 1 条边。点从1 到n 依次编号，编号为 i 的点的权值为W i ，每条边的长度均为1 。图上两点( u , v ) 的距离定义为u 点到v 点的最短距离。对于图G 上的点对( u, v) ，若它们的距离为2 ，则它们之间会产生Wu×Wv 的联合权值。</p><p>请问图G 上所有可产生联合权值的有序点对中，联合权值最大的是多少？所有联合权值之和是多少？</p><h2 id="题解：-1"><a href="#题解：-1" class="headerlink" title="题解："></a>题解：</h2><p>对于每个点i，它的儿子两两都会产生联合权值，然后我们就对于每个点，扫一遍它的儿子，这样显然不会扫重，分别累加、取max就好了。</p><h2 id="代码：-1"><a href="#代码：-1" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> r = <span class="number">0</span>, z = <span class="number">1</span>;</div><div class="line">    <span class="keyword">char</span> ch = getchar();</div><div class="line">    <span class="keyword">while</span>(ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch == <span class="string">'-'</span>) z = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">while</span>(ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>)&#123;r = r * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">return</span> r * z;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">2e5</span> + <span class="number">15</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> to, nxt;</div><div class="line">&#125;g[MAXN * <span class="number">2</span>];</div><div class="line"></div><div class="line"><span class="keyword">int</span> head[MAXN], cnt = <span class="number">0</span>;</div><div class="line"><span class="keyword">int</span> w[MAXN];</div><div class="line"><span class="keyword">int</span> maxn = <span class="number">-1</span>;</div><div class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span>&#123;</div><div class="line">    g[++ cnt] = (Edge)&#123;v, head[u]&#125;;</div><div class="line">    head[u] = cnt;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> maxx = <span class="number">-1</span>, maxxx = <span class="number">-1</span>;</div><div class="line">    <span class="keyword">int</span> gg = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; i; i = g[i].nxt)&#123;</div><div class="line">        <span class="keyword">int</span> v = g[i].to;</div><div class="line">        <span class="keyword">if</span>(w[v] &gt; maxx) maxxx = maxx, maxx = w[v];</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(w[v] &gt; maxxx) maxxx = w[v];</div><div class="line">        ans = (ans + gg * w[v]) % <span class="number">10007</span>;</div><div class="line">        gg = (gg + w[v]) % <span class="number">10007</span>;</div><div class="line">    &#125;</div><div class="line">    maxn = max(maxn, maxx * maxxx);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> n = read();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i ++)&#123;</div><div class="line">        <span class="keyword">int</span> u = read(), v = read();</div><div class="line">        add(u, v);</div><div class="line">        add(v, u);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) w[i] = read();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) work(i);</div><div class="line">    ans = ans * <span class="number">2</span> % <span class="number">10007</span>;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, maxn, ans);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    init();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="飞扬的小鸟"><a href="#飞扬的小鸟" class="headerlink" title="飞扬的小鸟"></a>飞扬的小鸟</h1><h2 id="题意：-2"><a href="#题意：-2" class="headerlink" title="题意："></a>题意：</h2><p>Flappy Bird 是一款风靡一时的休闲手机游戏。玩家需要不断控制点击手机屏幕的频率来调节小鸟的飞行高度，让小鸟顺利通过画面右方的管道缝隙。如果小鸟一不小心撞到了水管或者掉在地上的话，便宣告失败。</p><p>为了简化问题，我们对游戏规则进行了简化和改编：</p><ol><li>游戏界面是一个长为n ，高为 m 的二维平面，其中有k 个管道（忽略管道的宽度）。</li><li>小鸟始终在游戏界面内移动。小鸟从游戏界面最左边任意整数高度位置出发，到达游戏界面最右边时，游戏完成。</li><li>小鸟每个单位时间沿横坐标方向右移的距离为1 ，竖直移动的距离由玩家控制。如果点击屏幕，小鸟就会上升一定高度X ，每个单位时间可以点击多次，效果叠加；如果不点击屏幕，小鸟就会下降一定高度Y 。小鸟位于横坐标方向不同位置时，上升的高度X 和下降的高度Y 可能互不相同</li><li>小鸟高度等于0 或者小鸟碰到管道时，游戏失败。小鸟高度为 m 时，无法再上升。</li></ol><p>现在，请你判断是否可以完成游戏。如果可以 ，输出最少点击屏幕数；否则，输出小鸟最多可以通过多少个管道缝隙。</p><h2 id="题解：-2"><a href="#题解：-2" class="headerlink" title="题解："></a>题解：</h2><p>这个就是个dp，不过还是挺复杂的。</p><p>$f{i,j}$表示当前到了i，高度为j时，成功过掉了前面所有的柱子，点的最少的次数。</p><p>$f<em>{i,j}=min(f</em>{i-1,j-x<em>i}+1,f</em>{i,j-x_i}+1)$，然后特判一下j&gt;m的情况</p><p>$f<em>{i,j}=min(f</em>{i,j},f_{i-1,j+y_i})$。</p><p>然后如果当前i位置有管道，我们把不合法的j给它赋值成INF。</p><p>然后答案就很好处理了。</p><h2 id="代码：-2"><a href="#代码：-2" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> DB;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">10050</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">1050</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> x[N], y[N];</div><div class="line"><span class="keyword">int</span> n, m, p;</div><div class="line"><span class="keyword">int</span> low[N], high[N];</div><div class="line"><span class="keyword">int</span> f[N][M * <span class="number">2</span>];</div><div class="line"><span class="keyword">bool</span> e[N];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span>  r = <span class="number">0</span>, z = <span class="number">1</span>;</div><div class="line">    <span class="keyword">char</span> ch = getchar();</div><div class="line">    <span class="keyword">while</span>(ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch == <span class="string">'-'</span>) z = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">while</span>(ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>)&#123;r = r * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">return</span> r * z;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">Min</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;<span class="keyword">return</span> a &lt; b ? a : b;&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">Max</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;<span class="keyword">return</span> a &gt; b ? a : b;&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">fre</span><span class="params">()</span></span>&#123;</div><div class="line">    freopen(<span class="string">".in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line">    freopen(<span class="string">".out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">GetData</span><span class="params">()</span></span>&#123;</div><div class="line">    n = read(), m = read(), p = read();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) x[i] = read(), y[i] = read();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)&#123;</div><div class="line">        low[i] = <span class="number">1</span>;</div><div class="line">        high[i] = m;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= p; i ++)&#123;</div><div class="line">        <span class="keyword">int</span> a = read(), b = read(), c = read();</div><div class="line">        low[a] = b + <span class="number">1</span>, high[a] = c - <span class="number">1</span>;</div><div class="line">        e[a] = <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Do</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">memset</span>(f, <span class="number">0x3f</span>, <span class="keyword">sizeof</span>(f));</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j ++)</div><div class="line">        f[<span class="number">0</span>][j] = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)&#123;</div><div class="line">        </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = x[i] + <span class="number">1</span>; j &lt;= m + x[i]; j ++)</div><div class="line">            f[i][j] = Min(f[i - <span class="number">1</span>][j - x[i]] + <span class="number">1</span>, f[i][j - x[i]] + <span class="number">1</span>);</div><div class="line">        <span class="comment">//上升 </span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = m + <span class="number">1</span>; j &lt;= m + x[i]; j ++)</div><div class="line">            f[i][m] = Min(f[i][m], f[i][j]);</div><div class="line">        <span class="comment">//特判 </span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j + y[i] &lt;= m; j ++)</div><div class="line">            f[i][j] = Min(f[i][j], f[i - <span class="number">1</span>][j + y[i]]);</div><div class="line">        <span class="comment">//下降 </span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; low[i]; j ++)</div><div class="line">            f[i][j] = f[<span class="number">0</span>][<span class="number">0</span>]; <span class="comment">//+oo</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = high[i] + <span class="number">1</span>; j &lt;= m; j ++)</div><div class="line">            f[i][j] = f[<span class="number">0</span>][<span class="number">0</span>]; <span class="comment">//+oo</span></div><div class="line">        <span class="comment">//管道 </span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> ans = f[<span class="number">0</span>][<span class="number">0</span>];</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j ++)</div><div class="line">        ans = Min(ans, f[n][j]);</div><div class="line">    <span class="keyword">if</span>(ans &lt; f[<span class="number">0</span>][<span class="number">0</span>]) <span class="built_in">printf</span>(<span class="string">"1\n%d\n"</span>, ans);</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">int</span> i, j;</div><div class="line">        <span class="keyword">for</span>(i = n; i &gt;= <span class="number">1</span>; i--)&#123;</div><div class="line">            <span class="keyword">for</span>(j = <span class="number">1</span>; j &lt;= m; j ++)&#123;</div><div class="line">                <span class="keyword">if</span>(f[i][j] &lt; f[<span class="number">0</span>][<span class="number">0</span>]) <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(j &lt;= m) <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        ans = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(j = <span class="number">1</span>; j &lt;= i; j ++)</div><div class="line">            <span class="keyword">if</span>(e[j]) ans ++;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"0\n%d\n"</span>, ans);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    GetData();</div><div class="line">    Do();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="comment">//fre();</span></div><div class="line">    init();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="无线网络发射器选址"><a href="#无线网络发射器选址" class="headerlink" title="无线网络发射器选址"></a>无线网络发射器选址</h1><h2 id="题意：-3"><a href="#题意：-3" class="headerlink" title="题意："></a>题意：</h2><p>随着智能手机的日益普及，人们对无线网的需求日益增大。某城市决定对城市内的公共场所覆盖无线网。</p><p>假设该城市的布局为由严格平行的129 条东西向街道和129 条南北向街道所形成的网格状，并且相邻的平行街道之间的距离都是恒定值 1 。东西向街道从北到南依次编号为0,1,2…128 , 南北向街道从西到东依次编号为0,1,2…128 。</p><p>东西向街道和南北向街道相交形成路口，规定编号为x 的南北向街道和编号为y 的东西向街道形成的路口的坐标是（x , y ）。 在 某 些 路口存在一定数量的公共场所 。</p><p>由于政府财政问题，只能安装一个大型无线网络发射器。该无线网络发射器的传播范围</p><p>一个以该点为中心，边长为2*d 的正方形。传播范围包括正方形边界。</p><p>例如下图是一个d = 1 的无线网络发射器的覆盖范围示意图。</p><p>现在政府有关部门准备安装一个传播参数为d 的无线网络发射器，希望你帮助他们在城市内找出合适的安装地点，使得覆盖的公共场所最多。</p><h2 id="题解：-3"><a href="#题解：-3" class="headerlink" title="题解："></a>题解：</h2><p>这道题很水啊。。。</p><p>直接二维前缀和，再扫一遍取max，再再扫一遍，如果当前算出来的值==max值得话，cnt（方案数）++</p><h2 id="代码：-3"><a href="#代码：-3" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i, a, b) for(int i = a; i &lt;= b; i ++)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REPG(i, x) for(int i = head[x]; i; i = g[i].nxt)</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(x, y) memset(x, y, sizeof(x));</span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> LF;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">Max</span><span class="params">(LL a, LL b)</span></span>&#123;<span class="keyword">return</span> a &gt; b ? a : b;&#125;</div><div class="line"><span class="function">LL <span class="title">Min</span><span class="params">(LL a, LL b)</span></span>&#123;<span class="keyword">return</span> a &lt; b ? a : b;&#125;</div><div class="line"><span class="function">LL <span class="title">abs</span><span class="params">(LL x)</span></span>&#123;<span class="keyword">return</span> x &gt; <span class="number">0</span> ? x : -x;&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">215</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, d, cnt = <span class="number">0</span>; </div><div class="line">LL sum[MAXN][MAXN], a[MAXN][MAXN], ans = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> r = <span class="number">0</span>, z = <span class="number">1</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line">    <span class="keyword">while</span>(ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch == <span class="string">'-'</span>) z = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">while</span>(ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>)&#123;r = r * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">return</span> r * z;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">    d = read(), n = read();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)&#123;</div><div class="line">        <span class="keyword">int</span> x = read(), y = read(), k = read();</div><div class="line">        a[x + <span class="number">1</span>][y + <span class="number">1</span>] = <span class="number">1l</span>l * k;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">129</span>; i ++)</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">129</span>; j ++)</div><div class="line">            sum[i][j] = sum[i - <span class="number">1</span>][j] + sum[i][j - <span class="number">1</span>] - sum[i - <span class="number">1</span>][j - <span class="number">1</span>] + a[i][j];</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">129</span>; i ++)</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">129</span>; j ++)&#123;</div><div class="line">            <span class="keyword">int</span> x1 = max(i - d, <span class="number">1</span>), y1 = max(j - d, <span class="number">1</span>);</div><div class="line">            <span class="keyword">int</span> x2 = min(i + d, <span class="number">129</span>), y2 = min(j + d, <span class="number">129</span>);</div><div class="line">            ans = Max(ans, sum[x2][y2] - sum[x1 - <span class="number">1</span>][y2] - sum[x2][y1 - <span class="number">1</span>] + sum[x1 - <span class="number">1</span>][y1 - <span class="number">1</span>]);</div><div class="line">        &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">129</span>; i ++)</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">129</span>; j ++)&#123;</div><div class="line">            <span class="keyword">int</span> x1 = max(i - d, <span class="number">1</span>), y1 = max(j - d, <span class="number">1</span>);</div><div class="line">            <span class="keyword">int</span> x2 = min(i + d, <span class="number">129</span>), y2 = min(j + d, <span class="number">129</span>);</div><div class="line">            <span class="keyword">if</span>(sum[x2][y2] - sum[x1 - <span class="number">1</span>][y2] - sum[x2][y1 - <span class="number">1</span>] + sum[x1 - <span class="number">1</span>][y1 - <span class="number">1</span>] == ans) cnt ++;</div><div class="line">        &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d %lld\n"</span>, cnt, ans);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    work();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="寻找道路"><a href="#寻找道路" class="headerlink" title="寻找道路"></a>寻找道路</h1><h2 id="题意：-4"><a href="#题意：-4" class="headerlink" title="题意："></a>题意：</h2><p>在有向图G 中，每条边的长度均为1 ，现给定起点和终点，请你在图中找一条从起点到终点的路径，该路径满足以下条件：</p><p>1 ．路径上的所有点的出边所指向的点都直接或间接与终点连通。</p><p>2 ．在满足条件1 的情况下使路径最短。</p><p>注意：图G 中可能存在重边和自环，题目保证终点没有出边。</p><p>请你输出符合条件的路径的长度。</p><h2 id="题解：-4"><a href="#题解：-4" class="headerlink" title="题解："></a>题解：</h2><p>这道题就是我们先建个反图，算出哪些点可以到t，然后再对于每个点i，如果它的每条出边所指的点都能到t，那么这个点是有效的（即可以在路径中），否则我们不再考虑当前点。</p><p>然后SPFA一下就好了（其实BFS也可以，因为边长都是1）</p><h2 id="代码：-4"><a href="#代码：-4" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i, a, b) for(int i = a; i &lt;= b; i ++)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REPG(i, x) for(int i = head[x]; i; i = g[i].nxt)</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(x, y) memset(x, y, sizeof(x));</span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> LF;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">Max</span><span class="params">(LL a, LL b)</span></span>&#123;<span class="keyword">return</span> a &gt; b ? a : b;&#125;</div><div class="line"><span class="function">LL <span class="title">Min</span><span class="params">(LL a, LL b)</span></span>&#123;<span class="keyword">return</span> a &lt; b ? a : b;&#125;</div><div class="line"><span class="function">LL <span class="title">abs</span><span class="params">(LL x)</span></span>&#123;<span class="keyword">return</span> x &gt; <span class="number">0</span> ? x : -x;&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e4</span> + <span class="number">15</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXM = <span class="number">2e5</span> + <span class="number">15</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span><span class="keyword">int</span> to, nxt;&#125;g[MAXM], e[MAXM];</div><div class="line"><span class="keyword">int</span> head[MAXN], head1[MAXN], dist[MAXN], cnt = <span class="number">0</span>, cnt1 = <span class="number">0</span>, n, m, s, t;</div><div class="line"><span class="keyword">bool</span> vis[MAXN], pd[MAXN], vv[MAXN]; <span class="built_in">queue</span> &lt;<span class="keyword">int</span>&gt; q;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span>&#123;g[++ cnt] = (Edge)&#123;v, head[u]&#125;; head[u] = cnt;&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add1</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span>&#123;e[++ cnt1] = (Edge)&#123;v, head1[u]&#125;; head1[u] = cnt1;&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> r = <span class="number">0</span>, z = <span class="number">1</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line">    <span class="keyword">while</span>(ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch == <span class="string">'-'</span>) z = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">while</span>(ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>)&#123;r = r * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">return</span> r * z;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> fafa)</span></span>&#123;</div><div class="line">    vis[u] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = head1[u]; i; i = e[i].nxt)&#123;</div><div class="line">        <span class="keyword">int</span> v = e[i].to; <span class="keyword">if</span>(v == fafa) <span class="keyword">continue</span>;</div><div class="line">        <span class="keyword">if</span>(!vis[v]) dfs(v, u);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) dist[i] = <span class="number">2e8</span>;</div><div class="line">    dist[s] = <span class="number">0</span>; q.push(s); vv[s] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span>(!q.empty())&#123;</div><div class="line">        <span class="keyword">int</span> u = q.front(); q.pop(); vv[u] = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; i; i = g[i].nxt)&#123;</div><div class="line">            <span class="keyword">int</span> v = g[i].to; <span class="keyword">if</span>(!pd[v]) <span class="keyword">continue</span>;</div><div class="line">            <span class="keyword">if</span>(dist[v] &gt; dist[u] + <span class="number">1</span>)&#123;</div><div class="line">                dist[v] = dist[u] + <span class="number">1</span>;</div><div class="line">                <span class="keyword">if</span>(!vv[v])&#123;q.push(v); vv[v] = <span class="number">1</span>;&#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(dist[t] == <span class="number">2e8</span>) <span class="built_in">printf</span>(<span class="string">"-1\n"</span>);</div><div class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, dist[t]);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">    n = read(), m = read();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i ++)&#123;</div><div class="line">        <span class="keyword">int</span> u = read(), v = read(); <span class="keyword">if</span>(u == v) <span class="keyword">continue</span>;</div><div class="line">        add(u, v); add1(v, u);</div><div class="line">    &#125; s = read(), t = read();</div><div class="line">    dfs(t, <span class="number">0</span>);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)&#123;</div><div class="line">        <span class="keyword">if</span>(vis[i]) pd[i] = <span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = head[i]; j; j = g[j].nxt) <span class="keyword">if</span>(!vis[g[j].to])&#123;pd[i] = <span class="number">0</span>; <span class="keyword">break</span>;&#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//for(int i = 1; i &lt;= n; i ++) printf("%d ", pd[i]); printf("\n");</span></div><div class="line">    bfs();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    work();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="解方程"><a href="#解方程" class="headerlink" title="解方程"></a>解方程</h1><h2 id="题意：-5"><a href="#题意：-5" class="headerlink" title="题意："></a>题意：</h2><p>已知多项式方程：</p><p>a0+a1x+a2x^2+..+anx^n=0</p><p>求这个方程在[1, m ] 内的整数解（n 和m 均为正整数）</p><h2 id="题解：-5"><a href="#题解：-5" class="headerlink" title="题解："></a>题解：</h2><p>这个就用秦九韶算法搞一搞就好了，复杂度O(n*m)。</p><p>至于秦九韶算法是什么，<a href="https://baike.baidu.com/item/%E7%A7%A6%E4%B9%9D%E9%9F%B6%E7%AE%97%E6%B3%95/449196?fr=aladdin" target="_blank" rel="external">百科一下就好了</a></p><p>然后有一个就叫坑的点，就是你会注意到ai很大，所以我们的<strong>快读中，必须MOD一个质数</strong></p><h2 id="代码：-5"><a href="#代码：-5" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i, a, b) for(LL i = a; i &lt;= b; i ++)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REPG(i, x) for(LL i = head[x]; i; i = g[i].nxt)</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(x, y) memset(x, y, sizeof(x));</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD 1000000007</span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> LF;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">Max</span><span class="params">(LL a, LL b)</span></span>&#123;<span class="keyword">return</span> a &gt; b ? a : b;&#125;</div><div class="line"><span class="function">LL <span class="title">Min</span><span class="params">(LL a, LL b)</span></span>&#123;<span class="keyword">return</span> a &lt; b ? a : b;&#125;</div><div class="line"><span class="function">LL <span class="title">abs</span><span class="params">(LL x)</span></span>&#123;<span class="keyword">return</span> x &gt; <span class="number">0</span> ? x : -x;&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e6</span> + <span class="number">15</span>;</div><div class="line"></div><div class="line">LL n, m, a[<span class="number">115</span>], ans[MAXN], cnt = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">    LL r = <span class="number">0</span>, z = <span class="number">1</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line">    <span class="keyword">while</span>(ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch == <span class="string">'-'</span>) z = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">while</span>(ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>)&#123;r = r * <span class="number">10</span> + ch - <span class="string">'0'</span>; r %= MOD; ch = getchar();&#125;</div><div class="line">    <span class="keyword">return</span> r * z;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">f</span><span class="params">(LL k)</span></span>&#123;</div><div class="line">    LL sum = <span class="number">0</span>, i;</div><div class="line">    <span class="keyword">for</span>(i = n + <span class="number">1</span>; i &gt;= <span class="number">1</span>; i --)&#123;</div><div class="line">        sum = sum * k + a[i];</div><div class="line">        sum = sum % MOD;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> sum;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span><span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    n = read(), m = read(); LL i;</div><div class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= n + <span class="number">1</span>; i ++) a[i] = read();</div><div class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= m; i ++)</div><div class="line">        <span class="keyword">if</span>(f(i) == <span class="number">0</span>) ans[++ cnt] = i;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, cnt);</div><div class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= cnt; i ++) <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans[i]);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 总结 </category>
          
          <category> 刷题总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图论 </tag>
            
            <tag> 数论 </tag>
            
            <tag> 模拟 </tag>
            
            <tag> 字符串 </tag>
            
            <tag> 最近公共祖先 </tag>
            
            <tag> 动态规划 </tag>
            
            <tag> 01背包 </tag>
            
            <tag> 完全背包 </tag>
            
            <tag> 枚举 </tag>
            
            <tag> 搜索 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>NOIP2011总结</title>
      <link href="/2018/02/19/NOIP2011%E6%80%BB%E7%BB%93/"/>
      <content type="html"><![CDATA[<h1 id="铺地毯"><a href="#铺地毯" class="headerlink" title="铺地毯"></a>铺地毯</h1><h2 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h2><p>为了准备一个独特的颁奖典礼，组织者在会场的一片矩形区域（可看做是平面直角坐标系的第一象限）铺上一些矩形地毯。一共有 n 张地毯，编号从 1 到n 。现在将这些地毯按照编号从小到大的顺序平行于坐标轴先后铺设，后铺的地毯覆盖在前面已经铺好的地毯之上。</p><p>地毯铺设完成后，组织者想知道覆盖地面某个点的最上面的那张地毯的编号。注意：在矩形地毯边界和四个顶点上的点也算被地毯覆盖。</p><h2 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h2><p>这个。。。我实在不知道怎么写，就是一个for循环if判断一下嘛</p><h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> n; </div><div class="line"><span class="keyword">int</span> a[<span class="number">10010</span>], b[<span class="number">10010</span>], g[<span class="number">10010</span>], k[<span class="number">100010</span>];</div><div class="line"><span class="keyword">int</span> x, y, ans = <span class="number">-1</span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d %d %d"</span>, &amp;a[i], &amp;b[i], &amp;g[i], &amp;k[i]);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;x, &amp;y);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)&#123;</div><div class="line">        <span class="keyword">if</span>(a[i] &lt;= x &amp;&amp; b[i] &lt;= y &amp;&amp; a[i] + g[i] &gt;= x &amp;&amp; b[i] + k[i] &gt;= y) ans = i;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="选择客栈"><a href="#选择客栈" class="headerlink" title="选择客栈"></a>选择客栈</h1><h2 id="题意：-1"><a href="#题意：-1" class="headerlink" title="题意："></a>题意：</h2><p>丽江河边有n 家很有特色的客栈，客栈按照其位置顺序从 1 到n 编号。每家客栈都按照某一种色调进行装饰（总共 k 种，用整数 0 ~ k-1 表示），且每家客栈都设有一家咖啡店，每家咖啡店均有各自的最低消费。</p><p>两位游客一起去丽江旅游，他们喜欢相同的色调，又想尝试两个不同的客栈，因此决定分别住在色调相同的两家客栈中。晚上，他们打算选择一家咖啡店喝咖啡，要求咖啡店位于两人住的两家客栈之间（包括他们住的客栈），且咖啡店的最低消费不超过 p 。</p><p>他们想知道总共有多少种选择住宿的方案，保证晚上可以找到一家最低消费不超过 p元的咖啡店小聚。</p><h2 id="题解：-1"><a href="#题解：-1" class="headerlink" title="题解："></a>题解：</h2><p>这个也不难。</p><p>f[i]表示在i或i之前的距当前位置最近的满足条件的咖啡厅的位置，g[i][j] 表示i之前有多少个跟颜色j一样的客栈。</p><p>然后我们就用O(n)的时间枚举第二个（后面一个）客栈的位置，然后算在它之前的可以有多少个和它搭配的（<strong>注意：</strong>如果两个客栈一样的话要ans—）</p><h2 id="代码：-1"><a href="#代码：-1" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i, a, b) for(int i = a; i &lt;= b; i ++)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REPG(i, x) for(int i = head[x]; i; i = g[i].nxt)</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(x, y) memset(x, y, sizeof(x));</span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> LF;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">Max</span><span class="params">(LL a, LL b)</span></span>&#123;<span class="keyword">return</span> a &gt; b ? a : b;&#125;</div><div class="line"><span class="function">LL <span class="title">Min</span><span class="params">(LL a, LL b)</span></span>&#123;<span class="keyword">return</span> a &lt; b ? a : b;&#125;</div><div class="line"><span class="function">LL <span class="title">abs</span><span class="params">(LL x)</span></span>&#123;<span class="keyword">return</span> x &gt; <span class="number">0</span> ? x : -x;&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">2e5</span> + <span class="number">15</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> f[MAXN], g[MAXN][<span class="number">55</span>], c[MAXN];<span class="comment">//f[i]表示在i或i之前的距当前位置最近的满足条件的咖啡厅的位置，g[i][j] 表示i之前有多少个跟颜色j一样的客栈 </span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> r = <span class="number">0</span>, z = <span class="number">1</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line">    <span class="keyword">while</span>(ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch == <span class="string">'-'</span>) z = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">while</span>(ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>)&#123;r = r * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">return</span> r * z;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> n = read(), k = read(), p = read(), now = <span class="number">0</span>, ans = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)&#123;</div><div class="line">        <span class="keyword">int</span> col = read() + <span class="number">1</span>, low = read();</div><div class="line">        <span class="keyword">if</span>(low &lt;= p) now = i;</div><div class="line">        f[i] = now;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= k; j ++) g[i][j] = g[i - <span class="number">1</span>][j]; </div><div class="line">        g[i][col] = g[i - <span class="number">1</span>][col] + <span class="number">1</span>; c[i] = col;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)&#123;</div><div class="line">        <span class="keyword">if</span>(!f[i]) <span class="keyword">continue</span>;</div><div class="line">        <span class="keyword">int</span> col = c[i], last = f[i];</div><div class="line">        ans += g[last][col];</div><div class="line">        <span class="keyword">if</span>(last == i) ans --;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    work();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="Mayan游戏"><a href="#Mayan游戏" class="headerlink" title="Mayan游戏"></a>Mayan游戏</h1><h2 id="题意：-2"><a href="#题意：-2" class="headerlink" title="题意："></a>题意：</h2><p><a href="https://www.luogu.org/problemnew/show/P1312" target="_blank" rel="external">传送门</a></p><p>Mayan puzzle是最近流行起来的一个游戏。游戏界面是一个 7 行5 列的棋盘，上面堆放着一些方块，方块不能悬空堆放，即方块必须放在最下面一行，或者放在其他方块之上。游戏通关是指在规定的步数内消除所有的方块，消除方块的规则如下：</p><p>1 、每步移动可以且仅可以沿横向（即向左或向右）拖动某一方块一格：当拖动这一方块时，如果拖动后到达的位置（以下称目标位置）也有方块，那么这两个方块将交换位置（参见输入输出样例说明中的图6 到图7 ）；如果目标位置上没有方块，那么被拖动的方块将从原来的竖列中抽出，并从目标位置上掉落（直到不悬空，参见下面图1 和图2）；</p><p>2 、任一时刻，如果在一横行或者竖列上有连续三个或者三个以上相同颜色的方块，则它们将立即被消除（参见图1 到图3）。</p><p>注意：</p><p>a) 如果同时有多组方块满足消除条件，几组方块会同时被消除（例如下面图4 ，三个颜色为1 的方块和三个颜色为 2 的方块会同时被消除，最后剩下一个颜色为 2 的方块）。</p><p>b) 当出现行和列都满足消除条件且行列共享某个方块时，行和列上满足消除条件的所有方块会被同时消除（例如下面图5 所示的情形，5 个方块会同时被消除）。</p><p>3 、方块消除之后，消除位置之上的方块将掉落，掉落后可能会引起新的方块消除。注意：掉落的过程中将不会有方块的消除。</p><p>上面图1 到图 3 给出了在棋盘上移动一块方块之后棋盘的变化。棋盘的左下角方块的坐标为（0, 0 ），将位于（3, 3 ）的方块向左移动之后，游戏界面从图 1 变成图 2 所示的状态，此时在一竖列上有连续三块颜色为4 的方块，满足消除条件，消除连续3 块颜色为4 的方块后，上方的颜色为3 的方块掉落，形成图 3 所示的局面。</p><h2 id="题解：-2"><a href="#题解：-2" class="headerlink" title="题解："></a>题解：</h2><p>（题解来自EAJOY）</p><ol><li>向右的时候如果右方颜色相同则跳过</li><li>向左的时候如果左方并非是空，则跳过（否则可以选择其左侧方块右移，这样字典序更小）</li><li>需要更短时间的话可以根据每一步当前图的状态是否出现某种颜色小于2个来进行剪枝。因为你刷新图的时候其实就可以顺手统计，所以其实并不怎么费时，但是剪枝效果满满（当然我觉得不剪也可以就没写这个）</li></ol><p>至于实现细节的话，掉落可以看fall的代码，刷新的时候先掉落一下，再给要消除的东西打标记。最后根据标记删除方块，步骤爆搜即可。</p><h2 id="代码：-2"><a href="#代码：-2" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i, a, b) for(int i = a; i &lt;= b; i ++)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REPG(i, x) for(int i = head[x]; i; i = g[i].nxt)</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(x, y) memset(x, y, sizeof(x));</span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> LF;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">Max</span><span class="params">(LL a, LL b)</span></span>&#123;<span class="keyword">return</span> a &gt; b ? a : b;&#125;</div><div class="line"><span class="function">LL <span class="title">Min</span><span class="params">(LL a, LL b)</span></span>&#123;<span class="keyword">return</span> a &lt; b ? a : b;&#125;</div><div class="line"><span class="function">LL <span class="title">abs</span><span class="params">(LL x)</span></span>&#123;<span class="keyword">return</span> x &gt; <span class="number">0</span> ? x : -x;&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> ansx[<span class="number">15</span>], ansy[<span class="number">15</span>], ansmv[<span class="number">15</span>], mp[<span class="number">15</span>][<span class="number">15</span>][<span class="number">15</span>], n;</div><div class="line"><span class="keyword">bool</span> vis[<span class="number">15</span>][<span class="number">15</span>]; </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">int</span> r = <span class="number">0</span>, z = <span class="number">1</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line"><span class="keyword">while</span>(ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch == <span class="string">'-'</span>) z = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">while</span>(ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>)&#123;r = r * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">return</span> r * z;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> d, <span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> mv)</span></span>&#123;ansx[d] = x, ansy[d] = y, ansmv[d] = mv;&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">fall</span><span class="params">(<span class="keyword">int</span> d)</span></span>&#123;<span class="comment">//下落</span></div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i ++)&#123;</div><div class="line"><span class="keyword">int</span> sz = <span class="number">0</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">7</span>; j ++) <span class="keyword">if</span>(mp[d][i][j]) mp[d][i][sz ++] = mp[d][i][j];</div><div class="line"><span class="keyword">while</span>(sz &lt; <span class="number">7</span>) mp[d][i][sz ++] = <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> d)</span></span>&#123;<span class="comment">//消除</span></div><div class="line"><span class="keyword">int</span> tim = <span class="number">0</span>; <span class="keyword">bool</span> tt = <span class="number">1</span>;</div><div class="line"><span class="keyword">while</span>(tt)&#123;</div><div class="line">tt = <span class="number">0</span>; fall(d);</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i ++)</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">7</span>; j ++) <span class="keyword">if</span>(mp[d][i][j])&#123;</div><div class="line"><span class="keyword">if</span>(i &lt; <span class="number">3</span>)&#123;</div><div class="line"><span class="keyword">if</span>(mp[d][i][j] == mp[d][i + <span class="number">1</span>][j] &amp;&amp; mp[d][i][j] == mp[d][i + <span class="number">2</span>][j])</div><div class="line">tt = vis[i][j] = vis[i + <span class="number">1</span>][j] = vis[i + <span class="number">2</span>][j] = <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>(i &lt; <span class="number">5</span>)&#123;</div><div class="line"><span class="keyword">if</span>(mp[d][i][j] == mp[d][i][j + <span class="number">1</span>] &amp;&amp; mp[d][i][j] == mp[d][i][j + <span class="number">2</span>])</div><div class="line">tt = vis[i][j] = vis[i][j + <span class="number">1</span>] = vis[i][j + <span class="number">2</span>] = <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i ++)</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">7</span>; j ++) <span class="keyword">if</span>(vis[i][j])</div><div class="line">mp[d][i][j] = vis[i][j] = <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> now)</span></span>&#123;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i ++)</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">7</span>; j ++) mp[now][i][j] = mp[now - <span class="number">1</span>][i][j];</div><div class="line">find(now);</div><div class="line"><span class="keyword">if</span>(now == n + <span class="number">1</span>)&#123;<span class="comment">//判断是否找到答案</span></div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i ++) <span class="keyword">if</span>(mp[now][i][<span class="number">0</span>]) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"><span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i ++)</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">7</span>; j ++) <span class="keyword">if</span>(mp[now][i][j])&#123;</div><div class="line"><span class="keyword">if</span>(i &lt; <span class="number">4</span> &amp;&amp; mp[now][i][j] != mp[now][i + <span class="number">1</span>][j])&#123;<span class="comment">//右侧不一样则交换</span></div><div class="line">modify(now, i, j, <span class="number">1</span>);<span class="comment">//记录答案</span></div><div class="line">swap(mp[now][i][j], mp[now][i + <span class="number">1</span>][j]);</div><div class="line"><span class="keyword">if</span>(solve(now + <span class="number">1</span>)) <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">swap(mp[now][i][j], mp[now][i + <span class="number">1</span>][j]);</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>(i &amp;&amp; !mp[now][i - <span class="number">1</span>][j])&#123;<span class="comment">//左侧没有则交换</span></div><div class="line">modify(now, i, j, <span class="number">-1</span>);</div><div class="line">swap(mp[now][i][j], mp[now][i - <span class="number">1</span>][j]);</div><div class="line"><span class="keyword">if</span>(solve(now + <span class="number">1</span>)) <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">swap(mp[now][i][j], mp[now][i - <span class="number">1</span>][j]);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">n = read();</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i ++)</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">8</span>; j ++)&#123;</div><div class="line"><span class="keyword">int</span> x = read();</div><div class="line"><span class="keyword">if</span>(!x) <span class="keyword">break</span>; mp[<span class="number">0</span>][i][j] = x;</div><div class="line">&#125;</div><div class="line"><span class="keyword">bool</span> flag = solve(<span class="number">1</span>);</div><div class="line"><span class="keyword">if</span>(!flag)&#123;<span class="built_in">printf</span>(<span class="string">"-1\n"</span>); <span class="keyword">return</span> ;&#125;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) <span class="built_in">printf</span>(<span class="string">"%d %d %d\n"</span>, ansx[i], ansy[i], ansmv[i]);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">work();</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="计算系数"><a href="#计算系数" class="headerlink" title="计算系数"></a>计算系数</h1><h2 id="题意：-3"><a href="#题意：-3" class="headerlink" title="题意："></a>题意：</h2><p>给定一个多项式(by+ax)^k，请求出多项式展开后x^n*y^m 项的系数。</p><h2 id="题解：-3"><a href="#题解：-3" class="headerlink" title="题解："></a>题解：</h2><p>快速幂+二项式定理。</p><h2 id="代码：-3"><a href="#代码：-3" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> LF;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(x, y) memset(x, y, sizeof(x))</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> lson o &lt;&lt; 1</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rson o &lt;&lt; 1 | 1</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD 10007</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1015</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> c[MAXN][MAXN];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> base = a, ret = <span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span>(b)&#123;</div><div class="line">        <span class="keyword">if</span>(b &amp; <span class="number">1</span>) (ret *= base) %= MOD;</div><div class="line">        (base *= base) %= MOD;</div><div class="line">        b &gt;&gt;= <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> r = <span class="number">0</span>, z = <span class="number">1</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line">    <span class="keyword">while</span>(ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch == <span class="string">'-'</span>) z = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">while</span>(ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>)&#123;r = r * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">return</span> r * z;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> a = read() % MOD, b = read() % MOD, k = read(), n = read(), m = read();</div><div class="line">    c[<span class="number">1</span>][<span class="number">0</span>] = c[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= k; i ++)&#123;</div><div class="line">        c[i][<span class="number">0</span>] = c[i][i] = <span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; i; j ++)&#123;</div><div class="line">            c[i][j] = (c[i - <span class="number">1</span>][j] + c[i - <span class="number">1</span>][j - <span class="number">1</span>]) % MOD;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, qpow(a, n) * qpow(b, m) % MOD * c[k][m] % MOD);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    work();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="聪明的质检员"><a href="#聪明的质检员" class="headerlink" title="聪明的质检员"></a>聪明的质检员</h1><h2 id="题意：-4"><a href="#题意：-4" class="headerlink" title="题意："></a>题意：</h2><p><a href="https://www.luogu.org/problemnew/show/P1314#sub" target="_blank" rel="external">传送门</a></p><p>小T 是一名质量监督员，最近负责检验一批矿产的质量。这批矿产共有 n 个矿石，从 1到n 逐一编号，每个矿石都有自己的重量 wi 以及价值vi 。检验矿产的流程是：</p><p>1 、给定m 个区间[Li,Ri]；</p><p>2 、选出一个参数 W；</p><p>3 、对于一个区间[Li,Ri]，计算矿石在这个区间上的检验值Yi：</p><p>这批矿产的检验结果Y 为各个区间的检验值之和。即：Y1+Y2…+Ym</p><p>若这批矿产的检验结果与所给标准值S 相差太多，就需要再去检验另一批矿产。小T</p><p>不想费时间去检验另一批矿产，所以他想通过调整参数W 的值，让检验结果尽可能的靠近</p><p>标准值S，即使得S-Y 的绝对值最小。请你帮忙求出这个最小值。</p><h2 id="题解：-4"><a href="#题解：-4" class="headerlink" title="题解："></a>题解：</h2><p>（感觉这一年的题1h就能400+啊。。。）</p><p>这个T2也比较水。</p><p>首先我们很容易看出这是一个二分答案的“套路题”（虽说它还不够套路，但是还是挺容易看出来的），然后我们枚举W，每次通过前缀和的方式算出合法的v之和以及合法的数量。然后我们将此时的W参数对应的Y值通过前缀和计算出来，然后更新ans，如果Y值&gt;S，那么l=mid+1（提高W参数，这样符合要求的减少），否则r=mid</p><h2 id="代码：-4"><a href="#代码：-4" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i, a, b) for(LL i = a; i &lt;= b; i ++)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REPG(i, x) for(LL i = head[x]; i; i = g[i].nxt)</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(x, y) memset(x, y, sizeof(x));</span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> LF;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">Max</span><span class="params">(LL a, LL b)</span></span>&#123;<span class="keyword">return</span> a &gt; b ? a : b;&#125;</div><div class="line"><span class="function">LL <span class="title">Min</span><span class="params">(LL a, LL b)</span></span>&#123;<span class="keyword">return</span> a &lt; b ? a : b;&#125;</div><div class="line"><span class="function">LL <span class="title">Abs</span><span class="params">(LL x)</span></span>&#123;<span class="keyword">return</span> x &gt; <span class="number">0</span> ? x : -x;&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> LL MAXN = <span class="number">2e5</span> + <span class="number">15</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span>LL x, y;&#125;q[MAXN];</div><div class="line">LL n, m, s, w[MAXN], v[MAXN], f[MAXN], h[MAXN], maxn = <span class="number">-1</span>, minn = <span class="number">1e10</span>, ans = <span class="number">1e13</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">LL r = <span class="number">0</span>, z = <span class="number">1</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line"><span class="keyword">while</span>(ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch == <span class="string">'-'</span>) z = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">while</span>(ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>)&#123;r = r * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">return</span> r * z;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">n = read(), m = read(), s = read();</div><div class="line"><span class="keyword">for</span>(LL i = <span class="number">1</span>; i &lt;= n; i ++) w[i] = read(), v[i] = read(), maxn = max(maxn, w[i]), minn = min(minn, w[i]);</div><div class="line"><span class="keyword">for</span>(LL i = <span class="number">1</span>; i &lt;= m; i ++) q[i].x = read(), q[i].y = read();</div><div class="line">LL l = minn - <span class="number">1</span>, r = maxn + <span class="number">1</span>;</div><div class="line"><span class="keyword">while</span>(l &lt; r)&#123;</div><div class="line">LL mid = l + r &gt;&gt; <span class="number">1</span>; clr(f, <span class="number">0</span>); clr(h, <span class="number">0</span>);</div><div class="line"><span class="keyword">for</span>(LL i = <span class="number">1</span>; i &lt;= n; i ++)&#123;</div><div class="line"><span class="keyword">if</span>(w[i] &gt;= mid) f[i] = f[i - <span class="number">1</span>] + <span class="number">1</span>, h[i] = h[i - <span class="number">1</span>] + v[i];</div><div class="line"><span class="keyword">else</span> f[i] = f[i - <span class="number">1</span>], h[i] = h[i - <span class="number">1</span>];</div><div class="line">&#125;</div><div class="line">LL sum = <span class="number">0</span>;</div><div class="line"><span class="keyword">for</span>(LL i = <span class="number">1</span>; i &lt;= m; i ++) sum += (f[q[i].y] - f[q[i].x - <span class="number">1</span>]) * (h[q[i].y] - h[q[i].x - <span class="number">1</span>]);</div><div class="line"><span class="keyword">if</span>(Abs(sum - s) &lt; ans) ans = Abs(sum - s); <span class="keyword">if</span>(!ans) <span class="keyword">break</span>;</div><div class="line"><span class="keyword">if</span>(sum &gt; s) l = mid + <span class="number">1</span>;</div><div class="line"><span class="keyword">else</span> r = mid;</div><div class="line">&#125;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">work();</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="观光公交"><a href="#观光公交" class="headerlink" title="观光公交"></a>观光公交</h1><h2 id="题意：-5"><a href="#题意：-5" class="headerlink" title="题意："></a>题意：</h2><p>风景迷人的小城Y 市，拥有n 个美丽的景点。由于慕名而来的游客越来越多，Y 市特意安排了一辆观光公交车，为游客提供更便捷的交通服务。观光公交车在第 0 分钟出现在 1号景点，随后依次前往 2、3 、4 ……n 号景点。从第 i 号景点开到第 i+1 号景点需要 Di 分钟。任意时刻，公交车只能往前开，或在景点处等待。</p><p>设共有m 个游客，每位游客需要乘车1 次从一个景点到达另一个景点，第i 位游客在Ti 分钟来到景点 Ai ，希望乘车前往景点Bi （Ai&lt;Bi ）。为了使所有乘客都能顺利到达目的地，公交车在每站都必须等待需要从该景点出发的所有乘客都上车后才能出发开往下一景点。</p><p>假设乘客上下车不需要时间。</p><p>一个乘客的旅行时间，等于他到达目的地的时刻减去他来到出发地的时刻。因为只有一辆观光车，有时候还要停下来等其他乘客，乘客们纷纷抱怨旅行时间太长了。于是聪明的司机ZZ给公交车安装了 k 个氮气加速器，每使用一个加速器，可以使其中一个 Di 减1 。对于同一个Di 可以重复使用加速器，但是必须保证使用后Di 大于等于0 。</p><p>那么ZZ该如何安排使用加速器，才能使所有乘客的旅行时间总和最小？</p><h2 id="题解：-5"><a href="#题解：-5" class="headerlink" title="题解："></a>题解：</h2><p>（题解来自<a href="https://www.luogu.org/space/show?uid=49431" target="_blank" rel="external">xun薰</a>）</p><p>思路：贪心….</p><p>边加速边计算答案很麻烦 所以我们把不用加速器的答案算出来 再减去加速的时间。</p><p>关键就是在哪里用加速器…我们要让一个加速器尽可能多的贡献出它的价值，就要让他造福更多的人。如果这条边上经过的人很多的话，使用加速器会更划算。</p><p>car[i]=max(car[i-1],t[i-1])+d[i]. car[i]为汽车到达i点的时间,t[i]为在第i站上车最后一个人的时间。答案呢就是 ans=sigema(car[ed[i]]-tim[i]) ，发现tim[i]是不变的，即每个人的上车时间。我们让每个人的下车时间尽可能的早就可以了。</p><p>加入我们在i—i+1的这条边使用了加速器，那么经过i—i+1的人下车时间都可以-1，如果车行驶到i+1,发现在i+1上车的最后一个人还没有来，那么在i—i+1上这条边使用加速器只能作用到i+1,也就是说i+1往后的人他们该什么时候下车就什么时候下车。反之，如果在i+1上车的最后一个人，在车还没来之前就等着了，那么在i+1上车的人像做了顺风车一样时间也都减少1，我们要这样一条边，让他造福的人最多，效力持续最大！注意每次加速之后更新car[]。</p><h2 id="代码：-5"><a href="#代码：-5" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i, a, b) for(int i = a; i &lt;= b; i ++)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REPG(i, x) for(int i = head[x]; i; i = g[i].nxt)</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(x, y) memset(x, y, sizeof(x));</span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> LF;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">Max</span><span class="params">(LL a, LL b)</span></span>&#123;<span class="keyword">return</span> a &gt; b ? a : b;&#125;</div><div class="line"><span class="function">LL <span class="title">Min</span><span class="params">(LL a, LL b)</span></span>&#123;<span class="keyword">return</span> a &lt; b ? a : b;&#125;</div><div class="line"><span class="function">LL <span class="title">abs</span><span class="params">(LL x)</span></span>&#123;<span class="keyword">return</span> x &gt; <span class="number">0</span> ? x : -x;&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e4</span> + <span class="number">15</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m, k, ans = <span class="number">0</span>, d[MAXN], t[MAXN], a[MAXN], b[MAXN], car[MAXN], last[MAXN], sum[MAXN], g[MAXN];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">int</span> r = <span class="number">0</span>, z = <span class="number">1</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line"><span class="keyword">while</span>(ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch == <span class="string">'-'</span>) z = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">while</span>(ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>)&#123;r = r * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">return</span> r * z;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">n = read(), m = read(), k = read();</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i ++) d[i] = read();</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i ++)&#123;</div><div class="line">t[i] = read(), a[i] = read(), b[i] = read();</div><div class="line">last[a[i]] = max(last[a[i]], t[i]);</div><div class="line">sum[b[i]] ++;</div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) sum[i] += sum[i - <span class="number">1</span>];</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i ++) car[i] = max(car[i - <span class="number">1</span>], last[i - <span class="number">1</span>]) + d[i - <span class="number">1</span>];</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i ++) ans += (car[b[i]] - t[i]);</div><div class="line"><span class="keyword">while</span>(k --)&#123;</div><div class="line">g[n] = g[n - <span class="number">1</span>] = n; <span class="keyword">int</span> maxn = <span class="number">0</span>, now;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = n - <span class="number">2</span>; i; i --) g[i] = car[i + <span class="number">1</span>] &lt;= last[i + <span class="number">1</span>] ? i + <span class="number">1</span> : g[i + <span class="number">1</span>];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i ++)</div><div class="line">        <span class="keyword">if</span>(sum[g[i]] - sum[i] &gt; maxn &amp;&amp; d[i]) maxn = sum[g[i]] - sum[i], now = i;</div><div class="line">        ans -= maxn; d[now] --;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i ++) car[i] = max(car[i - <span class="number">1</span>], last[i - <span class="number">1</span>]) + d[i - <span class="number">1</span>];</div><div class="line">&#125;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">work();</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 总结 </category>
          
          <category> 刷题总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
            <tag> 模拟 </tag>
            
            <tag> 贪心 </tag>
            
            <tag> 二分答案 </tag>
            
            <tag> 倍增 </tag>
            
            <tag> 排序 </tag>
            
            <tag> 高精度 </tag>
            
            <tag> 进制 </tag>
            
            <tag> 扩展欧几里得 </tag>
            
            <tag> 前缀和 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>近期总结</title>
      <link href="/2018/02/13/%E8%BF%91%E6%9C%9F%E6%80%BB%E7%BB%93/"/>
      <content type="html"><![CDATA[<p>最近学了不少，也做了不少题，趁着假期，总结一下</p><p>首先，最近我觉得我的心态上的调整还是不错的，总之，比上学期，尤其NOIP那段好太多了。而且也确实比上学期更加努力了（感觉上学期有点松懈啊）。然后最近大概省选方面的大块的算法已经学的差不多了，接下来应该就是狂刷题、狂总结归纳的一个状态了，提高自己想题的速度以及拓宽解题思路。总之，一切进行的都还不错。</p><p>至于优点与优势，我好像并没有什么，实力还需加强，心态比较糟糕，留给我的时间也不多了。但是我觉得既然自己非常想搞好它，我就一定要努力（感觉出了决心也不剩些什么了），我觉得对于吃苦我已经做好了思想准备。</p><p>缺点和不足可能确实不少，解题能力还不够强（欠刷题，这个提升起来也不容易，先多做点题吧，尤其是刚学会没怎么做过题的算法），心态真的是每次考试都崩。然后学术方面的知识我应该还要补一补、学一学，比如数学之类的东西。</p><p>平时的交流圈，我感觉我好像跟别人交流的并不是很多，这点确实不是很好，尤其是我没有怎么和高手交流。对于现阶段，我可能跟cjr、lzy、hyh、cfz交流的多一点，以及一些学长（QQ）还有群之类的。接下来（下学期）开始我应该尽量的多跟高手讨论，请教一些问题，这样一定是有助于提升成绩以及拓宽眼界的。</p><p>接下来的日子还是努力冲刺吧，不能懈怠。最近学了不少，也做了不少题，趁着假期，总结一下</p><p>首先，最近我觉得我的心态上的调整还是不错的，总之，比上学期，尤其NOIP那段好太多了。而且也确实比上学期更加努力了（感觉上学期有点松懈啊）。然后最近大概省选方面的大块的算法已经学的差不多了，接下来应该就是狂刷题、狂总结归纳的一个状态了，提高自己想题的速度以及拓宽解题思路。总之，一切进行的都还不错。</p><p>至于优点与优势，我好像并没有什么，实力还需加强，心态比较糟糕，留给我的时间也不多了。但是我觉得既然自己非常想搞好它，我就一定要努力（感觉出了决心也不剩些什么了），我觉得对于吃苦我已经做好了思想准备。</p><p>缺点和不足可能确实不少，解题能力还不够强（欠刷题，这个提升起来也不容易，先多做点题吧，尤其是刚学会没怎么做过题的算法），心态真的是每次考试都崩。然后学术方面的知识我应该还要补一补、学一学，比如数学之类的东西。</p><p>平时的交流圈，我感觉我好像跟别人交流的并不是很多，这点确实不是很好，尤其是我没有怎么和高手交流。对于现阶段，我可能跟cjr、lzy、hyh、cfz交流的多一点，以及一些学长（QQ）还有群之类的。接下来（下学期）开始我应该尽量的多跟高手讨论，请教一些问题，这样一定是有助于提升成绩以及拓宽眼界的。</p><p>接下来的日子还是努力冲刺吧，不能懈怠。</p>]]></content>
      
      <categories>
          
          <category> 总结 </category>
          
          <category> 心得与体会 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>bzoj1677 Sumsets 题解</title>
      <link href="/2018/02/13/bzoj1677-Sumsets-%E9%A2%98%E8%A7%A3/"/>
      <content type="html"><![CDATA[<h1 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h1><p>给出一个N(1≤N≤10^6)，使用一些2的若干次幂的数相加来求之．问有多少种方法</p><h1 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h1><p>与完全背包类似，dp一下即可。</p><h1 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> LF;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(x, y) memset(x, y, sizeof(x))</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> lson o &lt;&lt; 1</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rson o &lt;&lt; 1 | 1</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e6</span> + <span class="number">15</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">1e9</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> f[MAXN], n, w[<span class="number">25</span>] = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">16</span>, <span class="number">32</span>, <span class="number">64</span>, <span class="number">128</span>, <span class="number">256</span>, <span class="number">512</span>, <span class="number">1024</span>, <span class="number">2048</span>, <span class="number">4096</span>, <span class="number">8192</span>, <span class="number">16384</span>, <span class="number">32768</span>, <span class="number">65536</span>, <span class="number">131072</span>, <span class="number">262144</span>, <span class="number">524288</span>&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">int</span> r = <span class="number">0</span>, z = <span class="number">1</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line"><span class="keyword">while</span>(ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch == <span class="string">'-'</span>) z = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">while</span>(ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>)&#123;r = r * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">return</span> r * z;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">n = read(); f[<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">20</span>; i ++)</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = w[i]; j &lt;= n; j ++)&#123;</div><div class="line">(f[j] += f[j - w[i]]) %= MOD;</div><div class="line">&#125;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, f[n]);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">work();</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 知识点 </category>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
            <tag> 完全背包 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>bzoj3390 Bad Cowtractors 题解</title>
      <link href="/2018/02/13/bzoj3390-Bad-Cowtractors-%E9%A2%98%E8%A7%A3/"/>
      <content type="html"><![CDATA[<h1 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h1><p>奶牛贝茜被雇去建设N(2≤N≤1000)个牛棚间的互联网．她已经勘探出M(1≤M≤20000)条可建的线路，每条线路连接两个牛棚，而且会苞费C(1≤C≤100000)．农夫约翰吝啬得很，他希望建设费用最少甚至他都不想给贝茜工钱． 贝茜得知工钱要告吹，决定报复．她打算选择建一些线路，把所有牛棚连接在一起，让约翰花费最大．但是她不能造出环来，这样约翰就会发现．</p><h1 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h1><p>裸的最大生成树。</p><h1 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> LF;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(x, y) memset(x, y, sizeof(x))</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> lson o &lt;&lt; 1</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rson o &lt;&lt; 1 | 1</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e3</span> + <span class="number">15</span>, MAXM = <span class="number">2e4</span> + <span class="number">15</span>;  </div><div class="line"><span class="keyword">int</span> n, m, fa[MAXN];</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span><span class="keyword">int</span> u, v, w;&#125;g[MAXM];  </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">return</span> fa[x] == x ? x : fa[x] = find(fa[x]);&#125;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(Edge x, Edge y)</span></span>&#123;<span class="keyword">return</span> x.w &gt; y.w;&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">int</span> r = <span class="number">0</span>, z = <span class="number">1</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line"><span class="keyword">while</span>(ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch == <span class="string">'-'</span>) z = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">while</span>(ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>)&#123;r = r * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">return</span> r * z;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">n = read(); m = read();  </div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i ++)&#123;  </div><div class="line">        <span class="keyword">int</span> u = read(), v = read(), w = read();  </div><div class="line">        g[i] = (Edge)&#123;u, v, w&#125;;  </div><div class="line">    &#125;</div><div class="line">    sort(g + <span class="number">1</span>, g + <span class="number">1</span> + m, cmp);  </div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) fa[i] = i;  </div><div class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>; LL ans = <span class="number">0</span>;  </div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; cnt != n - <span class="number">1</span> &amp;&amp; i &lt;= m; i ++)&#123;  </div><div class="line">        <span class="keyword">int</span> u = find(g[i].u), v = find(g[i].v);  </div><div class="line">        <span class="keyword">if</span>(u != v)&#123;  </div><div class="line">            cnt ++;  </div><div class="line">            fa[u] = v;  </div><div class="line">            ans += g[i].w;  </div><div class="line">        &#125;</div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="keyword">if</span>(cnt != n - <span class="number">1</span>) ans = <span class="number">-1</span>;  </div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);  </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">work();</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 知识点 </category>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 最大生成树 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>bzoj3392 Part Acquisition 题解</title>
      <link href="/2018/02/13/bzoj3392-Part-Acquisition-%E9%A2%98%E8%A7%A3/"/>
      <content type="html"><![CDATA[<h1 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h1><p>奶牛们接到了寻找一种新型挤奶机的任务，为此它们准备依次经过N(1≤N≤50000)颗行星，在行星上进行交易．为了方便，奶牛们已经给可能出现的K(1≤K≤1000)种货物进行了由1到K的标号．由于这些行星都不是十分发达．没有流通的货币，所以在每个市场里都只能用固定的一种货物去换取另一种货物．    奶牛们带着一种上好的饲料从地球出发，希望进行最少的交易，最终得到所需要的机器．饲料的标号为1，所需要的机器的标号为K.如果任务无法完成，输出-1.</p><h1 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h1><p>裸的最短路</p><h1 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> LF;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(x, y) memset(x, y, sizeof(x))</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> lson o &lt;&lt; 1</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rson o &lt;&lt; 1 | 1</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e5</span> + <span class="number">15</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span><span class="keyword">int</span> to, nxt;&#125;g[MAXN &lt;&lt; <span class="number">1</span>];</div><div class="line"><span class="keyword">int</span> head[MAXN], cnt = <span class="number">0</span>, dist[MAXN], n, k;</div><div class="line"><span class="keyword">bool</span> vis[MAXN]; <span class="built_in">queue</span> &lt;<span class="keyword">int</span>&gt; q;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span>&#123;g[++ cnt] = (Edge)&#123;v, head[u]&#125;; head[u] = cnt;&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">int</span> r = <span class="number">0</span>, z = <span class="number">1</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line"><span class="keyword">while</span>(ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch == <span class="string">'-'</span>) z = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">while</span>(ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>)&#123;r = r * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">return</span> r * z;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">n = read(), k = read();</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)&#123;</div><div class="line"><span class="keyword">int</span> u = read(), v = read();</div><div class="line">add(u, v);</div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; i ++) dist[i] = INF;</div><div class="line">dist[<span class="number">1</span>] = <span class="number">0</span>; vis[<span class="number">1</span>] = <span class="number">1</span>; q.push(<span class="number">1</span>);</div><div class="line"><span class="keyword">while</span>(!q.empty())&#123;</div><div class="line"><span class="keyword">int</span> u = q.front(); q.pop(); vis[u] = <span class="number">0</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; i; i = g[i].nxt)&#123;</div><div class="line"><span class="keyword">int</span> v = g[i].to;</div><div class="line"><span class="keyword">if</span>(dist[v] &gt; dist[u] + <span class="number">1</span>)&#123;</div><div class="line">dist[v] = dist[u] + <span class="number">1</span>;</div><div class="line"><span class="keyword">if</span>(!vis[v])&#123;vis[v] = <span class="number">1</span>; q.push(v);&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>(dist[k] &gt; <span class="number">1e8</span>) <span class="built_in">printf</span>(<span class="string">"-1\n"</span>);</div><div class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, dist[k] + <span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">work();</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 知识点 </category>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 最短路 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>bzoj1685 Allowance 题解</title>
      <link href="/2018/02/13/bzoj1685-Allowance-%E9%A2%98%E8%A7%A3/"/>
      <content type="html"><![CDATA[<h1 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h1><p>作为对勤勤恳恳工作的贝茜的奖励，约翰已经决定开始支付贝茜一个小的每周津贴．  约翰有n(1≤N≤20)种币值的硬币，面值小的硬币总能整除面值较大的硬币．比如说，币值有如下几种：1美分，5美分，10美分，50美分.</p><p>利用给定的这些硬币，他将要每周至少付给贝茜一定金额的津贴C(1≤C≤10^8)．</p><p>请帮他计算出他最多能给贝茜发几周的津贴．</p><h1 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h1><p>考虑贪心，因为每种金币的面值都是成倍增长的，所以，我们对于面值&gt;=c的，直接给贝茜，&lt;c的呢，我们从小到大排序，从大到小渐渐补齐c，如果能补成==c，那么直接给她，如果不能补得那么整，我们就拿最小面值的给她补上。</p><h1 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> LF;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(x, y) memset(x, y, sizeof(x))</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> lson o &lt;&lt; 1</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rson o &lt;&lt; 1 | 1</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">115</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span><span class="keyword">int</span> v, b;&#125;a[MAXN];</div><div class="line"><span class="keyword">int</span> n, c, l, r, ans = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(Node x, Node y)</span></span>&#123;<span class="keyword">return</span> x.v &lt; y.v;&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">int</span> r = <span class="number">0</span>, z = <span class="number">1</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line"><span class="keyword">while</span>(ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch == <span class="string">'-'</span>) z = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">while</span>(ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>)&#123;r = r * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">return</span> r * z;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">pd</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">int</span> s = <span class="number">0</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = r; i &gt;= l; i --)&#123;</div><div class="line"><span class="keyword">int</span> tmp = min((c - s) / a[i].v, a[i].b);</div><div class="line">s += tmp * a[i].v; a[i].b -= tmp;</div><div class="line"><span class="keyword">if</span>(s == c) <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">while</span>(!a[l].b &amp;&amp; l &lt;= r) l ++;</div><div class="line"><span class="keyword">while</span>(!a[r].b &amp;&amp; l &lt;= r) r --;</div><div class="line"><span class="keyword">if</span>(l &gt; r) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"><span class="keyword">while</span>(s &lt; c)&#123;</div><div class="line"><span class="keyword">int</span> tmp = min((c - s) / a[l].v + <span class="number">1</span>, a[l].b);</div><div class="line">s += tmp * a[l].v; a[l].b -= tmp;</div><div class="line"><span class="keyword">if</span>(!a[l].b) l ++;</div><div class="line"><span class="keyword">if</span>(l &gt; r) <span class="keyword">break</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>(s &lt; c) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"><span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">n = read(), c = read(); l = <span class="number">1</span>, r = n;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) a[i].v = read(), a[i].b = read();</div><div class="line">sort(a + <span class="number">1</span>, a + n + <span class="number">1</span>, cmp);</div><div class="line"><span class="keyword">while</span>(a[r].v &gt;= c &amp;&amp; l &lt;= r)&#123;ans += a[r].b; r --;&#125;</div><div class="line"><span class="keyword">while</span>(pd()) ans ++;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">work();</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 知识点 </category>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 贪心 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>bzoj1652 usaco Treats for the Cows 题解</title>
      <link href="/2018/02/13/bzoj1652-usaco-Treats-for-the-Cows-%E9%A2%98%E8%A7%A3/"/>
      <content type="html"><![CDATA[<h1 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h1><p>约翰经常给产奶量高的奶牛发特殊津贴，于是很快奶牛们拥有了大笔不知该怎么花的钱．为此，约翰购置了N(1≤N≤2000)份美味的零食来卖给奶牛们．每天约翰售出一份零食．当然约翰希望这些零食全部售出后能得到最大的收益．这些零食有以下这些有趣的特性：</p><p>•零食按照1．．N编号，它们被排成一列放在一个很长的盒子里．盒子的两端都有开口，约翰每</p><p>  天可以从盒子的任一端取出最外面的一个．</p><p>•与美酒与好吃的奶酪相似，这些零食储存得越久就越好吃．当然，这样约翰就可以把它们卖出更高的价钱．</p><p>  •每份零食的初始价值不一定相同．约翰进货时，第i份零食的初始价值为Vi(1≤Vi≤1000)．</p><p>  •第i份零食如果在被买进后的第a天出售，则它的售价是vi×a．</p><p>  Vi的是从盒子顶端往下的第i份零食的初始价值．约翰告诉了你所有零食的初始价值，并希望你能帮他计算一下，在这些零食全被卖出后，他最多能得到多少钱．</p><h1 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h1><p>f[i]表示从i开始的最多能得的钱，我们枚举j，那么</p><p>$f_i=max(f[i]+a[i+j]\times (n-j), f[i+1]+a[i]\times (n-j))$</p><h1 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> LF;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(x, y) memset(x, y, sizeof(x))</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> lson o &lt;&lt; 1</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rson o &lt;&lt; 1 | 1</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">5e3</span> + <span class="number">15</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> f[MAXN], a[MAXN];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">int</span> r = <span class="number">0</span>, z = <span class="number">1</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line"><span class="keyword">while</span>(ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch == <span class="string">'-'</span>) z = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">while</span>(ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>)&#123;r = r * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">return</span> r * z;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">int</span> n = read();</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) a[i] = read(), f[i] = a[i] * n;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; n; j ++)&#123;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i + j &lt;= n; i ++)&#123;</div><div class="line"><span class="keyword">int</span> k = i + j;</div><div class="line">f[i] = max(f[i] + a[k] * (n - j), f[i + <span class="number">1</span>] + a[i] * (n - j));</div><div class="line">&#125;</div><div class="line"><span class="comment">//for(int i = 1; i + j; i ++) </span></div><div class="line">&#125;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, f[<span class="number">1</span>]);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">work();</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 知识点 </category>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>bzoj1736 usaco The Wedding Juicer 题解</title>
      <link href="/2018/02/13/bzoj1736-usaco-The-Wedding-Juicer-%E9%A2%98%E8%A7%A3/"/>
      <content type="html"><![CDATA[<h1 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h1><p>约翰的奶牛们找到了一份不错的兼职一设计冲压式榨汁机．榨汁机设计如下：</p><p>一个W * H的底座(3≤W,H≤300)</p><p>每一个1 *1的方格上都放有一个高度为B(1≤B≤109)的柱予，用来榨汁．</p><p> 假设柱子之间都被完美地粘合了，这样水不会顺着柱子与柱子之间的空隙流走．但是约翰一直不知道，这么一个榨汁机，到底能装多少果汁？假设榨汁机周围没有任何东西，也就是说，边界上的水都会流走，有些榨汁机则根本不能装下任何的果汁．</p><h1 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h1><p>这个就是从最外围往里扫，然后如果当前扫到的格子周围有没有被扫过的且高度比当前格子低的话，可以对答案产生一定贡献，但是我们得保证扫到的格子，周围格子height&lt;当前格子的height中，其其他方向的三个格子都要&gt;=当前扫到的格子的height，所以用priority_queue瞎搞就完了。</p><h1 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> LF;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(x, y) memset(x, y, sizeof(x))</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> lson o &lt;&lt; 1</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rson o &lt;&lt; 1 | 1</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">515</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span><span class="keyword">int</span> x, y, h; <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Node &amp;gg) <span class="keyword">const</span> &#123;<span class="keyword">return</span> h &gt; gg.h;&#125;&#125;;</div><div class="line"><span class="keyword">int</span> a[MAXN][MAXN], vis[MAXN][MAXN], dx[<span class="number">15</span>] = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>&#125;, dy[<span class="number">15</span>] = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">-1</span>, <span class="number">0</span>&#125;, n, m;</div><div class="line">priority_queue &lt;Node&gt; q;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">int</span> r = <span class="number">0</span>, z = <span class="number">1</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line"><span class="keyword">while</span>(ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch == <span class="string">'-'</span>) z = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">while</span>(ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>)&#123;r = r * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">return</span> r * z;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">getans</span><span class="params">()</span></span>&#123;</div><div class="line">LL ans = <span class="number">0</span>;</div><div class="line">vis[<span class="number">1</span>][<span class="number">1</span>] = vis[<span class="number">1</span>][m] = vis[n][<span class="number">1</span>] = vis[n][m] = <span class="number">1</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; n; i ++) q.push((Node)&#123;i, <span class="number">1</span>, a[i][<span class="number">1</span>]&#125;), q.push((Node)&#123;i, m, a[i][m]&#125;), vis[i][<span class="number">1</span>] = vis[i][m] = <span class="number">1</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; m; i ++) q.push((Node)&#123;<span class="number">1</span>, i, a[<span class="number">1</span>][i]&#125;), q.push((Node)&#123;n, i, a[n][i]&#125;), vis[<span class="number">1</span>][i] = vis[n][i] = <span class="number">1</span>;</div><div class="line"><span class="keyword">while</span>(!q.empty())&#123;</div><div class="line"><span class="keyword">int</span> x = q.top().x, y = q.top().y, h = q.top().h; q.pop();</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">4</span>; i ++)&#123;</div><div class="line"><span class="keyword">int</span> x1 = x + dx[i], y1 = y + dy[i];</div><div class="line"><span class="keyword">if</span>(x1 &lt; <span class="number">1</span> || x1 &gt; n || y1 &lt; <span class="number">1</span> || y1 &gt; m || vis[x1][y1]) <span class="keyword">continue</span>;</div><div class="line">vis[x1][y1] = <span class="number">1</span>;</div><div class="line"><span class="keyword">if</span>(a[x1][y1] &lt; h)&#123;</div><div class="line">ans += (LL)h - a[x1][y1];</div><div class="line">a[x1][y1] = h;</div><div class="line">&#125;</div><div class="line">q.push((Node)&#123;x1, y1, a[x1][y1]&#125;);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">m = read(), n = read();</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j ++) a[i][j] = read();</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, getans());</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">work();</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 知识点 </category>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 优先队列 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>bzoj3083 遥远的国度 题解</title>
      <link href="/2018/02/08/bzoj3083-%E9%81%A5%E8%BF%9C%E7%9A%84%E5%9B%BD%E5%BA%A6-%E9%A2%98%E8%A7%A3/"/>
      <content type="html"><![CDATA[<h1 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>zcwwzdjn在追杀十分sb的zhx，而zhx逃入了一个遥远的国度。当zcwwzdjn准备进入遥远的国度继续追杀时，守护神RapiD阻拦了zcwwzdjn的去路，他需要zcwwzdjn完成任务后才能进入遥远的国度继续追杀。</p><p>问题是这样的：遥远的国度有n个城市，这些城市之间由一些路连接且这些城市构成了一颗树。这个国度有一个首都，我们可以把这个首都看做整棵树的根，但遥远的国度比较奇怪，首都是随时有可能变为另外一个城市的。遥远的国度的每个城市有一个防御值，有些时候RapiD会使得某两个城市之间的路径上的所有城市的防御值都变为某个值。</p><p>RapiD想知道在某个时候，如果把首都看做整棵树的根的话，那么以某个城市为根的子树的所有城市的防御值最小是多少。</p><p>由于RapiD无法解决这个问题，所以他拦住了zcwwzdjn希望他能帮忙。但zcwwzdjn还要追杀sb的zhx，所以这个重大的问题就被转交到了你的手上。</p><h2 id="输入输出格式"><a href="#输入输出格式" class="headerlink" title="输入输出格式"></a>输入输出格式</h2><p>输入格式：</p><p>第1行两个整数n m，代表城市个数和操作数。</p><p>第2行至第n行，每行两个整数 u v，代表城市u和城市v之间有一条路。</p><p>第n+1行，有n个整数，代表所有点的初始防御值。</p><p>第n+2行一个整数 id，代表初始的首都为id。</p><p>第n+3行至第n+m+2行，首先有一个整数opt，如果opt=1，接下来有一个整数id，代表把首都修改为id；如果opt=2，接下来有三个整数p1 p2 v，代表将p1 p2路径上的所有城市的防御值修改为v；如果opt=3，接下来有一个整数 id，代表询问以城市id为根的子树中的最小防御值。</p><p>输出格式：</p><p>对于每个opt=3的操作，输出一行代表对应子树的最小点权值。</p><h2 id="输入输出样例"><a href="#输入输出样例" class="headerlink" title="输入输出样例"></a>输入输出样例</h2><p>输入样例#1：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">3 7</div><div class="line">1 2</div><div class="line">1 3</div><div class="line">1 2 3</div><div class="line">1</div><div class="line">3 1</div><div class="line">2 1 1 6</div><div class="line">3 1</div><div class="line">2 2 2 5</div><div class="line">3 1</div><div class="line">2 3 3 4</div><div class="line">3 1</div></pre></td></tr></table></figure><p>输出样例#1：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td></tr></table></figure><h1 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h1><p>先考虑没有换根操作，这时候就是裸的树剖。</p><p>如果有换根操作呢，分类讨论：</p><p>1.x == rt，这时候我们就是找1-n的最小值。</p><p>2.lca(x, rt) == x，即x在现根到原根的链上时，我们发现x的子树就是整棵树减去x向下一个节点的子树</p><p>3.除以上两种情况，x的子树不变。</p><p>然后套上裸的树链剖分就好了。</p><h1 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> LF;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x7fffffff</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(x, y) memset(x, y, sizeof(x))</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> lson o &lt;&lt; 1</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rson o &lt;&lt; 1 | 1</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">    LL r = <span class="number">0</span>, z = <span class="number">1</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line">    <span class="keyword">while</span>(ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch == <span class="string">'-'</span>) z = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">while</span>(ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>)&#123;r = r * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">return</span> r * z;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> LL MAXN = <span class="number">2e5</span> + <span class="number">15</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span>LL to, nxt;&#125;g[MAXN &lt;&lt; <span class="number">1</span>];</div><div class="line">LL head[MAXN], size[MAXN], dep[MAXN], s[MAXN &lt;&lt; <span class="number">2</span>], fa[MAXN], son[MAXN], top[MAXN], f[MAXN][<span class="number">25</span>], w[MAXN], col[MAXN], wt[MAXN], id[MAXN], cnt = <span class="number">0</span>, tt = <span class="number">0</span>, n;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">min</span><span class="params">(LL a, LL b)</span></span>&#123;<span class="keyword">return</span> a &gt; b ? b : a;&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(LL u, LL v)</span></span>&#123;g[++ cnt] = (Edge)&#123;v, head[u]&#125;; head[u] = cnt;&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(LL u, LL v)</span></span>&#123;add(u, v); add(v, u);&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">up</span><span class="params">(LL o)</span></span>&#123;s[o] = min(s[lson], s[rson]);&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">down</span><span class="params">(LL o, LL l, LL r)</span></span>&#123;<span class="keyword">if</span>(col[o])&#123;col[lson] = col[rson] = col[o]; s[lson] = s[rson] = col[o]; col[o] = <span class="number">0</span>;&#125;&#125;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">lca</span><span class="params">(LL x, LL y)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(dep[x] &lt; dep[y]) swap(x, y);</div><div class="line">    LL t = dep[x] - dep[y];</div><div class="line">    <span class="keyword">for</span>(LL i = <span class="number">0</span>; i &lt;= <span class="number">17</span>; i ++)&#123;</div><div class="line">        <span class="keyword">if</span>(t &amp; (<span class="number">1</span> &lt;&lt; i)) x = f[x][i];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(LL i = <span class="number">17</span>; i &gt;= <span class="number">0</span>; i --)&#123;</div><div class="line">        <span class="keyword">if</span>(f[x][i] != f[y][i])&#123;</div><div class="line">            x = f[x][i]; y = f[y][i];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(x == y) <span class="keyword">return</span> x;</div><div class="line">    <span class="keyword">return</span> f[x][<span class="number">0</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">calc</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(LL j = <span class="number">1</span>; (<span class="number">1</span> &lt;&lt; j) &lt;= n; j ++)</div><div class="line">        <span class="keyword">for</span>(LL i = <span class="number">1</span>; i &lt;= n; i ++)&#123;</div><div class="line">            <span class="keyword">if</span>(f[i][j - <span class="number">1</span>]) f[i][j] = f[f[i][j - <span class="number">1</span>]][j - <span class="number">1</span>];</div><div class="line">        &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">jump</span><span class="params">(LL x, LL dd)</span></span>&#123;</div><div class="line"><span class="keyword">for</span>(LL i = <span class="number">0</span>; i &lt;= <span class="number">17</span>; i ++)&#123;</div><div class="line">        <span class="keyword">if</span>(dd &amp; (<span class="number">1</span> &lt;&lt; i)) x = f[x][i];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> x;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(LL o, LL l, LL r)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(l == r)&#123;s[o] = wt[l]; <span class="keyword">return</span> ;&#125;</div><div class="line">    LL mid = l + r &gt;&gt; <span class="number">1</span>;</div><div class="line">    build(lson, l, mid);</div><div class="line">    build(rson, mid + <span class="number">1</span>, r);</div><div class="line">    up(o);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(LL o, LL l, LL r, LL x, LL y, LL c)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(x &lt;= l &amp;&amp; r &lt;= y)&#123;s[o] = col[o] = c; <span class="keyword">return</span> ;&#125;</div><div class="line">    LL mid = l + r &gt;&gt; <span class="number">1</span>;</div><div class="line">    down(o, l, r);</div><div class="line">    <span class="keyword">if</span>(x &lt;= mid) modify(lson, l, mid, x, y, c);</div><div class="line">    <span class="keyword">if</span>(y &gt; mid) modify(rson, mid + <span class="number">1</span>, r, x, y, c);</div><div class="line">    up(o);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">query</span><span class="params">(LL o, LL l, LL r, LL x, LL y)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(x &lt;= l &amp;&amp; r &lt;= y) <span class="keyword">return</span> s[o];</div><div class="line">    LL mid = l + r &gt;&gt; <span class="number">1</span>, ret = INF;</div><div class="line">    <span class="keyword">if</span>(x &lt;= mid) ret = min(ret, query(lson, l, mid, x, y));</div><div class="line">    <span class="keyword">if</span>(y &gt; mid) ret = min(ret, query(rson, mid + <span class="number">1</span>, r, x, y));</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(LL u, LL fafa, LL deep)</span></span>&#123;</div><div class="line">    size[u] = <span class="number">1</span>; f[u][<span class="number">0</span>] = fa[u] = fafa; dep[u] = deep;</div><div class="line">    <span class="keyword">for</span>(LL i = head[u]; i; i = g[i].nxt)&#123;</div><div class="line">        LL v = g[i].to; <span class="keyword">if</span>(v == fafa) <span class="keyword">continue</span>;</div><div class="line">        dfs1(v, u, deep + <span class="number">1</span>); size[u] += size[v];</div><div class="line">        <span class="keyword">if</span>(size[v] &gt; size[son[u]]) son[u] = v;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(LL u, LL topf)</span></span>&#123;</div><div class="line">    top[u] = topf; id[u] = ++ tt; wt[id[u]] = w[u];</div><div class="line">    <span class="keyword">if</span>(son[u]) dfs2(son[u], topf);</div><div class="line">    <span class="keyword">for</span>(LL i = head[u]; i; i = g[i].nxt)&#123;</div><div class="line">        LL v = g[i].to; <span class="keyword">if</span>(v == son[u] || v == fa[u]) <span class="keyword">continue</span>;</div><div class="line">        dfs2(v, v);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(LL x, LL y, LL c)</span></span>&#123;</div><div class="line">    <span class="keyword">while</span>(top[x] != top[y])&#123;</div><div class="line">        <span class="keyword">if</span>(dep[top[x]] &lt; dep[top[y]]) swap(x, y);</div><div class="line">        modify(<span class="number">1</span>, <span class="number">1</span>, n, id[top[x]], id[x], c);</div><div class="line">        x = fa[top[x]];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(dep[x] &gt; dep[y]) swap(x, y);</div><div class="line">    modify(<span class="number">1</span>, <span class="number">1</span>, n, id[x], id[y], c);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">    n = read(); LL T = read(), rt;</div><div class="line">    <span class="comment">//memset(s, 0x3f, sizeof(s));</span></div><div class="line">    <span class="keyword">for</span>(LL i = <span class="number">1</span>; i &lt; n; i ++)&#123;</div><div class="line">        LL u = read(), v = read();</div><div class="line">        add_edge(u, v);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(LL i = <span class="number">1</span>; i &lt;= n; i ++) w[i] = read();</div><div class="line">    rt = read();</div><div class="line">    dfs1(<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>); dfs2(<span class="number">1</span>, <span class="number">1</span>); build(<span class="number">1</span>, <span class="number">1</span>, n); calc();</div><div class="line">    <span class="keyword">while</span>(T --)&#123;</div><div class="line">        LL opt = read();</div><div class="line">        <span class="keyword">if</span>(opt == <span class="number">1</span>) rt = read();</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(opt == <span class="number">2</span>)&#123;</div><div class="line">            LL x = read(), y = read(), c = read();</div><div class="line">            change(x, y, c);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(opt == <span class="number">3</span>)&#123;</div><div class="line">            LL x = read();</div><div class="line">            <span class="keyword">if</span>(x == rt) <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, query(<span class="number">1</span>, <span class="number">1</span>, n, <span class="number">1</span>, n));</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(lca(x, rt) == x)&#123;</div><div class="line">            LL hh = jump(rt, dep[rt] - dep[x] - <span class="number">1</span>);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, min(query(<span class="number">1</span>, <span class="number">1</span>, n, <span class="number">1</span>, id[hh] - <span class="number">1</span>), query(<span class="number">1</span>, <span class="number">1</span>, n, id[hh] + size[hh], n)));</div><div class="line">&#125;</div><div class="line">            <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, query(<span class="number">1</span>, <span class="number">1</span>, n, id[x], id[x] + size[x] - <span class="number">1</span>));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    work();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 知识点 </category>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
            <tag> 最近公共祖先 </tag>
            
            <tag> 树链剖分 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>差分约束学习笔记</title>
      <link href="/2018/02/07/%E5%B7%AE%E5%88%86%E7%BA%A6%E6%9D%9F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <content type="html"><![CDATA[<h1 id="讲解："><a href="#讲解：" class="headerlink" title="讲解："></a>讲解：</h1><p>先安利一篇blog：<a href="http://www.cppblog.com/menjitianya/archive/2015/11/19/212292.html" target="_blank" rel="external">传送门</a></p><p>然后我也不写了，大致总结一下：</p><p>差分约束系统就是给你一串不等式组，然后然你求$x_n-x_0$的最大值之类的问题，我们可以巧妙地把它转化成一个有向图来解决这个问题。</p><p>它的经典应用还是挺多的。线性约束、区间约束（这个千万不让忘了自己本身的一些约束条件）、未知条件约束（这个比较难，我们需要枚举，如果满足单调性还可二分）。</p><h1 id="习题："><a href="#习题：" class="headerlink" title="习题："></a>习题：</h1><h2 id="1-bzoj1731"><a href="#1-bzoj1731" class="headerlink" title="1.bzoj1731"></a>1.bzoj1731</h2><h3 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h3><p> 当排队等候喂食时，奶牛喜欢和它们的朋友站得靠近些。FJ有N（2&lt;=N&lt;=1000）头奶牛，编号从1到N，沿一条直线站着等候喂食。奶牛排在队伍中的顺序和它们的编号是相同的。因为奶牛相当苗条，所以可能有两头或者更多奶牛站在同一位置上。即使说，如果我们想象奶牛是站在一条数轴上的话，允许有两头或更多奶牛拥有相同的横坐标。一些奶牛相互间存有好感，它们希望两者之间的距离不超过一个给定的数L。另一方面，一些奶牛相互间非常反感，它们希望两者间的距离不小于一个给定的数D。给出ML条关于两头奶牛间有好感的描述，再给出MD条关于两头奶牛间存有反感的描述。（1&lt;=ML,MD&lt;=10000，1&lt;=L,D&lt;=1000000）你的工作是：如果不存在满足要求的方案，输出-1；如果1号奶牛和N号奶牛间的距离可以任意大，输出-2；否则，计算出在满足所有要求的情况下，1号奶牛和N号奶牛间可能的最大距离。</p><h3 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h3><p>这道题就是差分约束的模板题。我们都要转化成<strong>小于等于</strong>的形式。注意还有一个隐藏条件，就是d[i + 1] - d[i] &gt;= 0。然后SPFA判环，跑最短路即可。</p><h3 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i, a, b) for(int i = a; i &lt;= b; i ++)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REPG(i, x) for(int i = head[x]; i; i = g[i].nxt)</span></div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(x, y) memset(x, y, sizeof(x));</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 10000000</span></div><div class="line"> </div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"> </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> LF;</div><div class="line"> </div><div class="line"><span class="function">LL <span class="title">Max</span><span class="params">(LL a, LL b)</span></span>&#123;<span class="keyword">return</span> a &gt; b ? a : b;&#125;</div><div class="line"><span class="function">LL <span class="title">Min</span><span class="params">(LL a, LL b)</span></span>&#123;<span class="keyword">return</span> a &lt; b ? a : b;&#125;</div><div class="line"><span class="function">LL <span class="title">abs</span><span class="params">(LL x)</span></span>&#123;<span class="keyword">return</span> x &gt; <span class="number">0</span> ? x : -x;&#125;</div><div class="line"> </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e4</span> + <span class="number">15</span>;</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span><span class="keyword">int</span> to, nxt, dis;&#125;g[MAXN &lt;&lt; <span class="number">1</span>];</div><div class="line"><span class="keyword">int</span> head[MAXN], cnt = <span class="number">0</span>, ct = <span class="number">0</span>, tag[MAXN], dist[MAXN], n, ml, md;</div><div class="line"><span class="keyword">bool</span> vis[MAXN]; <span class="built_in">queue</span> &lt;<span class="keyword">int</span>&gt; q;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> dis)</span></span>&#123;g[++ cnt] = (Edge)&#123;v, head[u], dis&#125;; head[u] = cnt;&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> r = <span class="number">0</span>, z = <span class="number">1</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line">    <span class="keyword">while</span>(ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch == <span class="string">'-'</span>) z = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">while</span>(ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>)&#123;r = r * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">return</span> r * z;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">spfa</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) dist[i] = INF; </div><div class="line">    dist[<span class="number">1</span>] = <span class="number">0</span>; q.push(<span class="number">1</span>); vis[<span class="number">1</span>] = <span class="number">1</span>; tag[<span class="number">1</span>] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span>(!q.empty())&#123;</div><div class="line">        <span class="keyword">int</span> u = q.front(); q.pop(); vis[u] = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; i; i = g[i].nxt)&#123;</div><div class="line">            <span class="keyword">int</span> v = g[i].to;</div><div class="line">            <span class="keyword">if</span>(dist[v] &gt; dist[u] + g[i].dis)&#123;</div><div class="line">                dist[v] = dist[u] + g[i].dis;</div><div class="line">                <span class="keyword">if</span>(!vis[v])&#123;</div><div class="line">                    tag[v] ++; <span class="keyword">if</span>(tag[v] &gt; n)&#123;<span class="built_in">printf</span>(<span class="string">"-1\n"</span>); <span class="keyword">return</span> ;&#125;</div><div class="line">                    vis[v] = <span class="number">1</span>; q.push(v);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(dist[n] == INF)&#123;<span class="built_in">printf</span>(<span class="string">"-2\n"</span>); <span class="keyword">return</span> ;&#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, dist[n]);</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">    n = read(), ml = read(), md = read();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= ml; i ++)&#123;</div><div class="line">        <span class="keyword">int</span> x = read(), y = read(), z = read();</div><div class="line">        add(x, y, z);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= md; i ++)&#123;</div><div class="line">        <span class="keyword">int</span> x = read(), y = read(), z = read();</div><div class="line">        add(y, x, -z);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i ++) add(i, i - <span class="number">1</span>, <span class="number">0</span>);</div><div class="line">    spfa();</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    work();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="2-bzoj2330"><a href="#2-bzoj2330" class="headerlink" title="2.bzoj2330"></a>2.bzoj2330</h2><h3 id="题意：-1"><a href="#题意：-1" class="headerlink" title="题意："></a>题意：</h3><p>幼儿园里有N个小朋友，lxhgww老师现在想要给这些小朋友们分配糖果，要求每个小朋友都要分到糖果。但是小朋友们也有嫉妒心，总是会提出一些要求，比如小明不希望小红分到的糖果比他的多，于是在分配糖果的时候，lxhgww需要满足小朋友们的K个要求。幼儿园的糖果总是有限的，lxhgww想知道他至少需要准备多少个糖果，才能使得每个小朋友都能够分到糖果，并且满足小朋友们所有的要求。</p><h3 id="题解：-1"><a href="#题解：-1" class="headerlink" title="题解："></a>题解：</h3><p>这道题也不难，就是根据输入的建边，然后我们设一个虚点0，向i(1&lt;=i&lt;=n)连一条dis为1的边(即满足x[i]-x[0]&gt;=1，保证每个人都有糖果)，然后！！！关键问题，<strong>0向所有点的边不能按1-n的顺序建，得倒着建</strong>，看到hzwer的blog我才恍然大悟，如果是一条链的话，1-n的顺序就会T了。出题人好不良心啊。。。或者说我们每个点刚开始就加进queue里也可以，这样跟好一点。还有，别忘了答案是long long</p><h3 id="代码：-1"><a href="#代码：-1" class="headerlink" title="代码："></a>代码：</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> LF;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(x, y) memset(x, y, sizeof(x))</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e6</span> + <span class="number">15</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span><span class="keyword">int</span> to, nxt, dis;&#125;g[MAXN &lt;&lt; <span class="number">1</span>];</div><div class="line"><span class="keyword">int</span> head[MAXN], cnt = <span class="number">0</span>, tag[MAXN], n, k;</div><div class="line">LL dist[MAXN];</div><div class="line"><span class="keyword">bool</span> vis[MAXN]; <span class="built_in">queue</span> &lt;<span class="keyword">int</span>&gt; q;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> dis)</span></span>&#123;g[++ cnt] = (Edge)&#123;v, head[u], dis&#125;; head[u] = cnt;&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">int</span> r = <span class="number">0</span>, z = <span class="number">1</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line"><span class="keyword">while</span>(ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch == <span class="string">'-'</span>) z = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">while</span>(ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>)&#123;r = r * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">return</span> r * z;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">spfa</span><span class="params">()</span></span>&#123;</div><div class="line">q.push(<span class="number">0</span>), tag[<span class="number">0</span>] ++, vis[<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line"><span class="keyword">while</span>(!q.empty())&#123;</div><div class="line"><span class="keyword">int</span> u = q.front(); vis[u] = <span class="number">0</span>; q.pop();</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; i; i = g[i].nxt)&#123;</div><div class="line"><span class="keyword">int</span> v = g[i].to;</div><div class="line"><span class="keyword">if</span>(dist[v] &lt; dist[u] + g[i].dis)&#123;</div><div class="line">dist[v] = dist[u] + g[i].dis;</div><div class="line"><span class="keyword">if</span>(!vis[v])&#123;</div><div class="line">tag[v] ++; <span class="keyword">if</span>(tag[v] &gt; n)&#123;<span class="built_in">printf</span>(<span class="string">"-1\n"</span>); <span class="keyword">return</span> ;&#125;</div><div class="line">vis[v] = <span class="number">1</span>; q.push(v);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">LL ans = <span class="number">0</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) ans += dist[i];</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">n = read(), k = read();</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; i ++)&#123;</div><div class="line"><span class="keyword">int</span> opt = read(), x = read(), y = read();</div><div class="line"><span class="keyword">if</span>(opt == <span class="number">1</span>) add(x, y, <span class="number">0</span>), add(y, x, <span class="number">0</span>);</div><div class="line"><span class="keyword">else</span> <span class="keyword">if</span>(opt == <span class="number">2</span>)&#123;<span class="keyword">if</span>(x == y)&#123;<span class="built_in">printf</span>(<span class="string">"-1\n"</span>); <span class="keyword">return</span> ;&#125; add(x, y, <span class="number">1</span>);&#125;</div><div class="line"><span class="keyword">else</span> <span class="keyword">if</span>(opt == <span class="number">3</span>) add(y, x, <span class="number">0</span>);</div><div class="line"><span class="keyword">else</span> <span class="keyword">if</span>(opt == <span class="number">4</span>)&#123;<span class="keyword">if</span>(x == y)&#123;<span class="built_in">printf</span>(<span class="string">"-1\n"</span>); <span class="keyword">return</span> ;&#125; add(y, x, <span class="number">1</span>);&#125;</div><div class="line"><span class="keyword">else</span> <span class="keyword">if</span>(opt == <span class="number">5</span>) add(x, y, <span class="number">0</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = n; i &gt;= <span class="number">1</span>; i --) add(<span class="number">0</span>, i, <span class="number">1</span>);</div><div class="line">spfa();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">work();</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 知识点 </category>
          
          <category> 讲解与实践 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 差分约束 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>bzoj1067 降雨量 题解</title>
      <link href="/2018/02/07/bzoj1067-%E9%99%8D%E9%9B%A8%E9%87%8F-%E9%A2%98%E8%A7%A3/"/>
      <content type="html"><![CDATA[<h1 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h1><p>​    我们常常会说这样的话：“X年是自Y年以来降雨量最多的”。它的含义是X年的降雨量不超过Y年，且对于任意Y＜Z＜X，Z年的降雨量严格小于X年。例如2002，2003，2004和2005年的降雨量分别为4920，5901，2832和3890，则可以说“2005年是自2003年以来最多的”，但不能说“2005年是自2002年以来最多的”由于有些年份的降雨量未知，有的说法是可能正确也可以不正确的。</p><h1 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h1><p>首先我们考虑什么时候会是true、false、maybe（我用x’,y’表示其降雨量）</p><p>首先y&gt;x直接false</p><p>true：</p><p>x，y已知，y’&lt;=x’，x+1至y-1的降雨量全都已知且&lt;y’</p><p>maybe：</p><p>1.x，y已知，y’&lt;=x’，x+1至y-1的降雨量有未知，但已知的都&lt;y’</p><p>2.x已知，y未知，x+1至y-1的降雨量已知的必须都&lt;x’</p><p>3.x未知，y已知，x+1至y-1的降雨量已知的必须都&lt;y’</p><p>4.x为已知中的最大年份，y&gt;x</p><p>5.y位已知中的最小年份，x&lt;y</p><p>6.x，y均未知</p><p>然后接下来的就好办了，线段树维护一下即可。</p><p>false：</p><p>以上未出现的情况均为false</p><h1 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// luogu-judger-enable-o2</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> LF;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(x, y) memset(x, y, sizeof(x))</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> lson o &lt;&lt; 1</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rson o &lt;&lt; 1 | 1</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">5e5</span> + <span class="number">15</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span><span class="keyword">int</span> len, start, end, maxn;&#125;s[MAXN &lt;&lt; <span class="number">2</span>];</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Input</span>&#123;</span><span class="keyword">int</span> y, r;&#125;a[MAXN];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> r = <span class="number">0</span>, z = <span class="number">1</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line">    <span class="keyword">while</span>(ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch == <span class="string">'-'</span>) z = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">while</span>(ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>)&#123;r = r * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">return</span> r * z;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">up</span><span class="params">(<span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">    s[o] = (Node)&#123;s[lson].len &amp; s[rson].len, s[lson].start, s[rson].end, max(s[lson].maxn, s[rson].maxn)&#125;;</div><div class="line">    <span class="keyword">if</span>(s[lson].end + <span class="number">1</span> != s[rson].start) s[o].len = <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(l == r)&#123;</div><div class="line">        s[o] = (Node)&#123;<span class="number">1</span>, a[l].y, a[l].y, a[l].r&#125;;</div><div class="line">        <span class="keyword">return</span> ;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</div><div class="line">    build(lson, l, mid); build(rson, mid + <span class="number">1</span>, r);</div><div class="line">    up(o);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(s[o].start == s[o].end)&#123;</div><div class="line">        <span class="keyword">if</span>(s[o].start != x) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="keyword">return</span> s[o].maxn;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(x &lt;= s[lson].end &amp;&amp; x &gt;= s[lson].start) find(lson, x);</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(x &gt;= s[rson].start &amp;&amp; x &lt;= s[rson].end) find(rson, x);</div><div class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</div><div class="line">    <span class="comment">//cout&lt;&lt;s[o].start&lt;&lt;" "&lt;&lt;s[o].end&lt;&lt;endl;</span></div><div class="line">    <span class="keyword">if</span>(x &lt;= s[o].start &amp;&amp; s[o].end &lt;= y) <span class="keyword">return</span> s[o].maxn;</div><div class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span>(x &lt;= s[lson].end) ret = max(ret, query(lson, x, y));</div><div class="line">    <span class="keyword">if</span>(y &gt;= s[rson].start) ret = max(ret, query(rson, x, y));</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">consec</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(x &lt;= s[o].start &amp;&amp; s[o].end &lt;= y) <span class="keyword">return</span> s[o].len;</div><div class="line">    <span class="keyword">int</span> ret = <span class="number">1</span>, flag = <span class="number">-1</span>;</div><div class="line">    <span class="keyword">if</span>(x &lt;= s[lson].end) ret = ret &amp; consec(lson, x, y), flag ++;</div><div class="line">    <span class="keyword">if</span>(y &gt;= s[rson].start) ret = ret &amp; consec(rson, x, y), flag ++;</div><div class="line">    <span class="keyword">if</span>(flag == <span class="number">1</span>)&#123;<span class="keyword">if</span>(s[lson].end + <span class="number">1</span> != s[rson].start) ret = <span class="number">0</span>;&#125;</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> n = read(), mm = <span class="number">1e9</span> + <span class="number">7</span>, mx = <span class="number">-1e9</span> - <span class="number">7</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) a[i].y = read(), a[i].r = read(), mm = min(mm, a[i].y), mx = max(mx, a[i].y);</div><div class="line">    build(<span class="number">1</span>, <span class="number">1</span>, n);</div><div class="line">    <span class="keyword">int</span> m = read();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i ++)&#123;</div><div class="line">        <span class="keyword">int</span> x = read(), y = read();</div><div class="line">        <span class="keyword">if</span>(x &gt; y)&#123;<span class="built_in">printf</span>(<span class="string">"false\n"</span>); <span class="keyword">continue</span>;&#125;</div><div class="line">        <span class="keyword">if</span>(x == y)&#123;<span class="built_in">printf</span>(<span class="string">"true\n"</span>); <span class="keyword">continue</span>;&#125;</div><div class="line">        <span class="comment">//以下为x&lt;y的 </span></div><div class="line">        <span class="keyword">if</span>(x == mx)&#123;<span class="built_in">printf</span>(<span class="string">"maybe\n"</span>); <span class="keyword">continue</span>;&#125;<span class="comment">//maybe4</span></div><div class="line">        <span class="keyword">if</span>(y == mm)&#123;<span class="built_in">printf</span>(<span class="string">"maybe\n"</span>); <span class="keyword">continue</span>;&#125;<span class="comment">//maybe5</span></div><div class="line">        <span class="keyword">int</span> l = find(<span class="number">1</span>, x), r = find(<span class="number">1</span>, y);</div><div class="line">        <span class="keyword">if</span>(!l &amp;&amp; !r)&#123;<span class="built_in">printf</span>(<span class="string">"maybe\n"</span>); <span class="keyword">continue</span>;&#125;<span class="comment">//maybe6</span></div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>((l &amp;&amp; !r) || (!l &amp;&amp; r))&#123;</div><div class="line">            <span class="keyword">int</span> tmp1 = query(<span class="number">1</span>, x + <span class="number">1</span>, y - <span class="number">1</span>), tmp2 = l + r;</div><div class="line">            <span class="comment">//cout&lt;&lt;tmp1&lt;&lt;" "&lt;&lt;tmp2&lt;&lt;endl;</span></div><div class="line">            <span class="keyword">if</span>(tmp1 &lt; tmp2)&#123;<span class="built_in">printf</span>(<span class="string">"maybe\n"</span>); <span class="keyword">continue</span>;&#125;<span class="comment">//maybe2, 3</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">int</span> flag = consec(<span class="number">1</span>, x, y), tmp = query(<span class="number">1</span>, x + <span class="number">1</span>, y - <span class="number">1</span>);</div><div class="line">            <span class="keyword">if</span>(l &gt;= r &amp;&amp; tmp &lt; r &amp;&amp; flag)&#123;<span class="built_in">printf</span>(<span class="string">"true\n"</span>); <span class="keyword">continue</span>;&#125;<span class="comment">//true</span></div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(l &gt;= r &amp;&amp; tmp &lt; r &amp;&amp; !flag)&#123;<span class="built_in">printf</span>(<span class="string">"maybe\n"</span>); <span class="keyword">continue</span>;&#125;<span class="comment">//maybe1</span></div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"false\n"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="comment">//freopen("data1.in", "r", stdin);</span></div><div class="line">    <span class="comment">//freopen("data.out", "w", stdout);</span></div><div class="line">    work();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 知识点 </category>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>bzoj2014 usaco Chocolate Buying 题解</title>
      <link href="/2018/02/07/bzoj2014-usaco-Chocolate-Buying-%E9%A2%98%E8%A7%A3/"/>
      <content type="html"><![CDATA[<h1 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h1><p>  贝西和其他奶牛们都喜欢巧克力，所以约翰准备买一些送给她们。奶牛巧克力专卖店里</p><p>有N种巧克力，每种巧克力的数量都是无限多的。每头奶牛只喜欢一种巧克力，调查显示，</p><p>有Ci头奶牛喜欢第i种巧克力，这种巧克力的售价是P。</p><p>​    约翰手上有B元预算，怎样用这些钱让尽量多的奶牛高兴呢？</p><h1 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h1><p>直接贪心。按单价从小到大排序，搞事情。</p><h1 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> LF;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(x, y) memset(x, y, sizeof(x))</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e5</span> + <span class="number">15</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span>LL p, c;&#125;a[MAXN];</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">Min</span><span class="params">(LL a, LL b)</span></span>&#123;<span class="keyword">return</span> a &lt; b ? a : b;&#125;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(Node a, Node b)</span></span>&#123;<span class="keyword">return</span> a.p &lt; b.p;&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">LL r = <span class="number">0</span>, z = <span class="number">1</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line"><span class="keyword">while</span>(ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch == <span class="string">'-'</span>) z = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">while</span>(ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>)&#123;r = r * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">return</span> r * z;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">LL n = read(), b = read();</div><div class="line"><span class="keyword">for</span>(LL i = <span class="number">1</span>; i &lt;= n; i ++) a[i].p = read(), a[i].c = read();</div><div class="line">sort(a + <span class="number">1</span>, a + n + <span class="number">1</span>, cmp);</div><div class="line">LL ans = <span class="number">0</span>;</div><div class="line"><span class="keyword">for</span>(LL i = <span class="number">1</span>; i &lt;= n; i ++)&#123;</div><div class="line">LL tmp = Min(a[i].c, b / a[i].p);</div><div class="line">ans += tmp;</div><div class="line">b -= tmp * a[i].p;</div><div class="line">&#125;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">work();</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 知识点 </category>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 贪心 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>bzoj3400 usaco Cow Frisbee Team 题解</title>
      <link href="/2018/02/07/bzoj3400-usaco-Cow-Frisbee-Team-%E9%A2%98%E8%A7%A3/"/>
      <content type="html"><![CDATA[<h1 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h1><p>  农夫顿因开始玩飞盘之后，约翰也打算让奶牛们享受飞盘的乐趣．他要组建一只奶牛飞盘队．他的N(1≤N≤2000)只奶牛，每只部有一个飞盘水准指数Ri(1≤Ri≤100000)．约翰要选出1只或多于1只奶牛来参加他的飞盘队．由于约翰的幸运数字是F(1≤F≤1000)，他希望所有奶牛的飞盘水准指数之和是幸运数字的倍数．</p><p>  帮约翰算算一共有多少种组队方式．</p><h1 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h1><p>dp。</p><p>$f_{i,j}$表示前i个牛，可以达到的水准和%f==j的方案数，然后就很显然了。</p><h1 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> LF;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(x, y) memset(x, y, sizeof(x))</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">2e3</span> + <span class="number">15</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">1e8</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> f[MAXN][MAXN], a[MAXN];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">int</span> r = <span class="number">0</span>, z = <span class="number">1</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line"><span class="keyword">while</span>(ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch == <span class="string">'-'</span>) z = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">while</span>(ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>)&#123;r = r * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">return</span> r * z;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">int</span> n = read(), m = read();</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) a[i] = read(), f[i][a[i] % m] = <span class="number">1</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j ++)&#123;</div><div class="line">(f[i][j] += f[i - <span class="number">1</span>][j]) %= MOD;</div><div class="line">(f[i][(j + a[i]) % m] += f[i - <span class="number">1</span>][j]) %= MOD;</div><div class="line">&#125;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, f[n][<span class="number">0</span>]);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">work();</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 知识点 </category>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 递推 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>bzoj1655 usaco Dollar Dayz 题解</title>
      <link href="/2018/02/07/bzoj1655-usaco-Dollar-Dayz-%E9%A2%98%E8%A7%A3/"/>
      <content type="html"><![CDATA[<h1 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h1><p>约翰到奶牛商场里买工具．商场里有K(1≤K≤100).种工具，价格分别为1，2，…，K美元．约翰手里有N(1≤N≤1000)美元，必须花完．那他有多少种购买的组合呢？</p><h1 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h1><p>首先f[j]表示当前有j美元能够购买的组合方案数，那么f[j] = f[j] + f[j - i]，其中i为当前枚举到的美元面值。</p><p>然后你这样写完之后，发现WA了。。。呵呵，高精度</p><h1 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> LF;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(x, y) memset(x, y, sizeof(x))</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">515</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">int</span> r = <span class="number">0</span>, z = <span class="number">1</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line"><span class="keyword">while</span>(ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch == <span class="string">'-'</span>) z = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">while</span>(ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>)&#123;r = r * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">return</span> r * z;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></div><div class="line"><span class="keyword">int</span> a[MAXN], len;</div><div class="line">Node()&#123;clr(a, <span class="number">0</span>); len = <span class="number">0</span>;&#125;</div><div class="line">Node <span class="keyword">operator</span> +=(Node f)&#123;</div><div class="line"><span class="keyword">int</span> tmp = max(len, f.len);</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= tmp; i ++)&#123;</div><div class="line">a[i] += f.a[i];</div><div class="line">a[i + <span class="number">1</span>] += a[i] / <span class="number">10</span>;</div><div class="line">a[i] %= <span class="number">10</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>(a[tmp + <span class="number">1</span>]) len = tmp + <span class="number">1</span>;</div><div class="line"><span class="keyword">else</span> len = tmp;</div><div class="line">&#125;</div><div class="line">&#125;x[<span class="number">1015</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">int</span> n = read(), k = read();</div><div class="line">x[<span class="number">0</span>].a[<span class="number">1</span>] = <span class="number">1</span>; x[<span class="number">0</span>].len = <span class="number">1</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= min(n, k); i ++)</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = i; j &lt;= n; j ++) x[j] += x[j - i];</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = x[n].len; i; i --) <span class="built_in">printf</span>(<span class="string">"%d"</span>, x[n].a[i]); <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">work();</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 知识点 </category>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 递推 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>bzoj3410 usaco Selfish Grazing 题解</title>
      <link href="/2018/02/07/bzoj3410-usaco-Selfish-Grazing-%E9%A2%98%E8%A7%A3/"/>
      <content type="html"><![CDATA[<h1 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h1><p>约翰有N(1≤N≤50000)头牛，约翰的草地可以认为是一条直线．每只牛只喜欢在某个特定的范围内吃草．第i头牛喜欢在区间(Si，Ei)吃草，1≤Si&lt;Ei≤1,000,000,00.</p><p>奶牛们都很自私，他们不喜欢和其他奶牛共享自己喜欢吃草的领域，因此约翰要保证任意两头牛都不会共享他们喜欢吃草昀领域．如果奶牛i和奶牛J想要同时吃草，那么要满足：Si&gt;=Ej或者Ei≤Sj．约翰想知道在同一时刻，最多可以有多少头奶牛同时吃草？</p><h1 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h1><p>跟借教室一样。考虑贪心，按右端点从小到大排序，然后判断是否可行即可。</p><h1 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> LF;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(x, y) memset(x, y, sizeof(x))</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> lson o &lt;&lt; 1</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rson o &lt;&lt; 1 | 1</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e5</span> + <span class="number">15</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span><span class="keyword">int</span> s, t;&#125;a[MAXN];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(Node x, Node y)</span></span>&#123;<span class="keyword">return</span> x.t &lt; y.t;&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">int</span> r = <span class="number">0</span>, z = <span class="number">1</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line"><span class="keyword">while</span>(ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch == <span class="string">'-'</span>) z = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">while</span>(ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>)&#123;r = r * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">return</span> r * z;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">int</span> n = read();</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) a[i].s = read(), a[i].t = read();</div><div class="line">sort(a + <span class="number">1</span>, a + n + <span class="number">1</span>, cmp);</div><div class="line"><span class="keyword">int</span> now = <span class="number">0</span>, cnt = <span class="number">1</span>, ans = <span class="number">0</span>;</div><div class="line"><span class="keyword">while</span>(cnt &lt;= n)&#123;</div><div class="line"><span class="keyword">while</span>(a[cnt].s &lt; now &amp;&amp; cnt &lt;= n) cnt ++;</div><div class="line"><span class="keyword">if</span>(cnt &gt; n) <span class="keyword">break</span>;</div><div class="line">ans ++; now = a[cnt].t;</div><div class="line">&#125;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">work();</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 知识点 </category>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 贪心 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>bzoj1689 usaco Muddy roads 题解</title>
      <link href="/2018/02/07/bzoj1689-usaco-Muddy-roads-%E9%A2%98%E8%A7%A3/"/>
      <content type="html"><![CDATA[<h1 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h1><p>牧场里下了一场暴雨，泥泞道路上出现了许多水坑，约翰想用一批长度为L的木板将这些水坑盖住.    牧场里的道路可以看成一根数轴，每个水坑可以用数轴上的两个坐标表示，如(3，6)表示从3到6有一个长度为3的水坑．所有的水坑都是不重叠的，(3，6)和(6，9)可以出现在同一个输入数据中，因为它们是两个连续的水坑，但不重叠．</p><p>请你帮助约翰计算最少要用多少块木板才能将所有水坑盖住</p><h1 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h1><p>考虑贪心（我最开始居然贪错了！！！我真是蠢到没救了）</p><p>按左端点从小到大排序，然后计算就成了</p><h1 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> LF;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(x, y) memset(x, y, sizeof(x))</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> lson o &lt;&lt; 1</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rson o &lt;&lt; 1 | 1</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e5</span> + <span class="number">15</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span><span class="keyword">int</span> s, t;&#125;a[MAXN];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(Node x, Node y)</span></span>&#123;<span class="keyword">return</span> x.s &lt; y.s;&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">int</span> r = <span class="number">0</span>, z = <span class="number">1</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line"><span class="keyword">while</span>(ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch == <span class="string">'-'</span>) z = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">while</span>(ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>)&#123;r = r * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">return</span> r * z;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">int</span> n = read(), l = read();</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) a[i].s = read(), a[i].t = read();</div><div class="line">sort(a + <span class="number">1</span>, a + n + <span class="number">1</span>, cmp);</div><div class="line"><span class="keyword">int</span> now = <span class="number">0</span>, ans = <span class="number">0</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)&#123;</div><div class="line"><span class="keyword">if</span>(now &gt; a[i].t) <span class="keyword">continue</span>;</div><div class="line">now = max(now, a[i].s);</div><div class="line"><span class="keyword">while</span>(now &lt; a[i].t)&#123;ans ++; now += l;&#125;</div><div class="line">&#125;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">work();</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 知识点 </category>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 贪心 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>bzoj3389 usaco Cleaning Shifts 题解</title>
      <link href="/2018/02/07/bzoj3389-usaco-Cleaning-Shifts-%E9%A2%98%E8%A7%A3/"/>
      <content type="html"><![CDATA[<h1 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h1><p>一天有T(1≤T≤10^6)个时段．约翰正打算安排他的N(1≤N≤25000)只奶牛来值班，打扫打扫牛棚卫生．每只奶牛都有自己的空闲时间段<a href="1≤Si≤Ei≤T">Si，Ei</a>，只能把空闲的奶牛安排出来值班．而且，每个时间段必需有奶牛在值班．  那么，最少需要动用多少奶牛参与值班呢？如果没有办法安排出合理的方案，就输出-1.</p><h1 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h1><p>这道题我们考虑贪心，以左端点从小到大为第一关键字、右端点从小到大为第二关键字排序，然后对于当前可以覆盖到的第now段时间，我们把开头&lt;=now+1的全都拿出来，然后把now和这些的右端点取个max即可。    </p><h1 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> LF;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(x, y) memset(x, y, sizeof(x))</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e6</span> + <span class="number">15</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span><span class="keyword">int</span> s, e;&#125;a[MAXN];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(Node x, Node y)</span></span>&#123;</div><div class="line"><span class="keyword">if</span>(x.s == y.s) <span class="keyword">return</span> x.e &lt; y.e;</div><div class="line"><span class="keyword">return</span> x.s &lt; y.s;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">int</span> r = <span class="number">0</span>, z = <span class="number">1</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line"><span class="keyword">while</span>(ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch == <span class="string">'-'</span>) z = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">while</span>(ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>)&#123;r = r * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">return</span> r * z;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">int</span> n = read(), t = read();</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) a[i].s = read(), a[i].e = read();</div><div class="line">sort(a + <span class="number">1</span>, a + n + <span class="number">1</span>, cmp);</div><div class="line"><span class="keyword">int</span> now = <span class="number">0</span>, tmp, tot = <span class="number">0</span>, ans = <span class="number">0</span>;</div><div class="line"><span class="keyword">while</span>(now &lt; t)&#123; tmp = now;</div><div class="line"><span class="keyword">while</span>(tot &lt; n &amp;&amp; a[tot + <span class="number">1</span>].s &lt;= tmp + <span class="number">1</span>)&#123;</div><div class="line">tot ++; now = max(now, a[tot].e);</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>((tot == n &amp;&amp; now &lt; t) || a[tot + <span class="number">1</span>].s &gt; now + <span class="number">1</span>)&#123;<span class="built_in">printf</span>(<span class="string">"-1\n"</span>); <span class="keyword">return</span> ;&#125;</div><div class="line">ans ++;</div><div class="line">&#125;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">work();</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 知识点 </category>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 贪心 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>bzoj1643 usaco Bessie&#39;s Secret Pasture 题解</title>
      <link href="/2018/02/07/bzoj1643-usaco-Bessie-s-Secret-Pasture-%E9%A2%98%E8%A7%A3/"/>
      <content type="html"><![CDATA[<h1 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h1><p>农夫约翰已经从他的牧场中取得了数不清块数的正方形草皮，草皮的边长总是整数（有时农夫约翰割草皮的刀法不合适，甚至切出了边长为0的正方形草皮），他已经把草皮放在了一个奶牛贝茜已经知道的地方。 贝茜总是希望把美味的草皮放到她的秘密庄园里，她决定从这些草皮中取出恰好4块搬到她的秘密庄园中，然后把它们分成1×1的小块，组成一个面积为N(1&lt;=N&lt;=10,000)个单位面积的部分。 贝茜对选出这样四块草皮的方法数很感兴趣，如果她得到了一个4个单位面积的部分，那么她可以有5中不同的方法选4块草皮：(1,1,1,1),(2,0,0,0),(0,2,0,0),(0,0,0,2).顺序是有效的：(4,3,2,1)和(1,2,3,4)是不同的方法。</p><h1 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h1><p>这个递推一下就完了。</p><p>$f{i,j}$表示面积为i，分成j份的方案数，枚举k，$f<em>{i,j}+=f</em>{i-k\times k,j-1}$</p><h1 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> LF;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(x, y) memset(x, y, sizeof(x))</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> lson o &lt;&lt; 1</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rson o &lt;&lt; 1 | 1</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e5</span> + <span class="number">15</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> f[MAXN][<span class="number">5</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">int</span> r = <span class="number">0</span>, z = <span class="number">1</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line"><span class="keyword">while</span>(ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch == <span class="string">'-'</span>) z = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">while</span>(ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>)&#123;r = r * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">return</span> r * z;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">int</span> n = read(); f[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">4</span>; j ++)</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k * k &lt;= i; k ++) f[i][j] += f[i - k * k][j - <span class="number">1</span>];</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, f[n][<span class="number">1</span>] + f[n][<span class="number">2</span>] + f[n][<span class="number">3</span>] + f[n][<span class="number">4</span>]);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">work();</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 知识点 </category>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 递推 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>bzoj3391 usaco Tree Cutting 题解</title>
      <link href="/2018/02/07/bzoj3391-usaco-Tree-Cutting-%E9%A2%98%E8%A7%A3/"/>
      <content type="html"><![CDATA[<h1 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h1><p>​    约翰意识到贝茜建设网络花费了他巨额的经费，就把她解雇了．贝茜很愤怒，打算狠狠报复．她打算破坏刚建成的约翰的网络．    约翰的网络是树形的，连接着N(1≤N≤10000)个牛棚．她打算切断某一个牛棚的电源，使和这个牛棚相连的所有电缆全部中断．之后，就会存在若干子网络．为保证破坏够大，每一个子网的牛棚数不得超过总牛棚数的一半,那哪些牛棚值得破坏呢？</p><h1 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h1><p>这个题啊，dfs一遍就好了，判断当前点u的每个儿子v为根节点的子树size[v] 和 n-size[u]是否都&lt;=n/2.</p><h1 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> LF;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(x, y) memset(x, y, sizeof(x))</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e5</span> + <span class="number">15</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span><span class="keyword">int</span> to, nxt;&#125;g[MAXN &lt;&lt; <span class="number">1</span>];</div><div class="line"><span class="keyword">int</span> head[MAXN], cnt = <span class="number">0</span>, size[MAXN], n;</div><div class="line"><span class="keyword">bool</span> ans[MAXN];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">int</span> r = <span class="number">0</span>, z = <span class="number">1</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line"><span class="keyword">while</span>(ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch == <span class="string">'-'</span>) z = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">while</span>(ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>)&#123;r = r * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">return</span> r * z;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span>&#123;g[++ cnt] = (Edge)&#123;v, head[u]&#125;; head[u] = cnt;&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span>&#123;add(u, v); add(v, u);&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> fafa)</span></span>&#123;</div><div class="line">size[u] = <span class="number">1</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; i; i = g[i].nxt)&#123;</div><div class="line"><span class="keyword">int</span> v = g[i].to; <span class="keyword">if</span>(v == fafa) <span class="keyword">continue</span>;</div><div class="line">dfs(v, u); size[u] += size[v];</div><div class="line"><span class="keyword">if</span>(size[v] &gt; n / <span class="number">2</span>) ans[u] = <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>(n - size[u] &gt; n / <span class="number">2</span>) ans[u] = <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">n = read();</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) ans[i] = <span class="number">1</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i ++)&#123;</div><div class="line"><span class="keyword">int</span> u = read(), v = read();</div><div class="line">add_edge(u, v);</div><div class="line">&#125;</div><div class="line">dfs(<span class="number">1</span>, <span class="number">0</span>);</div><div class="line"><span class="keyword">int</span> tot = <span class="number">0</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) <span class="keyword">if</span>(ans[i]) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, i), tot ++;</div><div class="line"><span class="keyword">if</span>(!tot) <span class="built_in">printf</span>(<span class="string">"NONE\n"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">work();</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 知识点 </category>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dfs </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>bzoj4747 usaco Counting Haybales 题解</title>
      <link href="/2018/02/07/bzoj4747-usaco-Counting-Haybales-%E9%A2%98%E8%A7%A3/"/>
      <content type="html"><![CDATA[<h1 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h1><p>给出N（1≤N≤100,000）个数，和   Q（1≤Q≤100,000）个询问。每个询问包含两个整数A,B(0≤A≤B≤1,000,000,000）。对于每个询问，给出数值在A到B间的数有多少个（包含A与B）。</p><h1 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h1><p>裸的线段树，先从小到大排序，维护一下每个区间最小值、最大值、长度，瞎搞。</p><h1 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i, a, b) for(int i = a; i &lt;= b; i ++)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REPG(i, x) for(int i = head[x]; i; i = g[i].nxt)</span></div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(x, y) memset(x, y, sizeof(x));</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> lson o &lt;&lt; 1</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rson o &lt;&lt; 1 | 1</span></div><div class="line"> </div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"> </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> LF;</div><div class="line"> </div><div class="line"><span class="function">LL <span class="title">Max</span><span class="params">(LL a, LL b)</span></span>&#123;<span class="keyword">return</span> a &gt; b ? a : b;&#125;</div><div class="line"><span class="function">LL <span class="title">Min</span><span class="params">(LL a, LL b)</span></span>&#123;<span class="keyword">return</span> a &lt; b ? a : b;&#125;</div><div class="line"><span class="function">LL <span class="title">abs</span><span class="params">(LL x)</span></span>&#123;<span class="keyword">return</span> x &gt; <span class="number">0</span> ? x : -x;&#125;</div><div class="line"> </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e5</span> + <span class="number">15</span>;</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span><span class="keyword">int</span> mn, mx, len;&#125;s[MAXN &lt;&lt; <span class="number">2</span>];</div><div class="line"><span class="keyword">int</span> a[MAXN];</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> r = <span class="number">0</span>, z = <span class="number">1</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line">    <span class="keyword">while</span>(ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch == <span class="string">'-'</span>) z = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">while</span>(ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>)&#123;r = r * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">return</span> r * z;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">up</span><span class="params">(<span class="keyword">int</span> o)</span></span>&#123;s[o] = (Node)&#123;min(s[lson].mn, s[rson].mn), max(s[lson].mx, s[rson].mx), s[lson].len + s[rson].len&#125;;&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(l == r)&#123;</div><div class="line">        s[o] = (Node)&#123;a[l], a[l], <span class="number">1</span>&#125;;</div><div class="line">        <span class="keyword">return</span> ;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</div><div class="line">    build(lson, l, mid);</div><div class="line">    build(rson, mid + <span class="number">1</span>, r);</div><div class="line">    up(o);</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(y &lt; s[o].mn || x &gt; s[o].mx) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span>(x &lt;= s[o].mn &amp;&amp; s[o].mx &lt;= y) <span class="keyword">return</span> s[o].len;</div><div class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span>(x &lt;= s[lson].mx) ret += query(lson, x, y);</div><div class="line">    <span class="keyword">if</span>(y &gt;= s[rson].mn) ret += query(rson, x, y);</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> n = read(), q = read();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) a[i] = read();</div><div class="line">    sort(a + <span class="number">1</span>, a + n + <span class="number">1</span>);</div><div class="line">    build(<span class="number">1</span>, <span class="number">1</span>, n);</div><div class="line">    <span class="comment">//for(int i = 1; i &lt;= 5; i ++) cout&lt;&lt;s[i].mx&lt;&lt;" "&lt;&lt;s[i].mn&lt;&lt;" "&lt;&lt;s[i].len&lt;&lt;endl;</span></div><div class="line">    <span class="keyword">while</span>(q --)&#123;</div><div class="line">        <span class="keyword">int</span> x = read(), y = read();</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, query(<span class="number">1</span>, x, y));</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    work();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 知识点 </category>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>bzoj1699 usaco Balanced Lineup 题解</title>
      <link href="/2018/02/07/bzoj1699-usaco-Balanced-Lineup-%E9%A2%98%E8%A7%A3/"/>
      <content type="html"><![CDATA[<h1 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h1><p>每天,农夫 John 的N(1 &lt;= N &lt;= 50,000)头牛总是按同一序列排队. 有一天, John 决定让一些牛们玩一场飞盘比赛. 他准备找一群在对列中为置连续的牛来进行比赛. 但是为了避免水平悬殊,牛的身高不应该相差太大. John 准备了Q (1 &lt;= Q &lt;= 180,000) 个可能的牛的选择和所有牛的身高 (1 &lt;= 身高 &lt;= 1,000,000). 他想知道每一组里面最高和最低的牛的身高差别. 注意: 在最大数据上, 输入和输出将占用大部分运行时间.</p><h1 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h1><p>裸的线段树，还不用修改</p><h1 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> LF;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(x, y) memset(x, y, sizeof(x))</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> lson o &lt;&lt; 1</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rson o &lt;&lt; 1 | 1</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e5</span> + <span class="number">15</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">2e9</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span><span class="keyword">int</span> mx, mn;&#125;s[MAXN &lt;&lt; <span class="number">2</span>];</div><div class="line"><span class="keyword">int</span> a[MAXN];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">up</span><span class="params">(<span class="keyword">int</span> o)</span></span>&#123;s[o].mn = min(s[lson].mn, s[rson].mn); s[o].mx = max(s[lson].mx, s[rson].mx);&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</div><div class="line"><span class="keyword">if</span>(l == r)&#123;s[o].mn = s[o].mx = a[l]; <span class="keyword">return</span> ;&#125;</div><div class="line"><span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</div><div class="line">build(lson, l, mid); build(rson, mid + <span class="number">1</span>, r);</div><div class="line">up(o);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">querymx</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</div><div class="line"><span class="keyword">if</span>(x &lt;= l &amp;&amp; r &lt;= y) <span class="keyword">return</span> s[o].mx;</div><div class="line"><span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>, ret = <span class="number">0</span>;</div><div class="line"><span class="keyword">if</span>(x &lt;= mid) ret = max(ret, querymx(lson, l, mid, x, y));</div><div class="line"><span class="keyword">if</span>(y &gt; mid) ret = max(ret, querymx(rson, mid + <span class="number">1</span>, r, x, y));</div><div class="line"><span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">querymn</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</div><div class="line"><span class="keyword">if</span>(x &lt;= l &amp;&amp; r &lt;= y) <span class="keyword">return</span> s[o].mn;</div><div class="line"><span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>, ret = INF;</div><div class="line"><span class="keyword">if</span>(x &lt;= mid) ret = min(ret, querymn(lson, l, mid, x, y));</div><div class="line"><span class="keyword">if</span>(y &gt; mid) ret = min(ret, querymn(rson, mid + <span class="number">1</span>, r, x, y));</div><div class="line"><span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">int</span> r = <span class="number">0</span>, z = <span class="number">1</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line"><span class="keyword">while</span>(ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch == <span class="string">'-'</span>) z = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">while</span>(ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>)&#123;r = r * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">return</span> r * z;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">int</span> n = read(), q = read();</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) a[i] = read();</div><div class="line">build(<span class="number">1</span>, <span class="number">1</span>, n);</div><div class="line"><span class="keyword">while</span>(q --)&#123;</div><div class="line"><span class="keyword">int</span> x = read(), y = read();</div><div class="line"><span class="keyword">int</span> tmp1 = querymx(<span class="number">1</span>, <span class="number">1</span>, n, x, y), tmp2 = querymn(<span class="number">1</span>, <span class="number">1</span>, n, x, y);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, tmp1 - tmp2);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">work();</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 知识点 </category>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>bzoj1612 usaco Cow Contest 题解</title>
      <link href="/2018/02/07/bzoj1612-usaco-Cow-Contest-%E9%A2%98%E8%A7%A3/"/>
      <content type="html"><![CDATA[<h1 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h1><p>FJ的N(1 &lt;= N &lt;= 100)头奶牛们最近参加了场程序设计竞赛:)。在赛场上，奶牛们按1..N依次编号。每头奶牛的编程能力不尽相同，并且没有哪两头奶牛的水平不相上下，也就是说，奶牛们的编程能力有明确的排名。 整个比赛被分成了若干轮，每一轮是两头指定编号的奶牛的对决。如果编号为A的奶牛的编程能力强于编号为B的奶牛(1 &lt;= A &lt;= N; 1 &lt;= B &lt;= N; A != B) ，那么她们的对决中，编号为A的奶牛总是能胜出。 FJ想知道奶牛们编程能力的具体排名，于是他找来了奶牛们所有 M(1 &lt;= M &lt;= 4,500)轮比赛的结果，希望你能根据这些信息，推断出尽可能多的奶牛的编程能力排名。比赛结果保证不会自相矛盾。</p><h1 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h1><p>n只有100，我们考虑dfs。</p><p>对于一个确定的点，比它排名高的和比他排名低的牛肯定是确定的，而且其总数一定是n-1.</p><p>那么我们正反建图，然后dfs，对于当前判断是否可行的点i，除它以外的所有点都应该在正反dfs被遍历过，若没有，那么当前点的排名不确定。</p><h1 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> LF;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(x, y) memset(x, y, sizeof(x))</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">115</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> e1[MAXN][MAXN], e2[MAXN][MAXN], n, m;</div><div class="line"><span class="keyword">bool</span> vis[MAXN];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">int</span> r = <span class="number">0</span>, z = <span class="number">1</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line"><span class="keyword">while</span>(ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch == <span class="string">'-'</span>) z = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">while</span>(ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>)&#123;r = r * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">return</span> r * z;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</div><div class="line">vis[u] = <span class="number">1</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)&#123;</div><div class="line"><span class="keyword">if</span>(!e1[u][i] || vis[i]) <span class="keyword">continue</span>;</div><div class="line">dfs1(i);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</div><div class="line">vis[u] = <span class="number">1</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)&#123;</div><div class="line"><span class="keyword">if</span>(!e2[u][i] || vis[i]) <span class="keyword">continue</span>;</div><div class="line">dfs2(i);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">pd</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">clr(vis, <span class="number">0</span>);</div><div class="line">dfs1(x); dfs2(x);</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) <span class="keyword">if</span>(!vis[i]) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"><span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">n = read(), m = read(); <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i ++)&#123;</div><div class="line"><span class="keyword">int</span> x = read(), y = read();</div><div class="line">e1[x][y] = e2[y][x] = <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) <span class="keyword">if</span>(pd(i)) ans ++;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">work();</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 知识点 </category>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dfs </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>bzoj4500 矩阵 题解</title>
      <link href="/2018/02/07/bzoj4500-%E7%9F%A9%E9%98%B5-%E9%A2%98%E8%A7%A3/"/>
      <content type="html"><![CDATA[<h1 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h1><p>有一个n*m的矩阵，初始每个格子的权值都为0，可以对矩阵执行两种操作：</p><ol><li>选择一行， 该行每个格子的权值加1或减1。</li><li>选择一列， 该列每个格子的权值加1或减1。</li></ol><p>现在有K个限制，每个限制为一个三元组(x,y,c)，代表格子(x,y)权值等于c。问是否存在一个操作序列，使得操作完后的矩阵满足所有的限制。如果存在输出”Yes”，否则输出”No”。</p><h1 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h1><p>这道题，我们仔细想想，会发现，(x, y)这个格子的值一定等于第x行加的值+第y列加的值，所以我们很快就能想到这是一个n+m个点的差分约束问题，如果我们把列的值改为负的，那么对于一个三元组(x, y, c)，我们有x-y&gt;=c    x-y&lt;=c。</p><p>然后我是都给它改成了&gt;=的形式，然后跑一边最长路判断是否可行即可。</p><h1 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> LF;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(x, y) memset(x, y, sizeof(x))</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x7fffffff</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e4</span> + <span class="number">15</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span><span class="keyword">int</span> to, nxt, dis;&#125;g[MAXN &lt;&lt; <span class="number">1</span>];</div><div class="line"><span class="keyword">int</span> head[MAXN], cnt = <span class="number">0</span>, dist[MAXN], tag[MAXN], n, m, k;</div><div class="line"><span class="keyword">bool</span> vis[MAXN]; <span class="built_in">queue</span> &lt;<span class="keyword">int</span>&gt; q;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> dis)</span></span>&#123;g[++ cnt] = (Edge)&#123;v, head[u], dis&#125;; head[u] = cnt;&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">int</span> r = <span class="number">0</span>, z = <span class="number">1</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line"><span class="keyword">while</span>(ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch == <span class="string">'-'</span>) z = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">while</span>(ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>)&#123;r = r * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">return</span> r * z;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">spfa</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n * <span class="number">2</span>; i ++) q.push(i);</div><div class="line"><span class="keyword">while</span>(!q.empty())&#123;</div><div class="line"><span class="keyword">int</span> u = q.front(); q.pop(); vis[u] = <span class="number">0</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; i; i = g[i].nxt)&#123;</div><div class="line"><span class="keyword">int</span> v = g[i].to;</div><div class="line"><span class="keyword">if</span>(dist[v] &lt; dist[u] + g[i].dis)&#123;</div><div class="line">dist[v] = dist[u] + g[i].dis;</div><div class="line"><span class="keyword">if</span>(!vis[v])&#123;</div><div class="line"><span class="keyword">if</span>(tag[v] == n * <span class="number">2</span>)&#123;<span class="built_in">printf</span>(<span class="string">"No\n"</span>); <span class="keyword">return</span> ;&#125;</div><div class="line">tag[v] ++; vis[v] = <span class="number">1</span>; q.push(v);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"Yes\n"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">int</span> T = read();</div><div class="line"><span class="keyword">while</span>(T --)&#123;</div><div class="line">n = read(), m = read(), k = read();</div><div class="line">cnt = <span class="number">0</span>; clr(tag, <span class="number">0</span>); clr(dist, <span class="number">0</span>); clr(head, <span class="number">0</span>);</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; i ++)&#123;</div><div class="line"><span class="keyword">int</span> x = read(), y = read() + n, c = read();</div><div class="line">add(x, y, c); add(y, x, -c);</div><div class="line">&#125;</div><div class="line">spfa();</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">work();</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 知识点 </category>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 差分约束 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>bzoj3396 usaco Total Flow 题解</title>
      <link href="/2018/02/07/bzoj3396-usaco-Total-Flow-%E9%A2%98%E8%A7%A3/"/>
      <content type="html"><![CDATA[<h1 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h1><p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=3396" target="_blank" rel="external">传送门</a></p><h1 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h1><p>（根本不知道题目说那么多在干什么。。。误导人么。。。）</p><p>裸的最大流，不解释</p><h1 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i, a, b) for(int i = a; i &lt;= b; i ++)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REPG(i, x) for(int i = head[x]; i; i = g[i].nxt)</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(x, y) memset(x, y, sizeof(x));</span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> LF;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">Max</span><span class="params">(LL a, LL b)</span></span>&#123;<span class="keyword">return</span> a &gt; b ? a : b;&#125;</div><div class="line"><span class="function">LL <span class="title">Min</span><span class="params">(LL a, LL b)</span></span>&#123;<span class="keyword">return</span> a &lt; b ? a : b;&#125;</div><div class="line"><span class="function">LL <span class="title">abs</span><span class="params">(LL x)</span></span>&#123;<span class="keyword">return</span> x &gt; <span class="number">0</span> ? x : -x;&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e3</span> + <span class="number">15</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">2e9</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span><span class="keyword">int</span> to, nxt, f;&#125;g[MAXN &lt;&lt; <span class="number">1</span>];</div><div class="line"><span class="keyword">int</span> head[MAXN], cur[MAXN], d[MAXN], cnt = <span class="number">-1</span>, n, s, t, ans;</div><div class="line"><span class="built_in">queue</span> &lt;<span class="keyword">int</span>&gt; q;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> f)</span></span>&#123;g[++ cnt] = (Edge)&#123;v, head[u], f&#125;; head[u] = cnt;&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> f)</span></span>&#123;add(u, v, f); add(v, u, <span class="number">0</span>);&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">int</span> r = <span class="number">0</span>, z = <span class="number">1</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line"><span class="keyword">while</span>(ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch == <span class="string">'-'</span>) z = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">while</span>(ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>)&#123;r = r * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">return</span> r * z;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">bfs</span><span class="params">()</span></span>&#123;</div><div class="line">clr(d, <span class="number">-1</span>); q.push(s); d[s] = <span class="number">1</span>;</div><div class="line"><span class="keyword">while</span>(!q.empty())&#123;</div><div class="line"><span class="keyword">int</span> u = q.front(); q.pop();</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; ~i; i = g[i].nxt)&#123;</div><div class="line"><span class="keyword">int</span> v = g[i].to;</div><div class="line"><span class="keyword">if</span>(g[i].f &amp;&amp; d[v] == <span class="number">-1</span>)&#123;</div><div class="line">d[v] = d[u] + <span class="number">1</span>;</div><div class="line">q.push(v);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> d[t] != <span class="number">-1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> flow)</span></span>&#123;</div><div class="line"><span class="keyword">if</span>(u == t) <span class="keyword">return</span> flow;</div><div class="line"><span class="keyword">int</span> ret = <span class="number">0</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span>&amp; i = cur[u]; ~i; i = g[i].nxt)&#123;</div><div class="line"><span class="keyword">int</span> v = g[i].to;</div><div class="line"><span class="keyword">if</span>(g[i].f &amp;&amp; d[v] == d[u] + <span class="number">1</span>)&#123;</div><div class="line"><span class="keyword">int</span> tmp = dfs(v, min(flow, g[i].f));</div><div class="line">g[i].f -= tmp; flow -= tmp;</div><div class="line">g[i ^ <span class="number">1</span>].f += tmp; ret += tmp;</div><div class="line"><span class="keyword">if</span>(!flow) <span class="keyword">break</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>(!ret) d[u] = <span class="number">-1</span>;</div><div class="line"><span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dinic</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">while</span>(bfs())&#123;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">52</span>; i ++) cur[i] = head[i];</div><div class="line">ans += dfs(s, INF);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">clr(head, <span class="number">-1</span>);</div><div class="line">n = read(); s = <span class="number">1</span>, t = <span class="number">26</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)&#123;</div><div class="line"><span class="keyword">char</span> ch[<span class="number">5</span>]; <span class="keyword">int</span> u, v, f;</div><div class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>, ch);</div><div class="line">        <span class="keyword">if</span>(ch[<span class="number">0</span>] &gt;= <span class="string">'A'</span> &amp;&amp; ch[<span class="number">0</span>] &lt;= <span class="string">'Z'</span>) u = ch[<span class="number">0</span>] - <span class="string">'A'</span> + <span class="number">1</span>;</div><div class="line">        <span class="keyword">else</span> u = ch[<span class="number">0</span>] - <span class="string">'a'</span> + <span class="number">27</span>;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, ch);</div><div class="line">        <span class="keyword">if</span>(ch[<span class="number">0</span>] &gt;= <span class="string">'A'</span> &amp;&amp; ch[<span class="number">0</span>] &lt;= <span class="string">'Z'</span>) v = ch[<span class="number">0</span>] - <span class="string">'A'</span> + <span class="number">1</span>;</div><div class="line">        <span class="keyword">else</span> v = ch[<span class="number">0</span>] - <span class="string">'a'</span> + <span class="number">27</span>;</div><div class="line">        f = read();</div><div class="line">add_edge(u, v, f);</div><div class="line">&#125;</div><div class="line">dinic();</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">work();</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 知识点 </category>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络流 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>bzoj1741 usaco Asteroids 题解</title>
      <link href="/2018/02/07/bzoj1741-usaco-Asteroids-%E9%A2%98%E8%A7%A3/"/>
      <content type="html"><![CDATA[<h1 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h1><p>贝茜想驾驶她的飞船穿过危险的小行星群．小行星群是一个NxN的网格(1≤N≤500)，在网格内有K个小行星(1≤K≤10000)． 幸运地是贝茜有一个很强大的武器，一次可以消除所有在一行或一列中的小行星，这种武器很贵，所以她希望尽量地少用．给出所有的小行星的位置，算出贝茜最少需要多少次射击就能消除所有的小行星．</p><h1 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h1><p>这道题，看起来就像网络流最小割的问题。</p><p>怎么建图呢？s-&gt;行号连一条容量为1的边，列号-&gt;t连一条容量为1的边，有小行星的点，其 行号-&gt;列号 连一条容量为INF的边，然后求最小割就可以了。</p><h1 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> LF;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(x, y) memset(x, y, sizeof(x))</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">2e4</span> + <span class="number">15</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXM = <span class="number">1e6</span> + <span class="number">15</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">2e9</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span><span class="keyword">int</span> to, nxt, f;&#125;g[MAXM &lt;&lt; <span class="number">1</span>];</div><div class="line"><span class="keyword">int</span> head[MAXN], cnt = <span class="number">-1</span>, d[MAXN], cur[MAXN], s, t;</div><div class="line"><span class="built_in">queue</span> &lt;<span class="keyword">int</span>&gt; q;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> f)</span></span>&#123;g[++ cnt] = (Edge)&#123;v, head[u], f&#125;; head[u] = cnt;&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> f)</span></span>&#123;add(u, v, f); add(v, u, <span class="number">0</span>);&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">int</span> r = <span class="number">0</span>, z = <span class="number">1</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line"><span class="keyword">while</span>(ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch == <span class="string">'-'</span>) z = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">while</span>(ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>)&#123;r = r * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">return</span> r * z;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">bfs</span><span class="params">()</span></span>&#123;</div><div class="line">clr(d, <span class="number">-1</span>); q.push(s); d[s] = <span class="number">0</span>;</div><div class="line"><span class="keyword">while</span>(!q.empty())&#123;</div><div class="line"><span class="keyword">int</span> u = q.front(); q.pop();</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; ~i; i = g[i].nxt)&#123;</div><div class="line"><span class="keyword">int</span> v = g[i].to;</div><div class="line"><span class="keyword">if</span>(g[i].f &amp;&amp; d[v] == <span class="number">-1</span>)&#123;</div><div class="line">d[v] = d[u] + <span class="number">1</span>; q.push(v);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> d[t] != <span class="number">-1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> flow)</span></span>&#123;</div><div class="line"><span class="keyword">if</span>(u == t) <span class="keyword">return</span> flow;</div><div class="line"><span class="keyword">int</span> ret = <span class="number">0</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; ~i; i = g[i].nxt)&#123;</div><div class="line"><span class="keyword">int</span> v = g[i].to;</div><div class="line"><span class="keyword">if</span>(g[i].f &amp;&amp; d[v] == d[u] + <span class="number">1</span>)&#123;</div><div class="line"><span class="keyword">int</span> tmp = dfs(v, min(flow, g[i].f));</div><div class="line">g[i].f -= tmp; flow -= tmp;</div><div class="line">g[i ^ <span class="number">1</span>].f += tmp; ret += tmp;</div><div class="line"><span class="keyword">if</span>(!flow) <span class="keyword">break</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>(!ret) d[u] = <span class="number">-1</span>;</div><div class="line"><span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">clr(head, <span class="number">-1</span>);</div><div class="line"><span class="keyword">int</span> n = read(), k = read();</div><div class="line">s = n * <span class="number">2</span> + <span class="number">1</span>, t = n * <span class="number">2</span> + <span class="number">2</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) add_edge(s, i, <span class="number">1</span>), add_edge(i + n, t, <span class="number">1</span>);</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; i ++)&#123;</div><div class="line"><span class="keyword">int</span> x = read(), y = read();</div><div class="line">add_edge(x, y + n, INF);</div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line"><span class="keyword">while</span>(bfs())&#123;</div><div class="line">ans += dfs(s, INF);</div><div class="line">&#125;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">work();</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 知识点 </category>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络流 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>bzoj1626 Building Roads 题解</title>
      <link href="/2018/02/07/bzoj1626-Building-Roads-%E9%A2%98%E8%A7%A3/"/>
      <content type="html"><![CDATA[<h1 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h1><p>Farmer John最近得到了一些新的农场，他想新修一些道路使得他的所有农场可以经过原有的或是新修的道路互达（也就是说，从任一个农场都可以经过一些首尾相连道路到达剩下的所有农场）。有些农场之间原本就有道路相连。 所有N(1 &lt;= N &lt;= 1,000)个农场（用1..N顺次编号）在地图上都表示为坐标为(X_i, Y_i)的点(0 &lt;= X_i &lt;= 1,000,000；0 &lt;= Y_i &lt;= 1,000,000)，两个农场间道路的长度自然就是代表它们的点之间的距离。现在Farmer John也告诉了你农场间原有的M(1 &lt;= M &lt;= 1,000)条路分别连接了哪两个农场，他希望你计算一下，为了使得所有农场连通，他所需建造道路的最小总长是多少。</p><h1 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h1><p>这道题很水啊，然而爆int了我第一遍WA了。。。</p><p>这道题就是刚开始先把已经存在的边用并查集把它们放到一个集合，用坐标预处理出两点之间的距离，之后就是裸的kruskal。</p><h1 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"> </div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"> </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> LF;</div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(x, y) memset(x, y, sizeof(x))</span></div><div class="line"> </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e6</span> + <span class="number">15</span>;</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span><span class="keyword">int</span> from, to; LF dis;&#125;g[MAXN &lt;&lt; <span class="number">1</span>];</div><div class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>, fa[MAXN], x[MAXN], y[MAXN], tmp = <span class="number">0</span>;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, LF dis)</span></span>&#123;g[++ cnt] = (Edge)&#123;u, v, dis&#125;;&#125;</div><div class="line"><span class="function">LF <span class="title">getdis</span><span class="params">(<span class="keyword">int</span> x1, <span class="keyword">int</span> y1, <span class="keyword">int</span> x2, <span class="keyword">int</span> y2)</span></span>&#123;</div><div class="line">LL x = (LL)(x1 - x2), y = (LL)(y1 - y2);</div><div class="line"><span class="keyword">return</span> <span class="built_in">sqrt</span>(x * x + y * y);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">getfa</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">return</span> fa[x] == x ? x : fa[x] = getfa(fa[x]);&#125;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(Edge x, Edge y)</span></span>&#123;<span class="keyword">return</span> x.dis &lt; y.dis;&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> r = <span class="number">0</span>, z = <span class="number">1</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line">    <span class="keyword">while</span>(ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch == <span class="string">'-'</span>) z = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">while</span>(ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>)&#123;r = r * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">return</span> r * z;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> n = read(), m = read();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) fa[i] = i;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) x[i] = read(), y[i] = read();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i ++)&#123;</div><div class="line">        <span class="keyword">int</span> a = read(), b = read();</div><div class="line">        <span class="keyword">int</span> f1 = getfa(a), f2 = getfa(b);</div><div class="line">        <span class="keyword">if</span>(f1 != f2) fa[f2] = f1, tmp ++;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; i; j ++)&#123;</div><div class="line">            LF dist = getdis(x[i], y[i], x[j], y[j]);</div><div class="line">            add(i, j, dist);</div><div class="line">        &#125;</div><div class="line">    sort(g + <span class="number">1</span>, g + cnt + <span class="number">1</span>, cmp);</div><div class="line">    LF ans = <span class="number">0</span>; <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span>(tmp &lt; n - <span class="number">1</span>)&#123; i ++;</div><div class="line">        <span class="keyword">int</span> a = g[i].from, b = g[i].to;</div><div class="line">        <span class="keyword">int</span> f1 = getfa(a), f2 = getfa(b);</div><div class="line">        <span class="keyword">if</span>(f1 != f2) fa[f2] = f1, tmp ++, ans += g[i].dis;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%.2lf\n"</span>, ans);</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    work();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 知识点 </category>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 最小生成树 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>bzoj1638 usaco Cow Traffic 题解</title>
      <link href="/2018/02/07/bzoj1638-usaco-Cow-Traffic-%E9%A2%98%E8%A7%A3/"/>
      <content type="html"><![CDATA[<h1 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h1><p>农场中,由于奶牛数量的迅速增长,通往奶牛宿舍的道路也出现了严重的交通拥堵问题.FJ打算找出最忙碌的道路来重点整治. 这个牧区包括一个由M (1 ≤ M ≤ 50,000)条单行道路(有向)组成的网络,以及 N (1 ≤ N ≤ 5,000)个交叉路口(编号为1..N),每一条道路连接两个不同的交叉路口.奶牛宿舍位于第N个路口.每一条道路都由编号较小的路口通向编号较大的路口.这样就可以避免网络中出现环.显而易见,所有道路都通向奶牛宿舍.而两个交叉路口可能由不止一条边连接. 在准备睡觉的时候,所有奶牛都从他们各自所在的交叉路口走向奶牛宿舍,奶牛只会在入度为0的路口,且所有入度为0的路口都会有奶牛. 帮助FJ找出最忙碌的道路,即计算所有路径中通过某条道路的最大次数.答案保证可以用32位整数存储.</p><h1 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h1><p>这道题大概是silver里比较难的了吧。</p><p>首先，很显然的一件事就是对于u-&gt;v这条边，经过它的次数根据乘法原理可得就是1-&gt;u的次数*v-&gt;n的次数。所以我们先dp一次n-&gt;u的，再反向建图dp一次 入度为零的点-&gt;u的，然后取最大即可。</p><h1 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> LF;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(x, y) memset(x, y, sizeof(x))</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">5e4</span> + <span class="number">15</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXM = <span class="number">5e4</span> + <span class="number">15</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span><span class="keyword">int</span> to, nxt;&#125;g[MAXM &lt;&lt; <span class="number">1</span>];</div><div class="line"><span class="keyword">int</span> head[MAXN], cnt = <span class="number">0</span>, f1[MAXN], f2[MAXN], tmpu[MAXN], tmpv[MAXN], n, m;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span>&#123;g[++ cnt] = (Edge)&#123;v, head[u]&#125;; head[u] = cnt;&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">int</span> r = <span class="number">0</span>, z = <span class="number">1</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line"><span class="keyword">while</span>(ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch == <span class="string">'-'</span>) z = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">while</span>(ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>)&#123;r = r * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">return</span> r * z;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dp1</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;<span class="comment">//n-&gt;u</span></div><div class="line"><span class="keyword">if</span>(!head[u])&#123;f1[u] = <span class="number">1</span>; <span class="keyword">return</span> ;&#125;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; i; i = g[i].nxt)&#123;</div><div class="line"><span class="keyword">int</span> v = g[i].to;</div><div class="line"><span class="keyword">if</span>(!f1[v]) dp1(v);</div><div class="line">f1[u] += f1[v];</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dp2</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;<span class="comment">//i-&gt;u</span></div><div class="line"><span class="keyword">if</span>(!head[u])&#123;f2[u] = <span class="number">1</span>; <span class="keyword">return</span> ;&#125;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; i; i = g[i].nxt)&#123;</div><div class="line"><span class="keyword">int</span> v = g[i].to;</div><div class="line"><span class="keyword">if</span>(!f2[v]) dp2(v);</div><div class="line">f2[u] += f2[v];</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">n = read(), m = read();</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i ++)&#123;</div><div class="line">tmpu[i] = read(), tmpv[i] = read();</div><div class="line">add(tmpu[i], tmpv[i]);</div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) <span class="keyword">if</span>(!f1[i]) dp1(i);</div><div class="line">cnt = <span class="number">0</span>; <span class="built_in">memset</span>(head, <span class="number">0</span>, <span class="keyword">sizeof</span>(head));</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i ++) add(tmpv[i], tmpu[i]);</div><div class="line">dp2(n);</div><div class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line"><span class="comment">//for(int i = 1; i &lt;= n; i ++) printf("%d ", f1[i]); printf("\n");</span></div><div class="line"><span class="comment">//for(int i = 1; i &lt;= n; i ++) printf("%d ", f2[i]); printf("\n");</span></div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i ++)&#123;</div><div class="line"><span class="keyword">int</span> u = tmpu[i], v = tmpv[i];</div><div class="line">ans = max(f1[v] * f2[u], ans);</div><div class="line">&#125;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">work();</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 知识点 </category>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树形dp </tag>
            
            <tag> 乘法原理 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>bzoj1577 usaco Fair Shuttle 题解</title>
      <link href="/2018/02/07/bzoj1577-usaco-Fair-Shuttle-%E9%A2%98%E8%A7%A3/"/>
      <content type="html"><![CDATA[<h1 id="题意"><a href="#题意" class="headerlink" title="题意:"></a>题意:</h1><p>公交车一共经过N（1&lt;=N&lt;=20000）个站点，从站点1一直驶到站点N。K（1&lt;=K&lt;=50000)群奶牛希望搭乘这辆公交车。第i群牛一共有Mi（1&lt;=Mi&lt;=N)只.他们希望从Si到Ei去。</p><p>公交车只能座C（1&lt;=C&lt;=100）只奶牛。而且不走重复路线，请计算这辆车最多能满足多少奶牛听要求。<br>注意：对于每一群奶牛，可以部分满足，也可以全部满足，也可以全部不满足。</p><h1 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h1><p>这道题我的第一反应是网络流，但是显然超时，然后我们会想到借教室这类问题，于是我果断的搞了个贪心，然后用线段树维护区间最大值即可。</p><p>至于这个贪心为什么是对的。额，我也不能证明，但是仔细想想就知道，我们得保证每个时刻车里“塞”得越满越好，然而按右端点从小到大排序能够保证多塞，所以我们这样搞个贪心就完了。</p><h1 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i, a, b) for(int i = a; i &lt;= b; i ++)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REPG(i, x) for(int i = head[x]; i; i = g[i].nxt)</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(x, y) memset(x, y, sizeof(x));</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> lson o &lt;&lt; 1</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rson o &lt;&lt; 1 | 1</span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> LF;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">Max</span><span class="params">(LL a, LL b)</span></span>&#123;<span class="keyword">return</span> a &gt; b ? a : b;&#125;</div><div class="line"><span class="function">LL <span class="title">Min</span><span class="params">(LL a, LL b)</span></span>&#123;<span class="keyword">return</span> a &lt; b ? a : b;&#125;</div><div class="line"><span class="function">LL <span class="title">abs</span><span class="params">(LL x)</span></span>&#123;<span class="keyword">return</span> x &gt; <span class="number">0</span> ? x : -x;&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e5</span> + <span class="number">15</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">2e9</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span><span class="keyword">int</span> s, t, m;&#125;a[MAXN];</div><div class="line"><span class="keyword">int</span> k, n, c, s[MAXN &lt;&lt; <span class="number">2</span>], col[MAXN &lt;&lt; <span class="number">2</span>], ans = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">int</span> r = <span class="number">0</span>, z = <span class="number">1</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line"><span class="keyword">while</span>(ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch == <span class="string">'-'</span>) z = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">while</span>(ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>)&#123;r = r * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">return</span> r * z;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(Node x, Node y)</span></span>&#123;<span class="keyword">return</span> x.t &lt; y.t;&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">up</span><span class="params">(<span class="keyword">int</span> o)</span></span>&#123;s[o] = max(s[lson], s[rson]);&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">down</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</div><div class="line"><span class="keyword">if</span>(!col[o]) <span class="keyword">return</span> ;</div><div class="line">col[lson] += col[o]; col[rson] += col[o];</div><div class="line">s[lson] += col[o]; s[rson] += col[o];</div><div class="line">col[o] = <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> c)</span></span>&#123;</div><div class="line"><span class="keyword">if</span>(x &lt;= l &amp;&amp; r &lt;= y)&#123;s[o] += c; col[o] += c; <span class="keyword">return</span> ;&#125;</div><div class="line">down(o, l, r);</div><div class="line"><span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</div><div class="line"><span class="keyword">if</span>(x &lt;= mid) modify(lson, l, mid, x, y, c);</div><div class="line"><span class="keyword">if</span>(y &gt; mid) modify(rson, mid + <span class="number">1</span>, r, x, y, c);</div><div class="line">up(o);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</div><div class="line"><span class="keyword">if</span>(x &lt;= l &amp;&amp; r &lt;= y) <span class="keyword">return</span> s[o];</div><div class="line">down(o, l, r);</div><div class="line"><span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>, ret = <span class="number">0</span>;</div><div class="line"><span class="keyword">if</span>(x &lt;= mid) ret = max(ret, query(lson, l, mid, x, y));</div><div class="line"><span class="keyword">if</span>(y &gt; mid) ret = max(ret, query(rson, mid + <span class="number">1</span>, r, x, y));</div><div class="line"><span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">k = read(), n = read(), c = read();</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; i ++) a[i].s = read(), a[i].t = read() - <span class="number">1</span>, a[i].m = read();</div><div class="line">sort(a + <span class="number">1</span>, a + k + <span class="number">1</span>, cmp);</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; i ++)&#123;</div><div class="line"><span class="keyword">int</span> tmp = min(a[i].m, c - query(<span class="number">1</span>, <span class="number">1</span>, n, a[i].s, a[i].t));</div><div class="line"><span class="keyword">if</span>(!tmp) <span class="keyword">continue</span>;</div><div class="line">ans += tmp;</div><div class="line">modify(<span class="number">1</span>, <span class="number">1</span>, n, a[i].s, a[i].t, tmp);</div><div class="line">&#125;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">work();</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 知识点 </category>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
            <tag> 贪心 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>bzoj1596 usaco 电话网络 题解</title>
      <link href="/2018/02/07/bzoj1596-usaco-%E7%94%B5%E8%AF%9D%E7%BD%91%E7%BB%9C-%E9%A2%98%E8%A7%A3/"/>
      <content type="html"><![CDATA[<h1 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h1><p>Farmer John决定为他的所有奶牛都配备手机，以此鼓励她们互相交流。不过，为此FJ必须在奶牛们居住的N(1 &lt;= N &lt;= 10,000)块草地中选一些建上无线电通讯塔，来保证任意两块草地间都存在手机信号。所有的N块草地按1..N 顺次编号。 所有草地中只有N-1对是相邻的，不过对任意两块草地A和B(1 &lt;= A &lt;= N; 1 &lt;= B &lt;= N; A != B)，都可以找到一个以A开头以B结尾的草地序列，并且序列中相邻的编号所代表的草地相邻。无线电通讯塔只能建在草地上，一座塔的服务范围为它所在的那块草地，以及与那块草地相邻的所有草地。 请你帮FJ计算一下，为了建立能覆盖到所有草地的通信系统，他最少要建多少座无线电通讯塔。</p><h1 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h1><p>考虑树形dp，我们设：</p><p>f表示最小覆盖数<br>$f<em>{u,0}$表示以u为子树的节点全覆盖，u放<br>$f</em>{u,1}$表示以u为子树的节点全覆盖，u不放<br>$f_{u,2}$表示以u为子树的节点除u全覆盖 </p><p>然后dfs状态转移一下即可，然后代码中的tmp<strong>一定要开LL，如果你的INF很大得话</strong>，因为到叶子节点的时候可能爆掉，不过我看黄学长的1e8就没炸，很玄学啊。</p><h1 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i, a, b) for(LL i = a; i &lt;= b; i ++)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REPG(i, x) for(LL i = head[x]; i; i = g[i].nxt)</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(x, y) memset(x, y, sizeof(x));</span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> LF;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">Max</span><span class="params">(LL a, LL b)</span></span>&#123;<span class="keyword">return</span> a &gt; b ? a : b;&#125;</div><div class="line"><span class="function">LL <span class="title">Min</span><span class="params">(LL a, LL b)</span></span>&#123;<span class="keyword">return</span> a &lt; b ? a : b;&#125;</div><div class="line"><span class="function">LL <span class="title">abs</span><span class="params">(LL x)</span></span>&#123;<span class="keyword">return</span> x &gt; <span class="number">0</span> ? x : -x;&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> LL MAXN = <span class="number">1e4</span> + <span class="number">15</span>;</div><div class="line"><span class="keyword">const</span> LL INF = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span>LL to, nxt;&#125;g[MAXN &lt;&lt; <span class="number">1</span>];</div><div class="line">LL head[MAXN], cnt = <span class="number">0</span>, f[MAXN][<span class="number">5</span>];</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">f表示最小覆盖数 </span></div><div class="line"><span class="comment">f[u][0]表示以u为子树的节点全覆盖，u放</span></div><div class="line"><span class="comment">f[u][1]表示以u为子树的节点全覆盖，u不放</span></div><div class="line"><span class="comment">f[u][2]表示以u为子树的节点除u全覆盖 </span></div><div class="line"><span class="comment">*/</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(LL u, LL v)</span></span>&#123;g[++ cnt] = (Edge)&#123;v, head[u]&#125;; head[u] = cnt;&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(LL u, LL v)</span></span>&#123;add(u, v); add(v, u);&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">LL r = <span class="number">0</span>, z = <span class="number">1</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line"><span class="keyword">while</span>(ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch == <span class="string">'-'</span>) z = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">while</span>(ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>)&#123;r = r * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">return</span> r * z;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">treedp</span><span class="params">(LL u, LL fafa)</span></span>&#123;</div><div class="line">LL tmp = <span class="number">0</span>; f[u][<span class="number">0</span>] = <span class="number">1</span>, f[u][<span class="number">1</span>] = INF;</div><div class="line"><span class="keyword">for</span>(LL i = head[u]; i; i = g[i].nxt)&#123;</div><div class="line">LL v = g[i].to; <span class="keyword">if</span>(v == fafa) <span class="keyword">continue</span>;</div><div class="line">treedp(v, u);</div><div class="line">f[u][<span class="number">0</span>] += min(f[v][<span class="number">2</span>], min(f[v][<span class="number">1</span>], f[v][<span class="number">0</span>]));</div><div class="line">f[u][<span class="number">2</span>] += f[v][<span class="number">1</span>];</div><div class="line">tmp += min(f[v][<span class="number">0</span>], f[v][<span class="number">1</span>]);</div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span>(LL i = head[u]; i; i = g[i].nxt)&#123;</div><div class="line">LL v = g[i].to; <span class="keyword">if</span>(v == fafa) <span class="keyword">continue</span>;</div><div class="line">f[u][<span class="number">1</span>] = min(f[u][<span class="number">1</span>], tmp + f[v][<span class="number">0</span>] - min(f[v][<span class="number">0</span>], f[v][<span class="number">1</span>]));</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">LL n = read();</div><div class="line"><span class="keyword">for</span>(LL i = <span class="number">1</span>; i &lt; n; i ++)&#123;</div><div class="line">LL u = read(), v = read();</div><div class="line">add_edge(u, v);</div><div class="line">&#125;</div><div class="line">treedp(<span class="number">1</span>, <span class="number">0</span>);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, min(f[<span class="number">1</span>][<span class="number">0</span>], f[<span class="number">1</span>][<span class="number">1</span>])); </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">work();</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 知识点 </category>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树形动规 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>bzoj1571 usaco ski 题解</title>
      <link href="/2018/02/07/bzoj1571-usaco-ski-%E9%A2%98%E8%A7%A3/"/>
      <content type="html"><![CDATA[<h1 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h1><p>Farmer John 想要带着 Bessie 一起在科罗拉多州一起滑雪。很不幸，Bessie滑雪技术并不精湛。 Bessie了解到，在滑雪场里，每天会提供S(0&lt;=S&lt;=100)门滑雪课。第i节课始于M_i(1&lt;=M_i&lt;=10000),上的时间为L_i(1&lt;=L_i&lt;=10000)。上完第i节课后，Bessie的滑雪能力会变成A_i(1&lt;=A_i&lt;=100). 注意：这个能力是绝对的，不是能力的增长值。 Bessie买了一张地图，地图上显示了N(1 &lt;= N &lt;= 10,000)个可供滑雪的斜坡，从第i个斜坡的顶端滑至底部所需的时长D_i(1&lt;=D_i&lt;=10000)，以及每个斜坡所需要的滑雪能力C_i(1&lt;=C_i&lt;=100)，以保证滑雪的安全性。Bessie的能力必须大于等于这个等级，以使得她能够安全滑下。 Bessie可以用她的时间来滑雪，上课，或者美美地喝上一杯可可汁，但是她必须在T(1&lt;=T&lt;=10000)时刻离开滑雪场。这意味着她必须在T时刻之前完成最后一次滑雪。 求Bessie在实现内最多可以完成多少次滑雪。这一天开始的时候，她的滑雪能力为1.</p><h1 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h1><p>这道题，很显然是个dp，不过不算特别好想。</p><p>首先，我们设$f_{i,j}$表示到第i个时刻，能力值达到j所能滑的最多的次数。</p><p>那么我们对于每次的$f_{i,j}$，应该怎么操作呢？</p><p>1.$f<em>{i,j}=f</em>{i-1,j}$，表示什么都不做</p><p>2.如果有在i时刻结束的课程，那么我们可以选择其中开始时间最晚的课（这样可以有更长的时间滑雪，这个需要预处理出来），再和当前的$f_{i,j}$取个max</p><p>3.我们考虑当前刚滑完雪，我们肯定选择当前的能力值可以滑雪的地方中，耗时最短的，然后就是让$f<em>{i-w[j],j}和f</em>{i,j}$取个max</p><p>然后就没有然后了，这题也不算难，自己想想也应该能想明白。</p><h1 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> LF;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(x, y) memset(x, y, sizeof(x))</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e4</span> + <span class="number">15</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXM = <span class="number">115</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> f[MAXN][MAXM], h[MAXN][MAXM], g[MAXN], w[MAXM];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">int</span> r = <span class="number">0</span>, z = <span class="number">1</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line"><span class="keyword">while</span>(ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch == <span class="string">'-'</span>) z = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">while</span>(ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>)&#123;r = r * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">return</span> r * z;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">int</span> t = read(), m = read(), n = read();</div><div class="line">clr(w, <span class="number">0x3f</span>); clr(f, <span class="number">0xc0</span>); f[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">0</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i ++)&#123;</div><div class="line"><span class="keyword">int</span> x = read(), y = read() + x, z = read();</div><div class="line">h[y][z] = max(h[y][z], x);<span class="comment">//h[i][j]表示的是到i结束，能力达到z的最晚开始时间 </span></div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)&#123;</div><div class="line"><span class="keyword">int</span> x = read(), y = read();<span class="comment">//x能力，y时间 </span></div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = x; j &lt;= <span class="number">100</span>; j ++) w[j] = min(w[j], y);<span class="comment">//w[i]表示能力值为i可滑雪的地方的最小消耗时间 </span></div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= t; i ++)&#123;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">100</span>; j ++)&#123;</div><div class="line">f[i][j] = f[i - <span class="number">1</span>][j];<span class="comment">//f[i][j]表示到第i时刻，能力达到j的最多滑雪次数 </span></div><div class="line"><span class="keyword">if</span>(h[i][j]) f[i][j] = max(f[i][j], g[h[i][j]]);</div><div class="line"><span class="keyword">if</span>(i - w[j] &gt;= <span class="number">0</span>) f[i][j] = max(f[i][j], f[i - w[j]][j] + <span class="number">1</span>);</div><div class="line">g[i] = max(g[i], f[i][j]);<span class="comment">//g[i]表示到第i时刻，最多可以滑雪的次数 </span></div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, g[t]);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">work();</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 知识点 </category>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>bzoj2101 usaco Treasure Chest 题解</title>
      <link href="/2018/02/07/bzoj2101-usaco-Treasure-Chest-%E9%A2%98%E8%A7%A3/"/>
      <content type="html"><![CDATA[<h1 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h1><p>Bessie and Bonnie have found a treasure chest full of marvelous gold coins! Being cows, though, they can’t just walk into a store and buy stuff, so instead they decide to have some fun with the coins. The N (1 &lt;= N &lt;= 5,000) coins, each with some value C_i (1 &lt;= C_i &lt;= 5,000) are placed in a straight line. Bessie and Bonnie take turns, and for each cow’s turn, she takes exactly one coin off of either the left end or the right end of the line. The game ends when there are no coins left. Bessie and Bonnie are each trying to get as much wealth as possible for themselves. Bessie goes first. Help her figure out the maximum value she can win, assuming that both cows play optimally. Consider a game in which four coins are lined up with these values: 30 25 10 35 Consider this game sequence: Bessie Bonnie New Coin Player Side CoinValue Total Total Line Bessie Right 35 35 0 30 25 10 Bonnie Left 30 35 30 25 10 Bessie Left 25 60 30 10 Bonnie Right 10 60 40 — This is the best game Bessie can play.</p><p>  贝西和邦妮找到了一个藏宝箱，里面都是金币！但是身为两头牛，她们不能到商店里把金币换成好吃的东西，于是她们只能用这些金币来玩游戏了。</p><p>​    藏宝箱里一共有N枚金币，第i枚金币的价值是Ci。贝西和邦妮把金币排成一条直线，她们轮流取金币，看谁取到的钱最多。贝西先取，每次只能取一枚金币，而且只能选择取直线两头的金币，不能取走中间的金币。当所有金币取完之后，游戏就结束了。</p><p>​    贝西和邦妮都是非常聪明的，她们会采用最好的办法让自己取到的金币最多。请帮助贝西计算一下，她最多能得到的金币的总价值是多少？</p><h1 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h1><p>这道题看一看，就大概知道是dp（虽说我第一反应是博弈论吧。。。）</p><p>有一个二维的dp很好想，$f_{i,j}$表示i-j段，贝西先手可以拿到的最大价值，那么，转移方程式就是：</p><p>$f<em>{i,j}=max(sum</em>{i,j}-f<em>{i+1,j},\ \ sum</em>{i,j}-f_{i,j-1})$</p><p>然后呢，你会发现它MLE了，所以我们肯定要用一维搞定。</p><p>仔细想想，会发现j这维是冗余的。我们用$f<em>i$表示i-i+j这段贝西先手可以拿到的最大价值，那么我们先枚举这个j即可。因为：$f_i=max(sum</em>{i,j}-f<em>i,\ \ sum</em>{i,j}-f[i+1])$此时括号里面的f[i]和f[i+1]都是长度为j-1的，所以这样是可以的。</p><h1 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> LF;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(x, y) memset(x, y, sizeof(x))</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">5015</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> c[MAXN], s[MAXN], f[MAXN];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">int</span> r = <span class="number">0</span>, z = <span class="number">1</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line"><span class="keyword">while</span>(ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch == <span class="string">'-'</span>) z = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">while</span>(ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>)&#123;r = r * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">return</span> r * z;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">int</span> n = read();</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) c[i] = read();</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) f[i] = c[i];</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) s[i] = s[i - <span class="number">1</span>] + c[i];</div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">for(int i = n; i &gt;= 1; i --)</span></div><div class="line"><span class="comment">for(int j = i + 1; j &lt;= n; j ++)</span></div><div class="line"><span class="comment">f[i][j] = max(c[i] - f[i + 1][j] + s[j] - s[i], c[j] - f[i][j - 1] + s[j - 1] - s[i - 1]);</span></div><div class="line"><span class="comment">printf("%d\n", f[1][n]);</span></div><div class="line"><span class="comment">*/</span></div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j ++)</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n - j; i ++)</div><div class="line">f[i] = s[i + j] - s[i - <span class="number">1</span>] - min(f[i + <span class="number">1</span>], f[i]);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, f[<span class="number">1</span>]);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">work();</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 知识点 </category>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>bzoj1036 树的统计 题解</title>
      <link href="/2018/02/07/bzoj1036-%E6%A0%91%E7%9A%84%E7%BB%9F%E8%AE%A1-%E9%A2%98%E8%A7%A3/"/>
      <content type="html"><![CDATA[<h1 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h1><p>一棵树上有n个节点，编号分别为1到n，每个节点都有一个权值w。</p><p>我们将以下面的形式来要求你对这棵树完成一些操作：</p><p>I. CHANGE u t : 把结点u的权值改为t</p><p>II. QMAX u v: 询问从点u到点v的路径上的节点的最大权值</p><p>III. QSUM u v: 询问从点u到点v的路径上的节点的权值和</p><p>注意：从点u到点v的路径上的节点包括u和v本身</p><h1 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h1><p>树剖模板题。</p><h1 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i, a, b) for(LL i = a; i &lt;= b; i ++)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REPG(i, x) for(LL i = head[x]; i; i = g[i].nxt)</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(x, y) memset(x, y, sizeof(x));</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> lson o &lt;&lt; 1</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rson o &lt;&lt; 1 | 1</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x7fffffff</span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> LF;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">Max</span><span class="params">(LL a, LL b)</span></span>&#123;<span class="keyword">return</span> a &gt; b ? a : b;&#125;</div><div class="line"><span class="function">LL <span class="title">Min</span><span class="params">(LL a, LL b)</span></span>&#123;<span class="keyword">return</span> a &lt; b ? a : b;&#125;</div><div class="line"><span class="function">LL <span class="title">abs</span><span class="params">(LL x)</span></span>&#123;<span class="keyword">return</span> x &gt; <span class="number">0</span> ? x : -x;&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> LL MAXN = <span class="number">1e6</span> + <span class="number">15</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span>LL to, nxt;&#125;g[MAXN &lt;&lt; <span class="number">1</span>];</div><div class="line">LL head[MAXN], cnt = <span class="number">0</span>, tt = <span class="number">0</span>, top[MAXN], size[MAXN], w[MAXN], wt[MAXN], s[MAXN], sm[MAXN], fa[MAXN], son[MAXN], id[MAXN], dep[MAXN], n, m;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(LL u, LL v)</span></span>&#123;g[++ cnt] = (Edge)&#123;v, head[u]&#125;; head[u] = cnt;&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(LL u, LL v)</span></span>&#123;add(u, v); add(v, u);&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">    LL r = <span class="number">0</span>, z = <span class="number">1</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line">    <span class="keyword">while</span>(ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch == <span class="string">'-'</span>) z = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">while</span>(ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>)&#123;r = r * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">return</span> r * z;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">up</span><span class="params">(LL o)</span></span>&#123;</div><div class="line">    s[o] = s[lson] + s[rson];</div><div class="line">    sm[o] = max(sm[lson], sm[rson]);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(LL o, LL l, LL r)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(l == r)&#123;s[o] = sm[o] = wt[l]; <span class="keyword">return</span> ;&#125;</div><div class="line">    LL mid = l + r &gt;&gt; <span class="number">1</span>;</div><div class="line">    build(lson, l, mid);</div><div class="line">    build(rson, mid + <span class="number">1</span>, r);</div><div class="line">    up(o);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(LL o, LL l, LL r, LL x, LL c)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(l == r)&#123;s[o] = sm[o] = c; <span class="keyword">return</span> ;&#125;</div><div class="line">    LL mid = l + r &gt;&gt; <span class="number">1</span>;</div><div class="line">    <span class="keyword">if</span>(x &lt;= mid) modify(lson, l, mid, x, c);</div><div class="line">    <span class="keyword">if</span>(x &gt; mid) modify(rson, mid + <span class="number">1</span>, r, x, c);</div><div class="line">    up(o);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">querysum</span><span class="params">(LL o, LL l, LL r, LL x, LL y)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(x &lt;= l &amp;&amp; r &lt;= y) <span class="keyword">return</span> s[o];</div><div class="line">    LL mid = l + r &gt;&gt; <span class="number">1</span>, ret = <span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span>(x &lt;= mid) ret += querysum(lson, l, mid, x, y);</div><div class="line">    <span class="keyword">if</span>(y &gt; mid) ret += querysum(rson, mid + <span class="number">1</span>, r, x, y);</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">querymax</span><span class="params">(LL o, LL l, LL r, LL x, LL y)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(x &lt;= l &amp;&amp; r &lt;= y) <span class="keyword">return</span> sm[o];</div><div class="line">    LL mid = l + r &gt;&gt; <span class="number">1</span>, ret = <span class="number">-2e9</span>;</div><div class="line">    <span class="keyword">if</span>(x &lt;= mid) ret = max(ret, querymax(lson, l, mid, x, y));</div><div class="line">    <span class="keyword">if</span>(y &gt; mid) ret = max(ret, querymax(rson, mid + <span class="number">1</span>, r, x, y));</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(LL u, LL fafa, LL dd)</span></span>&#123;</div><div class="line">    size[u] = <span class="number">1</span>; dep[u] = dd; fa[u] = fafa;</div><div class="line">    <span class="keyword">for</span>(LL i = head[u]; i; i = g[i].nxt)&#123;</div><div class="line">        LL v = g[i].to; <span class="keyword">if</span>(v == fafa) <span class="keyword">continue</span>;</div><div class="line">        dfs1(v, u, dd + <span class="number">1</span>); size[u] += size[v];</div><div class="line">        <span class="keyword">if</span>(size[v] &gt; size[son[u]]) son[u] = v;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(LL u, LL topf)</span></span>&#123;</div><div class="line">    id[u] = ++ tt; wt[tt] = w[u]; top[u] = topf;</div><div class="line">    <span class="keyword">if</span>(son[u]) dfs2(son[u], topf);</div><div class="line">    <span class="keyword">for</span>(LL i = head[u]; i; i = g[i].nxt)&#123;</div><div class="line">        LL v = g[i].to; <span class="keyword">if</span>(v == fa[u] || v == son[u]) <span class="keyword">continue</span>;</div><div class="line">        dfs2(v, v);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">qmax</span><span class="params">(LL x, LL y)</span></span>&#123;</div><div class="line">    LL ret = <span class="number">-2e9</span>;</div><div class="line">    <span class="keyword">while</span>(top[x] != top[y])&#123;</div><div class="line">        <span class="keyword">if</span>(dep[top[x]] &lt; dep[top[y]]) swap(x, y);</div><div class="line">        ret = max(ret, querymax(<span class="number">1</span>, <span class="number">1</span>, tt, id[top[x]], id[x]));</div><div class="line">        x = fa[top[x]];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(dep[x] &gt; dep[y]) swap(x, y);</div><div class="line">    ret = max(ret, querymax(<span class="number">1</span>, <span class="number">1</span>, tt, id[x], id[y]));</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">qsum</span><span class="params">(LL x, LL y)</span></span>&#123;</div><div class="line">    LL ret = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span>(top[x] != top[y])&#123;</div><div class="line">        <span class="keyword">if</span>(dep[top[x]] &lt; dep[top[y]]) swap(x, y);</div><div class="line">        ret += querysum(<span class="number">1</span>, <span class="number">1</span>, tt, id[top[x]], id[x]);</div><div class="line">        x = fa[top[x]];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(dep[x] &gt; dep[y]) swap(x, y);</div><div class="line">    ret += querysum(<span class="number">1</span>, <span class="number">1</span>, tt, id[x], id[y]);</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">    n = read();</div><div class="line">    <span class="keyword">for</span>(LL i = <span class="number">1</span>; i &lt; n; i ++)&#123;</div><div class="line">        LL u = read(), v = read();</div><div class="line">        add_edge(u, v);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(LL i = <span class="number">1</span>; i &lt;= n; i ++) w[i] = read();</div><div class="line">    dfs1(<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>); dfs2(<span class="number">1</span>, <span class="number">1</span>); build(<span class="number">1</span>, <span class="number">1</span>, n);</div><div class="line">    m = read();</div><div class="line">    <span class="keyword">while</span>(m --)&#123;</div><div class="line">        <span class="keyword">char</span> ch[<span class="number">25</span>]; <span class="built_in">scanf</span>(<span class="string">"%s"</span>, ch + <span class="number">1</span>); LL x = read(), y = read();</div><div class="line">        <span class="keyword">if</span>(ch[<span class="number">1</span>] == <span class="string">'Q'</span> &amp;&amp; ch[<span class="number">2</span>] == <span class="string">'M'</span>) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, qmax(x, y));</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(ch[<span class="number">1</span>] == <span class="string">'Q'</span> &amp;&amp; ch[<span class="number">2</span>] == <span class="string">'S'</span>) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, qsum(x, y));</div><div class="line">        <span class="keyword">else</span> modify(<span class="number">1</span>, <span class="number">1</span>, tt, id[x], y);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    work();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 知识点 </category>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
            <tag> 树链剖分 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Codeforces 772C Vulnerable Kerbals 题解</title>
      <link href="/2017/12/28/Codeforces-772C%E9%A2%98%E8%A7%A3/"/>
      <content type="html"><![CDATA[<h1 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h1><h2 id="原题："><a href="#原题：" class="headerlink" title="原题："></a>原题：</h2><p>You are given an integer <em>m</em>, and a list of <em>n</em> distinct integers between 0 and <em>m</em> - 1.</p><p>You would like to construct a sequence satisfying the properties:</p><ul><li>Each element is an integer between 0 and <em>m</em> - 1, inclusive.</li><li>All prefix products of the sequence modulo <em>m</em> are distinct.</li><li>No prefix product modulo <em>m</em> appears as an element of the input list.</li><li>The length of the sequence is maximized.</li></ul><p>Construct any sequence satisfying the properties above.</p><p>Input</p><p>The first line of input contains two integers <em>n</em> and <em>m</em> (0 ≤ <em>n</em> &lt; <em>m</em> ≤ 200 000) — the number of forbidden prefix products and the modulus.</p><p>If <em>n</em> is non-zero, the next line of input contains <em>n</em> distinct integers between 0 and <em>m</em> - 1, the forbidden prefix products. If <em>n</em> is zero, this line doesn’t exist.</p><p>Output</p><p>On the first line, print the number <em>k</em>, denoting the length of your sequence.</p><p>On the second line, print <em>k</em> space separated integers, denoting your sequence.</p><h2 id="简要翻译："><a href="#简要翻译：" class="headerlink" title="简要翻译："></a>简要翻译：</h2><p>大概就是说，给你两个数n,m，然后再给你n个数，让你构造一个尽量长的序列，使得所有前缀积都不等于那n个数，并且输出这个序列。</p><h1 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h1><p>这道题是数论+DAG最长路</p><p>首先，我们设a为当前的序列的所有数的的乘积，这时加进来一个x，这样积就变为了b，那么我们可以用这样一个式子表示一下：ax%m=b，即$ax\equiv b (mod\ \ m)$。根据裴蜀定理，我们可以知道，当且仅当$gcd(a,m)|gcd(b,m)$时，这个同余方程有解，这时候我们就从a向b连一条边。由于有一些数与m的gcd相等，所以我们可以缩点。</p><p>缩点之后呢，显然就变成了一个DAG，这时候我们跑个最长路就可以了。</p><p>跑完最长路，我们记录下来了一条路径，但这不是最终的答案，因为我们记的是前缀积，通过前缀积之间的同余关系连的边，所以我们这时候要解这个同余方程，解完之后就是答案，那么怎么解呢？显然是用exgcd啊，这个要不会的话，还是回去看看NOIP2012 D2 T1同余方程吧。</p><h1 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> LF;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">complex</span>&lt;LF&gt; cd;</div><div class="line"><span class="keyword">typedef</span> pair &lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; abcd;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(x, y) memset(x, y, sizeof(x))</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x7fffffff</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">2e5</span> + <span class="number">15</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> f[MAXN], g[MAXN], pre[MAXN], a[MAXN], ans[MAXN], n, m, cnt = <span class="number">0</span>;</div><div class="line"><span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; b[MAXN];</div><div class="line"><span class="keyword">bool</span> vis[MAXN];</div><div class="line"></div><div class="line"><span class="function">abcd <span class="title">exgcd</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</div><div class="line"><span class="keyword">if</span>(!b) <span class="keyword">return</span> abcd(<span class="number">1</span>, <span class="number">0</span>);</div><div class="line">abcd t = exgcd(b, a % b);</div><div class="line"><span class="keyword">return</span> abcd(t.second, t.first - a / b * t.second);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">solve</span><span class="params">(LL a, LL b)</span></span>&#123;</div><div class="line">abcd t = exgcd(a, m); <span class="keyword">int</span> d = t.first * a + t.second * m;</div><div class="line"><span class="keyword">return</span> ((b / d) * (t.first % m + m) % m) % m;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">int</span> r = <span class="number">0</span>, z = <span class="number">1</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line"><span class="keyword">while</span>(ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch == <span class="string">'-'</span>) z = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">while</span>(ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>)&#123;r = r * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">return</span> r * z;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">n = read(), m = read();</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) a[i] = read(), vis[a[i]] = <span class="number">1</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>, d; i &lt; m; i ++)&#123;</div><div class="line"><span class="keyword">if</span>(!vis[i])&#123;</div><div class="line">d = __gcd(i, m); <span class="keyword">int</span> tmp = d % m;</div><div class="line">g[tmp] ++; f[tmp] ++; b[tmp].push_back(i);</div><div class="line">&#125;</div><div class="line">&#125; clr(pre, <span class="number">-1</span>);</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; m; i ++)</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = i + i; j &lt;= m; j += i)&#123;</div><div class="line"><span class="keyword">int</span> tmp = j % m;</div><div class="line"><span class="keyword">if</span>(f[tmp] &lt; g[tmp] + f[i])&#123;</div><div class="line">f[tmp] = max(f[tmp], g[tmp] + f[i]), pre[tmp] = i;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> k = <span class="number">0</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j ++) <span class="keyword">if</span>(!vis[j] &amp;&amp; f[j] &gt; f[k]) k = j;</div><div class="line"><span class="keyword">while</span>(k != <span class="number">-1</span>)&#123;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x:b[k]) ans[++ cnt] = x;</div><div class="line">k = pre[k];</div><div class="line">&#125;</div><div class="line">reverse(ans + <span class="number">1</span>, ans + cnt + <span class="number">1</span>);</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = cnt; i &gt; <span class="number">1</span>; i --) ans[i] = solve(ans[i - <span class="number">1</span>], ans[i]);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, cnt);</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cnt; i ++) <span class="built_in">printf</span>(<span class="string">"%d "</span>, ans[i]);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">work();</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 知识点 </category>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
            <tag> 最长路 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>bzoj 4455 小星星 题解</title>
      <link href="/2017/12/28/bzoj-4455%E9%A2%98%E8%A7%A3/"/>
      <content type="html"><![CDATA[<h1 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>小Y是一个心灵手巧的女孩子，她喜欢手工制作一些小饰品。她有n颗小星星，用m条彩色的细线串了起来，每条细线连着两颗小星星。</p><p>有一天她发现，她的饰品被破坏了，很多细线都被拆掉了。这个饰品只剩下了n?1条细线，但通过这些细线，这颗小星星还是被串在一起，也就是这些小星星通过这些细线形成了树。小Y找到了这个饰品的设计图纸，她想知道现在饰品中的小星星对应着原来图纸上的哪些小星星。如果现在饰品中两颗小星星有细线相连，那么要求对应的小星星原来的图纸上也有细线相连。小Y想知道有多少种可能的对应方式。</p><p>只有你告诉了她正确的答案，她才会把小饰品做为礼物送给你呢。</p><h2 id="输入输出格式"><a href="#输入输出格式" class="headerlink" title="输入输出格式"></a>输入输出格式</h2><h3 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h3><p>第一行包含个2正整数n,m，表示原来的饰品中小星星的个数和细线的条数。接下来m行，每行包含2个正整数u,v，表示原来的饰品中小星星u和v通过细线连了起来。这里的小星星从1开始标号。保证u&ne;v，且每对小星星之间最多只有一条细线相连。接下来n-1行，每行包含个2正整数u,v，表示现在的饰品中小星星u和v通过细线连了起来。保证这些小星星通过细线可以串在一起。n&lt;=17,m&lt;=n*(n-1)/2</p><h3 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h3><p>输出共1行，包含一个整数表示可能的对应方式的数量。如果不存在可行的对应方式则输出0。</p><h1 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h1><p>首先我们考虑最最暴力的做法：考虑每个点合不合法，dfs判断。时间复杂度$O(n^n)$</p><p>我们再考虑一些优化，这是我们想到了dp。 $f[i][j]$表示以i为根的子树中，使用了原图中的哪些点的状态（j，装压，即用二进制表示）。初始值$f[i][j]=1$，然后dfs时枚举子集，暴力合并,转移方程式$f[u][i|j]+=f[v][j]$，其中v为u的儿子，i为初始状态的子集，j为当前枚举的子集。时间复杂度$O(3^nn^2)$</p><p>不过显然这种dp不太行，那么我们在此基础上优化一下。</p><p>上面的dp合并时肯定保证了合法性（映射一一对应），如果我们不考虑合法性的话，最后容斥一下就可以了。</p><p>$f[i][j]$计算的是子树中，i点和原图中j点对应的方案数，合并的时候两个被看做是原图中的点有连边才能合并。</p><p>怎么算答案？我们可以发现$ans=\sum剩一个的-\sum剩两个的+\sum剩三个的…$</p><p>举个栗子，3个数</p><p>我们首先+3个都用了的方案，但是有不合法的，这时我们-用了2个的，但是右减多了，这是我们再+用了1个的，这就是答案。</p><h1 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> LF;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">complex</span>&lt;LF&gt; cd;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(x, y) memset(x, y, sizeof(x))</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x7fffffff</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">115</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span><span class="keyword">int</span> to, nxt;&#125;g[MAXN * MAXN &lt;&lt; <span class="number">1</span>];</div><div class="line"><span class="keyword">int</span> head[MAXN], cnt = <span class="number">0</span>, a[MAXN], tot = <span class="number">0</span>, n, m;</div><div class="line">LL f[MAXN][MAXN], lim, ans = <span class="number">0</span>; <span class="keyword">bool</span> mmap[MAXN][MAXN];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span>&#123;g[++ cnt] = (Edge)&#123;v, head[u]&#125;; head[u] = cnt;&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span>&#123;add(u, v); add(v, u);&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">int</span> r = <span class="number">0</span>, z = <span class="number">1</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line"><span class="keyword">while</span>(ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch == <span class="string">'-'</span>) z = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">while</span>(ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>)&#123;r = r * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">return</span> r * z;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> fafa)</span></span>&#123;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; i; i = g[i].nxt)&#123;</div><div class="line"><span class="keyword">int</span> v = g[i].to; <span class="keyword">if</span>(v == fafa) <span class="keyword">continue</span>;</div><div class="line">dfs(v, u);</div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= tot; i ++)&#123;</div><div class="line">f[u][i] = <span class="number">1</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = head[u]; j; j = g[j].nxt)&#123;</div><div class="line">LL tmp = <span class="number">0</span>; <span class="keyword">int</span> v = g[j].to; <span class="keyword">if</span>(v == fafa) <span class="keyword">continue</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= tot; k ++) <span class="keyword">if</span>(mmap[a[i]][a[k]]) tmp += f[v][k];</div><div class="line">f[u][i] *= tmp;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m); lim = (LL)(<span class="number">1</span> &lt;&lt; n);</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i ++)&#123; <span class="keyword">int</span> u, v;</div><div class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;u, &amp;v);</div><div class="line">mmap[u][v] = mmap[v][u] = <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i ++)&#123; <span class="keyword">int</span> u, v;</div><div class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;u, &amp;v);</div><div class="line">add_edge(u, v);</div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span>(LL i = <span class="number">1</span>; i &lt; lim; i ++)&#123;</div><div class="line">tot = <span class="number">0</span>; LL tmp = <span class="number">0</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j ++) <span class="keyword">if</span>((i &gt;&gt; j) &amp; <span class="number">1</span>) a[++ tot] = j + <span class="number">1</span>;</div><div class="line">dfs(<span class="number">1</span>, <span class="number">0</span>);</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= tot; j ++) tmp += f[<span class="number">1</span>][j];</div><div class="line">ans += (LL)(((n - tot) &amp; <span class="number">1</span>) ? -tmp : tmp);</div><div class="line">&#125;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">work();</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 知识点 </category>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
            <tag> 树形dp </tag>
            
            <tag> 容斥原理 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>bzoj4196 软件包管理 题解</title>
      <link href="/2017/12/27/bzoj4196%E9%A2%98%E8%A7%A3/"/>
      <content type="html"><![CDATA[<h1 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>Linux用户和OSX用户一定对软件包管理器不会陌生。通过软件包管理器，你可以通过一行命令安装某一个软件包，然后软件包管理器会帮助你从软件源下载软件包，同时自动解决所有的依赖（即下载安装这个软件包的安装所依赖的其它软件包），完成所有的配置。Debian/Ubuntu使用的apt-get，Fedora/CentOS使用的yum，以及OSX下可用的homebrew都是优秀的软件包管理器。</p><p>你决定设计你自己的软件包管理器。不可避免地，你要解决软件包之间的依赖问题。如果软件包A依赖软件包B，那么安装软件包A以前，必须先安装软件包B。同时，如果想要卸载软件包B，则必须卸载软件包A。现在你已经获得了所有的软件包之间的依赖关系。而且，由于你之前的工作，除0号软件包以外，在你的管理器当中的软件包都会依赖一个且仅一个软件包，而0号软件包不依赖任何一个软件包。依赖关系不存在环（若有m(m≥2)个软件包A1,A2,A3,⋯,Am，其中A1依赖A2，A2依赖A3，A3依赖A4，……，A[m-1]依赖Am，而Am依赖A1，则称这m个软件包的依赖关系构成环），当然也不会有一个软件包依赖自己。</p><p>现在你要为你的软件包管理器写一个依赖解决程序。根据反馈，用户希望在安装和卸载某个软件包时，快速地知道这个操作实际上会改变多少个软件包的安装状态（即安装操作会安装多少个未安装的软件包，或卸载操作会卸载多少个已安装的软件包），你的任务就是实现这个部分。注意，安装一个已安装的软件包，或卸载一个未安装的软件包，都不会改变任何软件包的安装状态，即在此情况下，改变安装状态的软件包数为0。</p><h2 id="输入输出格式"><a href="#输入输出格式" class="headerlink" title="输入输出格式"></a>输入输出格式</h2><p>输入格式：</p><p>从文件manager.in中读入数据。</p><p>输入文件的第1行包含1个整数n，表示软件包的总数。软件包从0开始编号。</p><p>随后一行包含n−1个整数，相邻整数之间用单个空格隔开，分别表示1,2,3,⋯,n−2,n−1号软件包依赖的软件包的编号。</p><p>接下来一行包含1个整数q，表示询问的总数。之后q行，每行1个询问。询问分为两种：</p><p>install x：表示安装软件包x</p><p>uninstall x：表示卸载软件包x</p><p>你需要维护每个软件包的安装状态，一开始所有的软件包都处于未安装状态。</p><p>对于每个操作，你需要输出这步操作会改变多少个软件包的安装状态，随后应用这个操作（即改变你维护的安装状态）。</p><p>输出格式：</p><p>输出到文件manager.out中。</p><p>输出文件包括q行。</p><p>输出文件的第i行输出1个整数，为第i步操作中改变安装状态的软件包数。</p><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p>这道题就是裸的树链剖分。每个有依赖关系的都练一条边，0号为根。</p><p>install的时候，就相当于把这个点到根的这条路径上的所有点的点权赋成1,</p><p>uninstall的时候，就相当于把这个点为根的子树中的点的点权全部赋成0。</p><p>这里我是在每次change前算了一个总数，change后再算一个两个sum的abs就是答案。</p><p><strong>注意：</strong>lazy赋值要赋成不是1和0的数！</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i, a, b) for(int i = a; i &lt;= b; i ++)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REPG(i, x) for(int i = head[x]; i; i = g[i].nxt)</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(x, y) memset(x, y, sizeof(x));</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> lson o &lt;&lt; 1</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rson o &lt;&lt; 1 | 1</span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> LF;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">Max</span><span class="params">(LL a, LL b)</span></span>&#123;<span class="keyword">return</span> a &gt; b ? a : b;&#125;</div><div class="line"><span class="function">LL <span class="title">Min</span><span class="params">(LL a, LL b)</span></span>&#123;<span class="keyword">return</span> a &lt; b ? a : b;&#125;</div><div class="line"><span class="function">LL <span class="title">abs</span><span class="params">(LL x)</span></span>&#123;<span class="keyword">return</span> x &gt; <span class="number">0</span> ? x : -x;&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">4e5</span> + <span class="number">15</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span><span class="keyword">int</span> to, nxt;&#125;g[MAXN &lt;&lt; <span class="number">1</span>];</div><div class="line"><span class="keyword">int</span> head[MAXN], cnt = <span class="number">0</span>, tt = <span class="number">0</span>, id[MAXN], dep[MAXN], size[MAXN], son[MAXN], fa[MAXN], top[MAXN], s[MAXN], lazy[MAXN];</div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span>&#123;g[++ cnt] = (Edge)&#123;v, head[u]&#125;; head[u] = cnt;&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span>&#123;add(u, v); add(v, u);&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> r = <span class="number">0</span>, z = <span class="number">1</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line">    <span class="keyword">while</span>(ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch == <span class="string">'-'</span>) z = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">while</span>(ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>)&#123;r = r * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">return</span> r * z;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">up</span><span class="params">(<span class="keyword">int</span> o)</span></span>&#123;s[o] = s[lson] + s[rson];&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">down</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(lazy[o] &lt; <span class="number">0</span>) <span class="keyword">return</span> ;</div><div class="line">    lazy[lson] = lazy[o]; lazy[rson] = lazy[o];</div><div class="line">    <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</div><div class="line">    s[lson] = lazy[o] * (mid - l + <span class="number">1</span>);</div><div class="line">    s[rson] = lazy[o] * (r - mid);</div><div class="line">    lazy[o] = <span class="number">-1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> c)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(l &gt; r || x &gt; r || l &gt; y) <span class="keyword">return</span> ;</div><div class="line">    <span class="keyword">if</span>(x &lt;= l &amp;&amp; r &lt;= y)&#123;</div><div class="line">        lazy[o] = c; s[o] = (r - l + <span class="number">1</span>) * c;</div><div class="line">        <span class="keyword">return</span> ;</div><div class="line">    &#125;</div><div class="line">    down(o, l, r);</div><div class="line">    <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</div><div class="line">    <span class="keyword">if</span>(x &lt;= mid) modify(lson, l, mid, x, y, c);</div><div class="line">    <span class="keyword">if</span>(y &gt; mid) modify(rson, mid + <span class="number">1</span>, r, x, y, c);</div><div class="line">    up(o);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(l == r)&#123;s[o] = <span class="number">0</span>; <span class="keyword">return</span> ;&#125;</div><div class="line">    <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</div><div class="line">    build(lson, l, mid);</div><div class="line">    build(rson, mid + <span class="number">1</span>, r);</div><div class="line">    up(o);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span>(x &lt;= l &amp;&amp; r &lt;= y)&#123;<span class="keyword">return</span> s[o];&#125;</div><div class="line">    down(o, l, r);</div><div class="line">    <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</div><div class="line">    <span class="keyword">if</span>(x &lt;= mid) ret += query(lson, l, mid, x, y);</div><div class="line">    <span class="keyword">if</span>(y &gt; mid) ret += query(rson, mid + <span class="number">1</span>, r, x, y);</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">updr</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</div><div class="line">    <span class="keyword">while</span>(top[x] != top[y])&#123;</div><div class="line">        <span class="keyword">if</span>(dep[top[x]] &lt; dep[top[y]]) swap(x, y);</div><div class="line">        modify(<span class="number">1</span>, <span class="number">1</span>, n, id[top[x]], id[x], <span class="number">1</span>);</div><div class="line">        x = fa[top[x]];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(dep[x] &gt; dep[y]) swap(x, y);</div><div class="line">    modify(<span class="number">1</span>, <span class="number">1</span>, n, id[x], id[y], <span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">qr</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span>(top[x] != top[y])&#123;</div><div class="line">        <span class="keyword">if</span>(dep[top[x]] &lt; dep[top[y]]) swap(x, y);</div><div class="line">        ans += query(<span class="number">1</span>, <span class="number">1</span>, n, id[top[x]], id[x]);</div><div class="line">        x = fa[top[x]];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(dep[x] &gt; dep[y]) swap(x, y);</div><div class="line">    ans += query(<span class="number">1</span>, <span class="number">1</span>, n, id[x], id[y]);</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">upds</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    modify(<span class="number">1</span>, <span class="number">1</span>, n, id[x], id[x] + size[x] - <span class="number">1</span>, <span class="number">0</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">qs</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> query(<span class="number">1</span>, <span class="number">1</span>, n, id[x], id[x] + size[x] - <span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> fafa, <span class="keyword">int</span> dd)</span></span>&#123;</div><div class="line">    dep[u] = dd; fa[u] = fafa; size[u] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; i; i = g[i].nxt)&#123;</div><div class="line">        <span class="keyword">int</span> v = g[i].to; <span class="keyword">if</span>(v == fafa) <span class="keyword">continue</span>;</div><div class="line">        dfs1(v, u, dd + <span class="number">1</span>);</div><div class="line">        size[u] += size[v];</div><div class="line">        <span class="keyword">if</span>(size[v] &gt; size[son[u]]) son[u] = v;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> fafa)</span></span>&#123;</div><div class="line">    id[u] = ++ tt; top[u] = fafa;</div><div class="line">    <span class="keyword">if</span>(!son[u]) <span class="keyword">return</span> ;</div><div class="line">    dfs2(son[u], fafa);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; i; i = g[i].nxt)&#123;</div><div class="line">        <span class="keyword">int</span> v = g[i].to; <span class="keyword">if</span>(v == fa[u] || v == son[u]) <span class="keyword">continue</span>;</div><div class="line">        dfs2(v, v);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">    n = read(); clr(lazy, <span class="number">-1</span>);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i ++)&#123;</div><div class="line">        <span class="keyword">int</span> x = read() + <span class="number">1</span>;</div><div class="line">        add_edge(x, i);</div><div class="line">    &#125;</div><div class="line">    dfs1(<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>); dfs2(<span class="number">1</span>, <span class="number">1</span>);</div><div class="line">    build(<span class="number">1</span>, <span class="number">1</span>, n); m = read();</div><div class="line">    <span class="keyword">while</span>(m --)&#123;</div><div class="line">        <span class="keyword">char</span> ch[<span class="number">10</span>]; <span class="keyword">int</span> x;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, ch + <span class="number">1</span>); x = read() + <span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span>(ch[<span class="number">1</span>] == <span class="string">'i'</span>)&#123;</div><div class="line">            <span class="keyword">int</span> tmp1 = qr(<span class="number">1</span>, x);</div><div class="line">            updr(<span class="number">1</span>, x);</div><div class="line">            <span class="keyword">int</span> tmp2 = qr(<span class="number">1</span>, x);</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, <span class="built_in">abs</span>(tmp2 - tmp1));</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">int</span> tmp1 = qs(x);</div><div class="line">            upds(x);</div><div class="line">            <span class="keyword">int</span> tmp2 = qs(x);</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, <span class="built_in">abs</span>(tmp1 - tmp2));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    work();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 知识点 </category>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
            <tag> 树链剖分 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>网络流拓展</title>
      <link href="/2017/12/27/%E7%BD%91%E7%BB%9C%E6%B5%81%E6%8B%93%E5%B1%95/"/>
      <content type="html"><![CDATA[<h1 id="无源汇有上下界可行流"><a href="#无源汇有上下界可行流" class="headerlink" title="无源汇有上下界可行流"></a>无源汇有上下界可行流</h1><h2 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h2><h3 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h3><p>这是一道模板题。</p><p>n 个点，m 条边，每条边 e 有一个流量下界 lower(e) 和流量上界 upper(e) ，求一种可行方案使得在所有点满足流量平衡条件的前提下，所有边满足流量限制。</p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><p>第一行两个正整数 n 、m。</p><p>之后的 m 行，每行四个整数 s 、t 、lower、upper。</p><h3 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h3><p>如果无解，输出一行 <code>NO</code>。</p><p>否则第一行输出 <code>YES</code>，之后 m mm 行每行一个整数，表示每条边的流量。</p><h3 id="样例："><a href="#样例：" class="headerlink" title="样例："></a>样例：</h3><h4 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入 1"></a>样例输入 1</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">4 6</div><div class="line">1 2 1 2</div><div class="line">2 3 1 2</div><div class="line">3 4 1 2</div><div class="line">4 1 1 2</div><div class="line">1 3 1 2</div><div class="line">4 2 1 2</div></pre></td></tr></table></figure><h4 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出 1"></a>样例输出 1</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">NO</div></pre></td></tr></table></figure><h4 id="样例输入-2"><a href="#样例输入-2" class="headerlink" title="样例输入 2"></a>样例输入 2</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">4 6</div><div class="line">1 2 1 3</div><div class="line">2 3 1 3</div><div class="line">3 4 1 3</div><div class="line">4 1 1 3</div><div class="line">1 3 1 3</div><div class="line">4 2 1 3</div></pre></td></tr></table></figure><h4 id="样例输出-2"><a href="#样例输出-2" class="headerlink" title="样例输出 2"></a>样例输出 2</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">YES</div><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">2</div><div class="line">1</div><div class="line">1</div></pre></td></tr></table></figure><h2 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h2><p>我们考虑把每条弧的下限都改为0，那么上限就是upper-lower。</p><p>这时候我们不一定能满足进出流量相等，怎么办呢？</p><p>我们再设一个超级源和超级汇，先算出每个点的度数，然后$du[i]<0$的向超级汇连一条容量为-du[i]的弧；超级源下向每一个$du[i]>0$的连一条容量为du[i]的边。</0$的向超级汇连一条容量为-du[i]的弧；超级源下向每一个$du[i]></p><p>然后跑最短路就可以了。</p><h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> LF;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">complex</span> &lt;LF&gt; cd;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(x, y) memset(x, y, sizeof(x))</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x7fffffff</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e6</span> + <span class="number">15</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXM = <span class="number">1e6</span> + <span class="number">15</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span><span class="keyword">int</span> to, nxt, c, id;&#125;g[MAXM &lt;&lt; <span class="number">1</span>];</div><div class="line"><span class="keyword">int</span> head[MAXN], cnt = <span class="number">-1</span>, d[MAXN], cur[MAXN], du[MAXN], dn[MAXN], anss[MAXM &lt;&lt; <span class="number">1</span>], n, m, s, t;</div><div class="line"><span class="built_in">queue</span> &lt;<span class="keyword">int</span>&gt; q; <span class="keyword">bool</span> flag = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> c, <span class="keyword">int</span> id)</span></span>&#123;g[++ cnt] = (Edge)&#123;v, head[u], c, id&#125;; head[u] = cnt;&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> c, <span class="keyword">int</span> id)</span></span>&#123;add(u, v, c, id); add(v, u, <span class="number">0</span>, id);&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">int</span> r = <span class="number">0</span>, z = <span class="number">1</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line"><span class="keyword">while</span>(ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch == <span class="string">'-'</span>) z = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">while</span>(ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>)&#123;r = r * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">return</span> r * z;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">bfs</span><span class="params">()</span></span>&#123;</div><div class="line">clr(d, <span class="number">-1</span>);</div><div class="line">q.push(s); d[s] = <span class="number">0</span>;</div><div class="line"><span class="keyword">while</span>(!q.empty())&#123;</div><div class="line"><span class="keyword">int</span> u = q.front(); q.pop();</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; ~i; i = g[i].nxt)&#123;</div><div class="line"><span class="keyword">int</span> v = g[i].to;</div><div class="line"><span class="keyword">if</span>(g[i].c &gt; <span class="number">0</span> &amp;&amp; d[v] == <span class="number">-1</span>)&#123;</div><div class="line">d[v] = d[u] + <span class="number">1</span>;</div><div class="line">q.push(v);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> d[t] != <span class="number">-1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> flow)</span></span>&#123;</div><div class="line"><span class="keyword">if</span>(u == t) <span class="keyword">return</span> flow;</div><div class="line"><span class="keyword">int</span> ret = <span class="number">0</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span>&amp; i = cur[u]; ~i; i = g[i].nxt)&#123;</div><div class="line"><span class="keyword">int</span> v = g[i].to;</div><div class="line"><span class="keyword">if</span>(g[i].c &gt; <span class="number">0</span> &amp;&amp; d[v] == d[u] + <span class="number">1</span>)&#123;</div><div class="line"><span class="keyword">int</span> tmp = dfs(v, min(g[i].c, flow));</div><div class="line">flow -= tmp; g[i].c -= tmp;</div><div class="line">ret += tmp; g[i ^ <span class="number">1</span>].c += tmp;</div><div class="line"><span class="keyword">if</span>(!flow) <span class="keyword">break</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>(!ret) d[u] = <span class="number">-1</span>;</div><div class="line"><span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="comment">//freopen("2.in", "r", stdin);</span></div><div class="line"><span class="comment">//freopen("2.my", "w", stdout);</span></div><div class="line">clr(head, <span class="number">-1</span>);</div><div class="line">n = read(), m = read();</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i ++)&#123;</div><div class="line"><span class="keyword">int</span> u = read(), v = read(), down = read(), up = read();</div><div class="line">du[v] += down; du[u] -= down;</div><div class="line">dn[i] = down;</div><div class="line">add_edge(u, v, up - down, i);</div><div class="line">&#125; s = n + <span class="number">1</span>, t = n + <span class="number">2</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)&#123;</div><div class="line"><span class="keyword">if</span>(du[i] &gt; <span class="number">0</span>) add_edge(s, i, du[i], <span class="number">0</span>);</div><div class="line"><span class="keyword">else</span> <span class="keyword">if</span>(du[i] &lt; <span class="number">0</span>) add_edge(i, t, -du[i], <span class="number">0</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line"><span class="keyword">while</span>(bfs())&#123;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n + <span class="number">2</span>; i ++) cur[i] = head[i];</div><div class="line">ans += dfs(s, INF);</div><div class="line">&#125; flag = <span class="number">1</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = head[s]; ~i; i = g[i].nxt) <span class="keyword">if</span>(g[i].c &gt; <span class="number">0</span>)&#123;flag = <span class="number">0</span>; <span class="keyword">break</span>;&#125;</div><div class="line"><span class="keyword">if</span>(!flag)&#123;<span class="built_in">printf</span>(<span class="string">"NO\n"</span>); <span class="keyword">return</span> ;&#125; <span class="built_in">printf</span>(<span class="string">"YES\n"</span>);</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= cnt; i ++)&#123;</div><div class="line"><span class="keyword">if</span>(g[i].id &gt; <span class="number">0</span> &amp;&amp; i % <span class="number">2</span> == <span class="number">1</span>)&#123;</div><div class="line">anss[g[i].id] = dn[g[i].id] + g[i].c;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i ++) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, anss[i]);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">work();</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="有源汇有上下界最大流"><a href="#有源汇有上下界最大流" class="headerlink" title="有源汇有上下界最大流"></a>有源汇有上下界最大流</h1><h2 id="题意：-1"><a href="#题意：-1" class="headerlink" title="题意："></a>题意：</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>这是一道模板题。</p><p>n 个点，m 条边，每条边 e 有一个流量下界 lower(e) 和流量上界 upper(e) ，给定源点 s 与汇点 t ，求源点到汇点的最大流。</p><h3 id="输入格式-1"><a href="#输入格式-1" class="headerlink" title="输入格式"></a>输入格式</h3><p>第一行两个正整数 n 、m 、s 、t。</p><p>之后的 m 行，每行四个整数 s 、t 、lower、upper。</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><p>如果无解，输出一行 <code>please go home to sleep</code>。</p><p>否则输出最大流。</p><h3 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h3><h4 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">10 15 9 10</div><div class="line">9 1 17 18</div><div class="line">9 2 12 13</div><div class="line">9 3 11 12</div><div class="line">1 5 3 4</div><div class="line">1 6 6 7</div><div class="line">1 7 7 8</div><div class="line">2 5 9 10</div><div class="line">2 6 2 3</div><div class="line">2 7 0 1</div><div class="line">3 5 3 4</div><div class="line">3 6 1 2</div><div class="line">3 7 6 7</div><div class="line">5 10 16 17</div><div class="line">6 10 10 11</div><div class="line">7 10 14 15</div></pre></td></tr></table></figure><h4 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">43</div></pre></td></tr></table></figure><h2 id="题解：-1"><a href="#题解：-1" class="headerlink" title="题解："></a>题解：</h2><p>这个其实就是你先求一个可行流（从d向s连一条无下限容量为INF的弧，这就变成了无源汇有上下界可行流的问题），如果这个是满流的话（说明可以平衡），我们重新建一下图，泡个最大流就成了。</p><p>为什么重新跑一边就成呢？假设说我们继续在刚才的那个图上跑最大流，那么ans肯定等于之前算出来的可行流+残余网络中的最大流。既然我们已经填满了下限，何必再在原图上跑呢？新建一个图，它所跑出来的最大流肯定也是满足下限要求的（毕竟如果存在可行流，最大流的每条弧的流量肯定是往大里搞好啊）。</p><h2 id="代码：-1"><a href="#代码：-1" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> LF;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">complex</span> &lt;LF&gt; cd;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(x, y) memset(x, y, sizeof(x))</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x7fffffff</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e6</span> + <span class="number">15</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXM = <span class="number">1e6</span> + <span class="number">15</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span><span class="keyword">int</span> to, nxt, c;&#125;g[MAXM &lt;&lt; <span class="number">1</span>];</div><div class="line"><span class="keyword">int</span> head[MAXN], cnt = <span class="number">-1</span>, d[MAXN], cur[MAXN], du[MAXN], n, m, s, t, ss, tt, a[MAXN], b[MAXN], c[MAXN];</div><div class="line"><span class="built_in">queue</span> &lt;<span class="keyword">int</span>&gt; q;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> c)</span></span>&#123;g[++ cnt] = (Edge)&#123;v, head[u], c&#125;; head[u] = cnt;&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> c)</span></span>&#123;add(u, v, c); add(v, u, <span class="number">0</span>);&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">int</span> r = <span class="number">0</span>, z = <span class="number">1</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line"><span class="keyword">while</span>(ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch == <span class="string">'-'</span>) z = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">while</span>(ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>)&#123;r = r * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">return</span> r * z;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">bfs</span><span class="params">()</span></span>&#123;</div><div class="line">clr(d, <span class="number">-1</span>);</div><div class="line">q.push(s); d[s] = <span class="number">0</span>;</div><div class="line"><span class="keyword">while</span>(!q.empty())&#123;</div><div class="line"><span class="keyword">int</span> u = q.front(); q.pop();</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; ~i; i = g[i].nxt)&#123;</div><div class="line"><span class="keyword">int</span> v = g[i].to;</div><div class="line"><span class="keyword">if</span>(g[i].c &gt; <span class="number">0</span> &amp;&amp; d[v] == <span class="number">-1</span>)&#123;</div><div class="line">d[v] = d[u] + <span class="number">1</span>;</div><div class="line">q.push(v);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> d[t] != <span class="number">-1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> flow)</span></span>&#123;</div><div class="line"><span class="keyword">if</span>(u == t) <span class="keyword">return</span> flow;</div><div class="line"><span class="keyword">int</span> ret = <span class="number">0</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span>&amp; i = cur[u]; ~i; i = g[i].nxt)&#123;</div><div class="line"><span class="keyword">int</span> v = g[i].to;</div><div class="line"><span class="keyword">if</span>(g[i].c &gt; <span class="number">0</span> &amp;&amp; d[v] == d[u] + <span class="number">1</span>)&#123;</div><div class="line"><span class="keyword">int</span> tmp = dfs(v, min(g[i].c, flow));</div><div class="line">flow -= tmp; g[i].c -= tmp;</div><div class="line">ret += tmp; g[i ^ <span class="number">1</span>].c += tmp;</div><div class="line"><span class="keyword">if</span>(!flow) <span class="keyword">break</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>(!ret) d[u] = <span class="number">-1</span>;</div><div class="line"><span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">clr(head, <span class="number">-1</span>);</div><div class="line">n = read(), m = read(); ss = read(), tt = read();</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i ++)&#123;</div><div class="line"><span class="keyword">int</span> u = read(), v = read(), down = read(), up = read();</div><div class="line">a[i] = u; b[i] = v; c[i] = up;</div><div class="line">du[v] += down; du[u] -= down;</div><div class="line">add_edge(u, v, up - down);</div><div class="line">&#125; s = n + <span class="number">1</span>, t = n + <span class="number">2</span>; add_edge(tt, ss, INF); <span class="keyword">int</span> tot = <span class="number">0</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)&#123;</div><div class="line"><span class="keyword">if</span>(du[i] &gt; <span class="number">0</span>) add_edge(s, i, du[i]), tot += du[i];</div><div class="line"><span class="keyword">else</span> <span class="keyword">if</span>(du[i] &lt; <span class="number">0</span>) add_edge(i, t, -du[i]);</div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line"><span class="keyword">while</span>(bfs())&#123;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n + <span class="number">2</span>; i ++) cur[i] = head[i];</div><div class="line">ans += dfs(s, INF);</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>(ans != tot)&#123;<span class="built_in">printf</span>(<span class="string">"please go home to sleep\n"</span>); <span class="keyword">return</span> ;&#125;</div><div class="line">clr(head, <span class="number">-1</span>); cnt = <span class="number">-1</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i ++)&#123;</div><div class="line">add_edge(a[i], b[i], c[i]);</div><div class="line">&#125;s = ss, t = tt;</div><div class="line"><span class="keyword">int</span> anss = <span class="number">0</span>;</div><div class="line"><span class="keyword">while</span>(bfs())&#123;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) cur[i] = head[i];</div><div class="line">anss += dfs(s, INF);</div><div class="line">&#125;<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, anss);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">work();</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="有源汇有上下界最小流"><a href="#有源汇有上下界最小流" class="headerlink" title="有源汇有上下界最小流"></a>有源汇有上下界最小流</h1><h2 id="题意：-2"><a href="#题意：-2" class="headerlink" title="题意："></a>题意：</h2><h3 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h3><p>n 个点，m 条边，每条边 e 有一个流量下界 lower(e) 和流量上界 upper(e) ，给定源点 s 与汇点 t，求源点到汇点的最小流。</p><h3 id="输入格式-2"><a href="#输入格式-2" class="headerlink" title="输入格式"></a>输入格式</h3><p>第一行两个正整数 n 、m 、s 、t 。</p><p>之后的 m  行，每行四个整数 s 、t 、lower、upper。</p><h3 id="输出格式-1"><a href="#输出格式-1" class="headerlink" title="输出格式"></a>输出格式</h3><p>如果无解，输出一行 <code>please go home to sleep</code>。</p><p>否则输出最小流。</p><h3 id="样例-1"><a href="#样例-1" class="headerlink" title="样例"></a>样例</h3><h4 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入"></a>样例输入</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">7 12 6 7</div><div class="line">6 1 0 2147483647</div><div class="line">1 7 0 2147483647</div><div class="line">6 2 0 2147483647</div><div class="line">2 7 0 2147483647</div><div class="line">6 3 0 2147483647</div><div class="line">3 7 0 2147483647</div><div class="line">6 4 0 2147483647</div><div class="line">4 7 0 2147483647</div><div class="line">6 5 0 2147483647</div><div class="line">5 7 0 2147483647</div><div class="line">5 1 1 2147483647</div><div class="line">3 4 1 2147483647</div></pre></td></tr></table></figure><h4 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出"></a>样例输出</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">2</div></pre></td></tr></table></figure><h2 id="题解：-2"><a href="#题解：-2" class="headerlink" title="题解："></a>题解：</h2><p>我的第一反应就是：这东西的最小流不是他的最大流吗？</p><p>后来看了题解·，并不是这样的。</p><p>因为<strong>循环流</strong>我们没有利用上。为了利用上循环流，我们再从t向s连一条无下限容量为INF的弧，向第一题一样跑个dinic，在满流的情况下，我们连的(t,s)的反向弧的已流容量就是答案。</p><h2 id="代码：-2"><a href="#代码：-2" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> LF;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">complex</span> &lt;LF&gt; cd;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(x, y) memset(x, y, sizeof(x))</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x7fffffff</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e6</span> + <span class="number">15</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span><span class="keyword">int</span> to, nxt, c;&#125;g[MAXN &lt;&lt; <span class="number">1</span>];</div><div class="line"><span class="keyword">int</span> head[MAXN], cnt = <span class="number">-1</span>, d[MAXN], du[MAXN], cur[MAXN], n, m, ss, tt, S, T, ans = <span class="number">0</span>, s, t;</div><div class="line"><span class="built_in">queue</span> &lt;<span class="keyword">int</span>&gt; q;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> c)</span></span>&#123;g[++ cnt] = (Edge)&#123;v, head[u], c&#125;; head[u] = cnt;&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> c)</span></span>&#123;add(u, v, c); add(v, u, <span class="number">0</span>);&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">int</span> r = <span class="number">0</span>, z = <span class="number">1</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line"><span class="keyword">while</span>(ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch == <span class="string">'-'</span>) z = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">while</span>(ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>)&#123;r = r * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">return</span> r * z;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">bfs</span><span class="params">()</span></span>&#123;</div><div class="line">clr(d, <span class="number">-1</span>);</div><div class="line">q.push(s); d[s] = <span class="number">0</span>;</div><div class="line"><span class="keyword">while</span>(!q.empty())&#123;</div><div class="line"><span class="keyword">int</span> u = q.front(); q.pop();</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; ~i; i = g[i].nxt)&#123;</div><div class="line"><span class="keyword">int</span> v = g[i].to;</div><div class="line"><span class="keyword">if</span>(g[i].c &gt; <span class="number">0</span> &amp;&amp; d[v] == <span class="number">-1</span>)&#123;</div><div class="line">d[v] = d[u] + <span class="number">1</span>;</div><div class="line">q.push(v);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> d[t] != <span class="number">-1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> flow)</span></span>&#123;</div><div class="line"><span class="keyword">if</span>(u == t) <span class="keyword">return</span> flow;</div><div class="line"><span class="keyword">int</span> ret = <span class="number">0</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span>&amp; i = cur[u]; ~i; i = g[i].nxt)&#123;</div><div class="line"><span class="keyword">int</span> v = g[i].to;</div><div class="line"><span class="keyword">if</span>(g[i].c &gt; <span class="number">0</span> &amp;&amp; d[v] == d[u] + <span class="number">1</span>)&#123;</div><div class="line"><span class="keyword">int</span> tmp = dfs(v, min(g[i].c, flow));</div><div class="line">flow -= tmp; g[i].c -= tmp;</div><div class="line">ret += tmp; g[i ^ <span class="number">1</span>].c += tmp;</div><div class="line"><span class="keyword">if</span>(!flow) <span class="keyword">break</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>(!ret) d[u] = <span class="number">-1</span>;</div><div class="line"><span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dinic</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">while</span>(bfs())&#123;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n + <span class="number">2</span>; i ++) cur[i] = head[i];</div><div class="line">ans += dfs(s, INF);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">clr(head, <span class="number">-1</span>);</div><div class="line">n = read(), m = read(), ss = read(), tt = read();</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i ++)&#123;</div><div class="line"><span class="keyword">int</span> u = read(), v = read(), low = read(), up = read();</div><div class="line">add_edge(u, v, up - low); du[u] -= low; du[v] += low;</div><div class="line">&#125; S = n + <span class="number">1</span>, T = n + <span class="number">2</span>; <span class="keyword">int</span> tot = <span class="number">0</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)&#123;</div><div class="line"><span class="keyword">if</span>(du[i] &gt; <span class="number">0</span>) add_edge(S, i, du[i]), tot += du[i];</div><div class="line"><span class="keyword">else</span> <span class="keyword">if</span>(du[i] &lt; <span class="number">0</span>) add_edge(i, T, -du[i]);</div><div class="line">&#125;s = S, t = T;</div><div class="line">add_edge(tt, ss, INF);</div><div class="line">dinic();</div><div class="line"><span class="keyword">if</span>(ans != tot)&#123;<span class="built_in">printf</span>(<span class="string">"please go home to sleep\n"</span>); <span class="keyword">return</span> ;&#125;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, g[cnt].c);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">work();</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 知识点 </category>
          
          <category> 讲解与实践 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络流 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>网络流24题总结</title>
      <link href="/2017/12/27/%E7%BD%91%E7%BB%9C%E6%B5%8124%E9%A2%98%E6%80%BB%E7%BB%93/"/>
      <content type="html"><![CDATA[<p>网络流的建模确实不是很容易。但是通过这次刷题，我觉得网络流的建图都得基于以下两点：</p><p>1.我们想要（求）什么</p><p>2.我们需要保证什么条件</p><p>只要这个想清楚了，我觉得至少应付这24题应该是没什么问题（纯口hu）<del>我当然不知道这24道题属于什么难度啦</del></p><p>题外话：貌似这里面掺杂了一些最短路、分层图之类的问题，然后我就没（不）有（会）做，所以这里面的总结当然不会是24道全的啦</p><p>loj有网络流24题系列，可以上loj做。</p><h1 id="1-搭配飞行员"><a href="#1-搭配飞行员" class="headerlink" title="1.搭配飞行员"></a>1.搭配飞行员</h1><h2 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h2><p>飞行大队有若干个来自各地的驾驶员，专门驾驶一种型号的飞机，这种飞机每架有两个驾驶员，需一个正驾驶员和一个副驾驶员。由于种种原因，例如相互配合的问题，有些驾驶员不能在同一架飞机上飞行，问如何搭配驾驶员才能使出航的飞机最多。</p><p>因为驾驶工作分工严格,两个正驾驶员或两个副驾驶员都不能同机飞行。</p><p>2≤n≤100</p><h2 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h2><p>二分图最大匹配瞎搞。</p><h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> LF;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">complex</span> &lt;LF&gt; cd;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> PI 3.14159265358979</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(x, y) memset(x, y, sizeof(x))</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x7fffffff</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">115</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXM = <span class="number">1e4</span> + <span class="number">15</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span><span class="keyword">int</span> to, nxt, c;&#125;g[MAXM &lt;&lt; <span class="number">1</span>];</div><div class="line"><span class="keyword">int</span> head[MAXN], cnt = <span class="number">-1</span>, n, m, cur[MAXN], s, t, d[MAXN];</div><div class="line"><span class="built_in">queue</span> &lt;<span class="keyword">int</span>&gt; q;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> c)</span></span>&#123;g[++ cnt] = (Edge)&#123;v, head[u], c&#125;; head[u] = cnt;&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> c)</span></span>&#123;add(u, v, c); add(v, u, <span class="number">0</span>);&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">int</span> r = <span class="number">0</span>, z = <span class="number">1</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line"><span class="keyword">while</span>(ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch == <span class="string">'-'</span>) z = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">while</span>(ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>)&#123;r = r * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">return</span> r * z; </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">bfs</span><span class="params">()</span></span>&#123;</div><div class="line">clr(d, <span class="number">-1</span>);</div><div class="line">q.push(s); d[s] = <span class="number">0</span>;</div><div class="line"><span class="keyword">while</span>(!q.empty())&#123;</div><div class="line"><span class="keyword">int</span> u = q.front(); q.pop();</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; ~i; i = g[i].nxt)&#123;</div><div class="line"><span class="keyword">int</span> v = g[i].to;</div><div class="line"><span class="keyword">if</span>(g[i].c &amp;&amp; d[v] == <span class="number">-1</span>)&#123;</div><div class="line">d[v] = d[u] + <span class="number">1</span>;</div><div class="line">q.push(v);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> d[t] != <span class="number">-1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> flow)</span></span>&#123;</div><div class="line"><span class="keyword">if</span>(u == t) <span class="keyword">return</span> flow;</div><div class="line"><span class="keyword">int</span> ret = <span class="number">0</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span>&amp; i = cur[u]; ~i; i = g[i].nxt)&#123;</div><div class="line"><span class="keyword">int</span> v = g[i].to;</div><div class="line"><span class="keyword">if</span>(g[i].c &amp;&amp; d[v] == d[u] + <span class="number">1</span>)&#123;</div><div class="line"><span class="keyword">int</span> tmp = dfs(v, min(g[i].c, flow));</div><div class="line">flow -= tmp; g[i].c -= tmp;</div><div class="line">ret += tmp; g[i ^ <span class="number">1</span>].c -= tmp;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>(!ret) d[u] = <span class="number">-1</span>;</div><div class="line"><span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dinic</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line"><span class="keyword">while</span>(bfs())&#123;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n + <span class="number">2</span>; i ++) cur[i] = head[i];</div><div class="line">ans += dfs(s, INF);</div><div class="line">&#125;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">clr(head, <span class="number">-1</span>);</div><div class="line">n = read(), m = read(); s = n + <span class="number">1</span>, t = n + <span class="number">2</span>;</div><div class="line"><span class="keyword">int</span> x, y;</div><div class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;x, &amp;y)) add_edge(x, y, <span class="number">1</span>);</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i ++) add_edge(s, i, <span class="number">1</span>);</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = m + <span class="number">1</span>; i &lt;= n; i ++) add_edge(i, t, <span class="number">1</span>);</div><div class="line">dinic();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">work();</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="2-太空飞行计划"><a href="#2-太空飞行计划" class="headerlink" title="2.太空飞行计划"></a>2.太空飞行计划</h1><h2 id="题意：-1"><a href="#题意：-1" class="headerlink" title="题意："></a>题意：</h2><p>W 教授正在为国家航天中心计划一系列的太空飞行。每次太空飞行可进行一系列商业性实验而获取利润。现已确定了一个可供选择的实验集合，和进行这些实验需要使用的全部仪器的集合。</p><p>W 教授的任务是找出一个有效算法，确定在一次太空飞行中要进行哪些实验并因此而配置哪些仪器才能使太空飞行的净收益最大。这里净收益是指进行实验所获得的全部收入与配置仪器的全部费用的差额。</p><p>对于给定的实验和仪器配置情况，编程找出净收益最大的试验计划。</p><h2 id="题解：-1"><a href="#题解：-1" class="headerlink" title="题解："></a>题解：</h2><p>显然的最大权闭合图，然后它要输出方案，我们dfs一下残量网络即可。</p><p>其实有更好的方法，就是直接判断最后一次bfs中，哪些点的d数组的值不为-1即可。</p><h2 id="代码：-1"><a href="#代码：-1" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> LF;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">complex</span> &lt;LF&gt; cd;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> PI 3.14159265358979</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x7fffffff</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(x, y) memset(x, y, sizeof(x))</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">115</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXM = <span class="number">1e4</span> + <span class="number">15</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span><span class="keyword">int</span> to, nxt, c;&#125;g[MAXM &lt;&lt; <span class="number">1</span>];</div><div class="line"><span class="keyword">int</span> head[MAXN], cnt = <span class="number">-1</span>, d[MAXN], cur[MAXN], m, n, s, t, dd[MAXN], len = <span class="number">0</span>;</div><div class="line"><span class="built_in">queue</span> &lt;<span class="keyword">int</span>&gt; q; <span class="keyword">bool</span> vis[MAXN &lt;&lt; <span class="number">1</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> c)</span></span>&#123;g[++ cnt] = (Edge)&#123;v, head[u], c&#125;; head[u] = cnt;&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> c)</span></span>&#123;add(u, v, c); add(v, u, <span class="number">0</span>);&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">int</span> r = <span class="number">0</span>, z = <span class="number">1</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line"><span class="keyword">while</span>(ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch == <span class="string">'-'</span>) z = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">while</span>(ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>)&#123;r = r * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">return</span> r * z;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">bfs</span><span class="params">()</span></span>&#123;</div><div class="line">clr(d, <span class="number">-1</span>);</div><div class="line">d[s] = <span class="number">0</span>; q.push(s);</div><div class="line"><span class="keyword">while</span>(!q.empty())&#123;</div><div class="line"><span class="keyword">int</span> u = q.front(); q.pop();</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; ~i; i = g[i].nxt)&#123;</div><div class="line"><span class="keyword">int</span> v = g[i].to;</div><div class="line"><span class="keyword">if</span>(g[i].c &amp;&amp; d[v] == <span class="number">-1</span>)&#123;</div><div class="line">d[v] = d[u] + <span class="number">1</span>;</div><div class="line">q.push(v);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> d[t] != <span class="number">-1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> flow)</span></span>&#123;</div><div class="line"><span class="keyword">if</span>(u == t) <span class="keyword">return</span> flow;</div><div class="line"><span class="keyword">int</span> ret = <span class="number">0</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span>&amp; i = cur[u]; ~i; i = g[i].nxt)&#123;</div><div class="line"><span class="keyword">int</span> v = g[i].to;</div><div class="line"><span class="keyword">if</span>(g[i].c &amp;&amp; d[v] == d[u] + <span class="number">1</span>)&#123;</div><div class="line"><span class="keyword">int</span> tmp = dfs(v, min(flow, g[i].c));</div><div class="line">flow -= tmp; g[i].c -= tmp;</div><div class="line">ret += tmp; g[i ^ <span class="number">1</span>].c += tmp;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>(!ret) d[u] = <span class="number">-1</span>;</div><div class="line"><span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; ~i; i = g[i].nxt)&#123;</div><div class="line"><span class="keyword">if</span>(!(i % <span class="number">2</span>) &amp;&amp; g[i].c)&#123;</div><div class="line"><span class="keyword">int</span> v = g[i].to;</div><div class="line"><span class="keyword">if</span>(!vis[v])&#123;dd[++ len] = v; vis[v] = <span class="number">1</span>;&#125;</div><div class="line">dfs1(v);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">clr(head, <span class="number">-1</span>);</div><div class="line">m = read(), n = read(); s = n + m + <span class="number">1</span>, t = n + m + <span class="number">2</span>;</div><div class="line"><span class="keyword">int</span> tot = <span class="number">0</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i ++)&#123;</div><div class="line"><span class="keyword">int</span> w, x; <span class="keyword">char</span> ch; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;w);</div><div class="line">tot += w; add_edge(s, i, w);</div><div class="line"><span class="keyword">do</span> &#123;</div><div class="line">    ch = getchar();</div><div class="line">    <span class="keyword">if</span>(ch == <span class="string">'\n'</span> || ch == <span class="string">'\r'</span> || ch == EOF) <span class="keyword">break</span>;</div><div class="line">   <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</div><div class="line">   add_edge(i, m + x, INF);</div><div class="line">&#125;<span class="keyword">while</span>(ch != <span class="string">'\n'</span> &amp;&amp; ch != <span class="string">'\r'</span> &amp;&amp; ch != EOF);</div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = m + <span class="number">1</span>; i &lt;= m + n; i ++)&#123;</div><div class="line"><span class="keyword">int</span> w = read(); add_edge(i, t, w);</div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line"><span class="keyword">while</span>(bfs())&#123;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n + m + <span class="number">2</span>; i ++) cur[i] = head[i];</div><div class="line">ans += dfs(s, INF);</div><div class="line">&#125;</div><div class="line">dfs1(s);</div><div class="line">sort(dd + <span class="number">1</span>, dd + len + <span class="number">1</span>);</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i ++)&#123;</div><div class="line"><span class="keyword">if</span>(~d[i]) <span class="built_in">printf</span>(<span class="string">"%d "</span>, i);</div><div class="line">&#125;<span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = m + <span class="number">1</span>; i &lt;= m + n; i ++)&#123;</div><div class="line"><span class="keyword">if</span>(~d[i]) <span class="built_in">printf</span>(<span class="string">"%d "</span>, i - m);</div><div class="line">&#125;<span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, tot - ans);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">work();</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="3-最小路径覆盖"><a href="#3-最小路径覆盖" class="headerlink" title="3.最小路径覆盖"></a>3.最小路径覆盖</h1><h2 id="题意：-2"><a href="#题意：-2" class="headerlink" title="题意："></a>题意：</h2><p>点不能相交的有向图的最小路径覆盖。</p><h2 id="题解：-2"><a href="#题解：-2" class="headerlink" title="题解："></a>题解：</h2><p>我们这样想：</p><p>如果每个点都单独成一条路径的话，我们需要n条路径覆盖。</p><p>如果有两个点连到了一起，我们就能减少一条路径。</p><p>如果再有两个点连到了一起，我们就又能减少一条路径。</p><p>所以，我们可以把这个有向图转化成一个二分图，具体转可以看代码。</p><p>然后跑一边最大匹配，n-最大匹配即为答案。</p><h2 id="代码：-2"><a href="#代码：-2" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> LF;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">complex</span> &lt;LF&gt; cd;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> PI 3.14159265358979</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x7fffffff</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(x, y) memset(x, y, sizeof(x))</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e3</span> + <span class="number">15</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXM = <span class="number">1e4</span> + <span class="number">15</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span><span class="keyword">int</span> to, nxt, c;&#125;g[MAXM &lt;&lt; <span class="number">1</span>];</div><div class="line"><span class="keyword">int</span> head[MAXN], cnt = <span class="number">-1</span>, d[MAXN], n, m, s, t, cur[MAXN], dd[MAXN];</div><div class="line"><span class="built_in">queue</span> &lt;<span class="keyword">int</span>&gt; q; <span class="keyword">bool</span> vis[MAXN];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> c)</span></span>&#123;g[++ cnt] = (Edge)&#123;v, head[u], c&#125;; head[u] = cnt;&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> c)</span></span>&#123;add(u, v, c); add(v, u, <span class="number">0</span>);&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">int</span> r = <span class="number">0</span>, z = <span class="number">1</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line"><span class="keyword">while</span>(ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch == <span class="string">'-'</span>) z = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">while</span>(ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>)&#123;r = r * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">return</span> r * z;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">bfs</span><span class="params">()</span></span>&#123;</div><div class="line">clr(d, <span class="number">-1</span>);</div><div class="line">d[s] = <span class="number">0</span>; q.push(s);</div><div class="line"><span class="keyword">while</span>(!q.empty())&#123;</div><div class="line"><span class="keyword">int</span> u = q.front(); q.pop();</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; ~i; i = g[i].nxt)&#123;</div><div class="line"><span class="keyword">int</span> v = g[i].to;</div><div class="line"><span class="keyword">if</span>(g[i].c &amp;&amp; d[v] == <span class="number">-1</span>)&#123;</div><div class="line">d[v] = d[u] + <span class="number">1</span>;</div><div class="line">q.push(v);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> d[t] != <span class="number">-1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> flow)</span></span>&#123;</div><div class="line"><span class="keyword">if</span>(u == t) <span class="keyword">return</span> flow;</div><div class="line"><span class="keyword">int</span> ret = <span class="number">0</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span>&amp; i = cur[u]; ~i; i = g[i].nxt)&#123;</div><div class="line"><span class="keyword">int</span> v = g[i].to;</div><div class="line"><span class="keyword">if</span>(g[i].c &amp;&amp; d[v] == d[u] + <span class="number">1</span>)&#123;</div><div class="line"><span class="keyword">int</span> tmp = dfs(v, min(g[i].c, flow));</div><div class="line">flow -= tmp; g[i].c -= tmp;</div><div class="line">ret += tmp; g[i ^ <span class="number">1</span>].c += tmp;</div><div class="line"><span class="keyword">if</span>(tmp)&#123;</div><div class="line">dd[u] = v;</div><div class="line"><span class="keyword">if</span>(v - n &gt; <span class="number">0</span>) vis[v - n] = <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>(!ret) d[u] = <span class="number">-1</span>;</div><div class="line"><span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">clr(head, <span class="number">-1</span>);</div><div class="line">n = read(), m = read(); s = n * <span class="number">2</span> + <span class="number">1</span>, t = n * <span class="number">2</span> + <span class="number">2</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) add_edge(s, i, <span class="number">1</span>);</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = n + <span class="number">1</span>; i &lt;= n * <span class="number">2</span>; i ++) add_edge(i, t, <span class="number">1</span>);</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i ++)&#123;</div><div class="line"><span class="keyword">int</span> x = read(), y = read() + n;</div><div class="line">add_edge(x, y, <span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line"><span class="keyword">while</span>(bfs())&#123;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n * <span class="number">2</span> + <span class="number">2</span>; i ++) cur[i] = head[i];</div><div class="line">ans += dfs(s, INF);</div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)&#123;</div><div class="line"><span class="keyword">if</span>(vis[i]) <span class="keyword">continue</span>;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>, i);</div><div class="line"><span class="keyword">int</span> k = i;</div><div class="line"><span class="keyword">while</span>(dd[k])&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>, dd[k] - n);</div><div class="line">k = dd[k] - n;</div><div class="line">&#125;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">&#125;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, n - ans);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">work();</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="4-魔术球"><a href="#4-魔术球" class="headerlink" title="4.魔术球"></a>4.魔术球</h1><h2 id="题意：-3"><a href="#题意：-3" class="headerlink" title="题意："></a>题意：</h2><p>假设有 $n$ 根柱子，现要按下述规则在这 $n$ 根柱子中依次放入编号为 $1,2,3,4,⋯$ 的球。</p><ol><li>每次只能在某根柱子的最上面放球。</li><li>在同一根柱子中，任何 $2$ 个相邻球的编号之和为完全平方数。</li></ol><p>试设计一个算法，计算出在 $n$ 根柱子上最多能放多少个球。</p><h2 id="题解：-3"><a href="#题解：-3" class="headerlink" title="题解："></a>题解：</h2><p>这道题还是比较简单的。我们枚举答案，然后跑最大流看看可不可行，输出方案跟上一题差不多。</p><p>（我的方案输出写的好像有些问题呀。。。不过居然过了。。。）</p><h2 id="代码：-3"><a href="#代码：-3" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> LF;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">complex</span> &lt;LF&gt; cd;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> PI 3.14159265358979</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x7fffffff</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(x, y) memset(x, y, sizeof(x))</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e5</span> + <span class="number">15</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXM = <span class="number">1e6</span> + <span class="number">15</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span><span class="keyword">int</span> to, nxt, c;&#125;g[MAXM &lt;&lt; <span class="number">1</span>];</div><div class="line"><span class="keyword">int</span> head[MAXN], cnt = <span class="number">-1</span>, d[MAXN], dd[MAXN], cur[MAXN], n, s, t, tt[MAXN];</div><div class="line"><span class="built_in">queue</span> &lt;<span class="keyword">int</span>&gt; q; <span class="keyword">bool</span> vis[MAXN], vis1[MAXN];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> c)</span></span>&#123;g[++ cnt] = (Edge)&#123;v, head[u], c&#125;; head[u] = cnt;&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> c)</span></span>&#123;add(u, v, c); add(v, u, <span class="number">0</span>);&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">int</span> r = <span class="number">0</span>, z = <span class="number">1</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line"><span class="keyword">while</span>(ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch == <span class="string">'-'</span>) z = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">while</span>(ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>)&#123;r = r * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">return</span> r * z;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">bfs</span><span class="params">()</span></span>&#123;</div><div class="line">clr(d, <span class="number">-1</span>);</div><div class="line">d[s] = <span class="number">0</span>; q.push(s);</div><div class="line"><span class="keyword">while</span>(!q.empty())&#123;</div><div class="line"><span class="keyword">int</span> u = q.front(); q.pop();</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; ~i; i = g[i].nxt)&#123;</div><div class="line"><span class="keyword">int</span> v = g[i].to;</div><div class="line"><span class="keyword">if</span>(g[i].c &amp;&amp; d[v] == <span class="number">-1</span>)&#123;</div><div class="line">d[v] = d[u] + <span class="number">1</span>;</div><div class="line">q.push(v);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> d[t] != <span class="number">-1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> flow)</span></span>&#123;</div><div class="line"><span class="keyword">if</span>(u == t) <span class="keyword">return</span> flow;</div><div class="line"><span class="keyword">int</span> ret = <span class="number">0</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span>&amp; i = cur[u]; ~i; i = g[i].nxt)&#123;</div><div class="line"><span class="keyword">int</span> v = g[i].to;</div><div class="line"><span class="keyword">if</span>(g[i].c &amp;&amp; d[v] == d[u] + <span class="number">1</span>)&#123;</div><div class="line"><span class="keyword">int</span> tmp = dfs(v, min(g[i].c, flow));</div><div class="line">flow -= tmp; g[i].c -= tmp;</div><div class="line">ret += tmp; g[i ^ <span class="number">1</span>].c += tmp;</div><div class="line"><span class="keyword">if</span>(tmp)&#123;</div><div class="line">dd[u] = v;</div><div class="line"><span class="keyword">if</span>(v - n &gt; <span class="number">0</span>) vis[v - <span class="number">5015</span>] = <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>(!ret) d[u] = <span class="number">-1</span>;</div><div class="line"><span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">clr(head, <span class="number">-1</span>);</div><div class="line">n = read(); <span class="keyword">int</span> ans = <span class="number">0</span>, need = <span class="number">0</span>; s = <span class="number">8014</span>, t = <span class="number">8015</span>;</div><div class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</div><div class="line">ans ++; need ++;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; ans; i ++)&#123;</div><div class="line"><span class="keyword">if</span>(<span class="built_in">sqrt</span>(i + ans) == (<span class="keyword">int</span>)<span class="built_in">sqrt</span>(i + ans)) add_edge(i, ans + <span class="number">5015</span>, <span class="number">1</span>);</div><div class="line">&#125;</div><div class="line">add_edge(s, ans, <span class="number">1</span>); add_edge(ans + <span class="number">5015</span>, t, <span class="number">1</span>);</div><div class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</div><div class="line"><span class="keyword">while</span>(bfs())&#123;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">8015</span>; i ++) cur[i] = head[i];</div><div class="line">need -= dfs(s, INF);</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>(need == n)</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= ans; i ++) tt[i] = dd[i], vis1[i] = vis[i];</div><div class="line"><span class="keyword">if</span>(need &gt; n) <span class="keyword">break</span>;</div><div class="line">&#125;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans - <span class="number">1</span>);</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; ans; i ++)&#123;</div><div class="line"><span class="keyword">if</span>(vis1[i]) <span class="keyword">continue</span>;</div><div class="line"><span class="keyword">int</span> k = i; <span class="built_in">printf</span>(<span class="string">"%d "</span>, i);</div><div class="line"><span class="keyword">while</span>(tt[k])&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>, tt[k] - <span class="number">5015</span>);</div><div class="line">k = tt[k] - <span class="number">5015</span>;</div><div class="line">&#125;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">work();</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="5-圆桌聚餐"><a href="#5-圆桌聚餐" class="headerlink" title="5. 圆桌聚餐"></a>5. 圆桌聚餐</h1><h2 id="题意：-4"><a href="#题意：-4" class="headerlink" title="题意："></a>题意：</h2><p>假设有来自 $n$ 个不同单位的代表参加一次国际会议。每个单位的代表数分别为 $r_i$ 。会议餐厅共有 $m$ 张餐桌，每张餐桌可容纳 $c_i$ 个代表就餐。<br>为了使代表们充分交流，希望从同一个单位来的代表不在同一个餐桌就餐。</p><p>试设计一个算法，给出满足要求的代表就餐方案。</p><h2 id="题解：-4"><a href="#题解：-4" class="headerlink" title="题解："></a>题解：</h2><p>这道题我们的第一个任务就是判断是否存在可行解。</p><p>我们这样建图：</p><p>s到每个公司连一条边，容量为$r_i$</p><p>每个餐桌到t连一条边，容量为$c_i$</p><p>每个公司向所有的餐桌各连一条边，容量为$1$</p><p>跑最大流即可，判断一下最大流是否是总人数，是的话1，不是的话0</p><p>再考虑如何输出方案。</p><p>这个方案最好输出了！直接dfs每个公司到每个餐桌的连边，看看哪条边等于零了，就说明这个公司有代表坐在了这个餐桌上。</p><h2 id="代码：-4"><a href="#代码：-4" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> LF;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">complex</span> &lt;LF&gt; cd;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> PI 3.14159265358979</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x7fffffff</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(x, y) memset(x, y, sizeof(x))</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e3</span> + <span class="number">15</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXM = <span class="number">1e6</span> + <span class="number">15</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span><span class="keyword">int</span> to, nxt, c;&#125;g[MAXM &lt;&lt; <span class="number">1</span>];</div><div class="line"><span class="keyword">int</span> head[MAXN], cnt = <span class="number">-1</span>, d[MAXN], cur[MAXN], r[MAXN], c[MAXN], m, n, s, t;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> c)</span></span>&#123;g[++ cnt] = (Edge)&#123;v, head[u], c&#125;; head[u] = cnt;&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> c)</span></span>&#123;add(u, v, c); add(v, u, <span class="number">0</span>);&#125;</div><div class="line"><span class="built_in">queue</span> &lt;<span class="keyword">int</span>&gt; q;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">int</span> r = <span class="number">0</span>, z = <span class="number">1</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line"><span class="keyword">while</span>(ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch == <span class="string">'-'</span>) z = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">while</span>(ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>)&#123;r = r * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">return</span> r * z;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">bfs</span><span class="params">()</span></span>&#123;</div><div class="line">clr(d, <span class="number">-1</span>);</div><div class="line">q.push(s); d[s] = <span class="number">0</span>;</div><div class="line"><span class="keyword">while</span>(!q.empty())&#123;</div><div class="line"><span class="keyword">int</span> u = q.front(); q.pop();</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; ~i; i = g[i].nxt)&#123;</div><div class="line"><span class="keyword">int</span> v = g[i].to;</div><div class="line"><span class="keyword">if</span>(g[i].c &amp;&amp; d[v] == <span class="number">-1</span>)&#123;</div><div class="line">d[v] = d[u] + <span class="number">1</span>;</div><div class="line">q.push(v);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> d[t] != <span class="number">-1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> flow)</span></span>&#123;</div><div class="line"><span class="keyword">if</span>(u == t) <span class="keyword">return</span> flow;</div><div class="line"><span class="keyword">int</span> ret = <span class="number">0</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span>&amp; i = cur[u]; ~i; i = g[i].nxt)&#123;</div><div class="line"><span class="keyword">int</span> v = g[i].to;</div><div class="line"><span class="keyword">if</span>(g[i].c &amp;&amp; d[v] == d[u] + <span class="number">1</span>)&#123;</div><div class="line"><span class="keyword">int</span> tmp = dfs(v, min(flow, g[i].c));</div><div class="line">flow -= tmp; g[i].c -= tmp;</div><div class="line">ret += tmp; g[i ^ <span class="number">1</span>].c += tmp;</div><div class="line"><span class="keyword">if</span>(!flow) <span class="keyword">break</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>(!ret) d[u] = <span class="number">-1</span>;</div><div class="line"><span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">clr(head, <span class="number">-1</span>); <span class="keyword">int</span> tot = <span class="number">0</span>;</div><div class="line">m = read(), n = read(); s = m + n + <span class="number">1</span>, t = m + n + <span class="number">2</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i ++)&#123;</div><div class="line">r[i] = read(); tot += r[i];</div><div class="line">add_edge(s, i, r[i]);</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j ++) add_edge(i, j + m, <span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)&#123;</div><div class="line">c[i] = read();</div><div class="line">add_edge(i + m, t, c[i]);</div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line"><span class="keyword">while</span>(bfs())&#123;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m + n + <span class="number">2</span>; i ++) cur[i] = head[i];</div><div class="line">ans += dfs(s, INF);</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>(ans != tot)&#123;<span class="built_in">printf</span>(<span class="string">"0\n"</span>); <span class="keyword">return</span> ;&#125;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"1\n"</span>);</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i ++)&#123;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = head[i]; ~j; j = g[j].nxt)&#123;</div><div class="line"><span class="keyword">int</span> v = g[j].to;</div><div class="line"><span class="keyword">if</span>(v != s &amp;&amp; !g[j].c) <span class="built_in">printf</span>(<span class="string">"%d "</span>, v - m);</div><div class="line">&#125;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">work();</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="6-最长递增子序列"><a href="#6-最长递增子序列" class="headerlink" title="6.最长递增子序列"></a>6.最长递增子序列</h1><h2 id="题意：-5"><a href="#题意：-5" class="headerlink" title="题意："></a>题意：</h2><p>给定正整数序列 $x_1∼x_n$，以下递增子序列均为<strong>非严格</strong>递增。</p><ol><li>计算其最长递增子序列的长度 $s$ 。</li><li>计算从给定的序列中最多可取出多少个长度为 $s$ 的递增子序列。</li><li>如果允许在取出的序列中多次使用 $x_1$ 和 $x_n$，则从给定序列中最多可取出多少个长度为 $s$ 的递增子序列。</li></ol><h2 id="题解：-5"><a href="#题解：-5" class="headerlink" title="题解："></a>题解：</h2><p>我们一问一问考虑。</p><p>第一问：因为n小于等于500，$n^2$的dp即可。</p><p>第二问：这一问显然就要用到网络流了。我们要拆点（为什么？因为我们要控制一个点只选了1次），并在这两个拆出来的点连一条容量为1的边。然后呢？</p><p>如果f[i]==ans1的话，那么从s到i的入点连一条容量为1的边。</p><p>如果f[i]==1的话，那么从i的出点到t连一条容量为1的边。</p><p>如果a[j]&gt;=a[i] &amp;&amp; j &gt; i &amp;&amp; f[j] == f[i] + 1（<strong>少一个条件都不可以！！！</strong>），那么从j的出点向i的入点连一条容量为1的边。</p><p>跑个最大流就成了。</p><p>第三问：把(s, 1), (1, 1), (s, n), (n, n), (1, t), (n, t)的容量改为INF（如果之前这两点有连边的话）。</p><h2 id="代码：-5"><a href="#代码：-5" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> LF;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">complex</span> &lt;LF&gt; cd;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> PI 3.14159265358979</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x7fffffff</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(x, y) memset(x, y, sizeof(x))</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e3</span> + <span class="number">15</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXM = <span class="number">1e6</span> + <span class="number">15</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span><span class="keyword">int</span> to, nxt, c;&#125;g[MAXM &lt;&lt; <span class="number">1</span>];</div><div class="line"><span class="keyword">int</span> head[MAXN], cnt = <span class="number">-1</span>, d[MAXN], cur[MAXN], n, s, t, a[MAXN], f[MAXN];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> c)</span></span>&#123;g[++ cnt] = (Edge)&#123;v, head[u], c&#125;; head[u] = cnt;&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> c)</span></span>&#123;add(u, v, c); add(v, u, <span class="number">0</span>);&#125;</div><div class="line"><span class="built_in">queue</span> &lt;<span class="keyword">int</span>&gt; q;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">int</span> r = <span class="number">0</span>, z = <span class="number">1</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line"><span class="keyword">while</span>(ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch == <span class="string">'-'</span>) z = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">while</span>(ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>)&#123;r = r * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">return</span> r * z;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">bfs</span><span class="params">()</span></span>&#123;</div><div class="line">clr(d, <span class="number">-1</span>);</div><div class="line">q.push(s); d[s] = <span class="number">0</span>;</div><div class="line"><span class="keyword">while</span>(!q.empty())&#123;</div><div class="line"><span class="keyword">int</span> u = q.front(); q.pop();</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; ~i; i = g[i].nxt)&#123;</div><div class="line"><span class="keyword">int</span> v = g[i].to;</div><div class="line"><span class="keyword">if</span>(g[i].c &amp;&amp; d[v] == <span class="number">-1</span>)&#123;</div><div class="line">d[v] = d[u] + <span class="number">1</span>;</div><div class="line">q.push(v);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> d[t] != <span class="number">-1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> flow)</span></span>&#123;</div><div class="line"><span class="keyword">if</span>(u == t) <span class="keyword">return</span> flow;</div><div class="line"><span class="keyword">int</span> ret = <span class="number">0</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span>&amp; i = cur[u]; ~i; i = g[i].nxt)&#123;</div><div class="line"><span class="keyword">int</span> v = g[i].to;</div><div class="line"><span class="keyword">if</span>(g[i].c &amp;&amp; d[v] == d[u] + <span class="number">1</span>)&#123;</div><div class="line"><span class="keyword">int</span> tmp = dfs(v, min(flow, g[i].c));</div><div class="line">flow -= tmp; g[i].c -= tmp;</div><div class="line">ret += tmp; g[i ^ <span class="number">1</span>].c += tmp;</div><div class="line"><span class="keyword">if</span>(!flow) <span class="keyword">break</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>(!ret) d[u] = <span class="number">-1</span>;</div><div class="line"><span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">clr(head, <span class="number">-1</span>);</div><div class="line">n = read(); s = n * <span class="number">2</span> + <span class="number">1</span>, t = n * <span class="number">2</span> + <span class="number">2</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) a[i] = read();</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)&#123; f[i] = <span class="number">1</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; i; j ++)</div><div class="line"><span class="keyword">if</span>(a[i] &gt;= a[j]) f[i] = max(f[i], f[j] + <span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> ans1 = <span class="number">0</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) ans1 = max(ans1, f[i]);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans1); <span class="keyword">if</span>(ans1 == <span class="number">1</span>)&#123;<span class="built_in">printf</span>(<span class="string">"%d\n%d\n"</span>, n, n); <span class="keyword">return</span> ;&#125;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)&#123;</div><div class="line"><span class="keyword">if</span>(f[i] == ans1) add_edge(s, i, <span class="number">1</span>);</div><div class="line"><span class="keyword">if</span>(f[i] == <span class="number">1</span>) add_edge(i + n, t, <span class="number">1</span>);</div><div class="line">add_edge(i, i + n, <span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)&#123;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= n; j ++) <span class="keyword">if</span>(f[j] == f[i] + <span class="number">1</span>) add_edge(j + n, i, <span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> ans2 = <span class="number">0</span>;</div><div class="line"><span class="keyword">while</span>(bfs())&#123;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n * <span class="number">2</span> + <span class="number">2</span>; i ++) cur[i] = head[i];</div><div class="line">ans2 += dfs(s, INF);</div><div class="line">&#125;<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans2);</div><div class="line">cnt = <span class="number">-1</span>; clr(head, <span class="number">-1</span>); clr(cur, <span class="number">-1</span>);</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)&#123;</div><div class="line"><span class="keyword">if</span>(f[i] == ans1) add_edge(s, i, (i == <span class="number">1</span> || i == n) ? INF : <span class="number">1</span>);</div><div class="line"><span class="keyword">if</span>(f[i] == <span class="number">1</span>) add_edge(i + n, t, (i == <span class="number">1</span> || i == n) ? INF : <span class="number">1</span>);</div><div class="line">add_edge(i, i + n, (i == <span class="number">1</span> || i == n) ? INF : <span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)&#123;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= n; j ++) <span class="keyword">if</span>(a[j] &gt;= a[i] &amp;&amp; f[j] == f[i] + <span class="number">1</span>) add_edge(j + n, i, <span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> ans3 = <span class="number">0</span>;</div><div class="line"><span class="keyword">while</span>(bfs())&#123;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n * <span class="number">2</span> + <span class="number">2</span>; i ++) cur[i] = head[i];</div><div class="line">ans3 += dfs(s, INF);</div><div class="line">&#125;<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans3);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">work();</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="7-试题库"><a href="#7-试题库" class="headerlink" title="7.试题库"></a>7.试题库</h1><h2 id="题意：-6"><a href="#题意：-6" class="headerlink" title="题意："></a>题意：</h2><p>假设一个试题库中有 $n$ 道试题。每道试题都标明了所属类别。同一道题可能有多个类别属性。现要从题库中抽取 $m$ 道题组成试卷。并要求试卷包含指定类型的试题。试设计一个满足要求的组卷算法。</p><h2 id="题解：-6"><a href="#题解：-6" class="headerlink" title="题解："></a>题解：</h2><p>这道题我感觉比前几道中的一些还要简单啊。</p><p>这个建图很好想：试卷需要的类型向t连一条容量为所需题目数的边；s向每道题连一条容量为1的边（保证每道题都只是用过1次）；每道题向自己所属的类型连一条容量为1的边。</p><p>跑最大流即可。</p><h2 id="代码：-6"><a href="#代码：-6" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> LF;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">complex</span> &lt;LF&gt; cd;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> PI 3.14159265358979</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x7fffffff</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(x, y) memset(x, y, sizeof(x))</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e3</span> + <span class="number">15</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXM = <span class="number">1e6</span> + <span class="number">15</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span><span class="keyword">int</span> to, nxt, c;&#125;g[MAXM &lt;&lt; <span class="number">1</span>];</div><div class="line"><span class="keyword">int</span> head[MAXN], cnt = <span class="number">-1</span>, d[MAXN], cur[MAXN], k, n, s, t, r[MAXN], tt[MAXN];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> c)</span></span>&#123;g[++ cnt] = (Edge)&#123;v, head[u], c&#125;; head[u] = cnt;&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> c)</span></span>&#123;add(u, v, c); add(v, u, <span class="number">0</span>);&#125;</div><div class="line"><span class="built_in">queue</span> &lt;<span class="keyword">int</span>&gt; q;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">int</span> r = <span class="number">0</span>, z = <span class="number">1</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line"><span class="keyword">while</span>(ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch == <span class="string">'-'</span>) z = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">while</span>(ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>)&#123;r = r * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">return</span> r * z;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">bfs</span><span class="params">()</span></span>&#123;</div><div class="line">clr(d, <span class="number">-1</span>);</div><div class="line">q.push(s); d[s] = <span class="number">0</span>;</div><div class="line"><span class="keyword">while</span>(!q.empty())&#123;</div><div class="line"><span class="keyword">int</span> u = q.front(); q.pop();</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; ~i; i = g[i].nxt)&#123;</div><div class="line"><span class="keyword">int</span> v = g[i].to;</div><div class="line"><span class="keyword">if</span>(g[i].c &amp;&amp; d[v] == <span class="number">-1</span>)&#123;</div><div class="line">d[v] = d[u] + <span class="number">1</span>;</div><div class="line">q.push(v);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> d[t] != <span class="number">-1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> flow)</span></span>&#123;</div><div class="line"><span class="keyword">if</span>(u == t) <span class="keyword">return</span> flow;</div><div class="line"><span class="keyword">int</span> ret = <span class="number">0</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span>&amp; i = cur[u]; ~i; i = g[i].nxt)&#123;</div><div class="line"><span class="keyword">int</span> v = g[i].to;</div><div class="line"><span class="keyword">if</span>(g[i].c &amp;&amp; d[v] == d[u] + <span class="number">1</span>)&#123;</div><div class="line"><span class="keyword">int</span> tmp = dfs(v, min(flow, g[i].c));</div><div class="line">flow -= tmp; g[i].c -= tmp;</div><div class="line">ret += tmp; g[i ^ <span class="number">1</span>].c += tmp;</div><div class="line"><span class="keyword">if</span>(!flow) <span class="keyword">break</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>(!ret) d[u] = <span class="number">-1</span>;</div><div class="line"><span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">clr(head, <span class="number">-1</span>);</div><div class="line">k = read(), n = read(); <span class="keyword">int</span> m = <span class="number">0</span>; s = n + k + <span class="number">1</span>, t = n + k + <span class="number">2</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; i ++)&#123;</div><div class="line">r[i] = read(); m += r[i];</div><div class="line"><span class="keyword">if</span>(r[i]) add_edge(i + n, t, r[i]);</div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)&#123;</div><div class="line"><span class="keyword">int</span> p = read(); add_edge(s, i, <span class="number">1</span>);</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= p; j ++)&#123;</div><div class="line"><span class="keyword">int</span> x = read() + n;</div><div class="line">add_edge(i, x, <span class="number">1</span>);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line"><span class="keyword">while</span>(bfs())&#123;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n + k + <span class="number">2</span>; i ++) cur[i] = head[i];</div><div class="line">ans += dfs(s, INF);</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>(ans != m)&#123;<span class="built_in">printf</span>(<span class="string">"No Solution!\n"</span>); <span class="keyword">return</span> ;&#125;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; i ++)&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%d:"</span>, i);</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = head[i + n]; ~j; j = g[j].nxt)&#123;</div><div class="line"><span class="keyword">if</span>(j % <span class="number">2</span> &amp;&amp; g[j].c) <span class="built_in">printf</span>(<span class="string">" %d"</span>, g[j].to);</div><div class="line">&#125;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">work();</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="8-方格取数"><a href="#8-方格取数" class="headerlink" title="8.方格取数"></a>8.方格取数</h1><h2 id="题意：-7"><a href="#题意：-7" class="headerlink" title="题意："></a>题意：</h2><p>在一个有 $n\times m$ 个方格的棋盘中，每个方格中有一个正整数。</p><p>现要从方格中取数，使任意 2 个数所在方格没有公共边，且取出的数的总和最大。试设计一个满足要求的取数算法。</p><h2 id="题解：-7"><a href="#题解：-7" class="headerlink" title="题解："></a>题解：</h2><p>这个是一个比较经典的方格类网络流的题。</p><p>我们首先要黑白染色，然后我们会发现一个很神奇的事情：相邻两个格子的颜色不一样！</p><p>好，接下来s到每个染黑的点连一条容量为格子中的数的边，每个染白的点再向t连一条容量为格子中的数的边。然后相邻的格子（黑-&gt;白）连一条容量为INF的边。</p><p>我们把问题转化成了什么呢？最大点权独立集。</p><p>点权和-最大流（准确的说好像是点权和-最小割）即可。</p><h2 id="代码：-7"><a href="#代码：-7" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> LF;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">complex</span> &lt;LF&gt; cd;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(x, y) memset(x, y, sizeof(x))</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> PI 3.14159265358979</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x7fffffff</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e3</span> + <span class="number">15</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXM = <span class="number">1e6</span> + <span class="number">15</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span><span class="keyword">int</span> to, nxt, c;&#125;g[MAXM &lt;&lt; <span class="number">1</span>];</div><div class="line"><span class="keyword">int</span> head[MAXN], cnt = <span class="number">-1</span>, d[MAXN], cur[MAXN], m, n, s, t, a[<span class="number">55</span>][<span class="number">55</span>], mark[<span class="number">55</span>][<span class="number">55</span>];</div><div class="line"><span class="keyword">int</span> dx[<span class="number">5</span>] = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</div><div class="line"><span class="keyword">int</span> dy[<span class="number">5</span>] = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">-1</span>&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> c)</span></span>&#123;g[++ cnt] = (Edge)&#123;v, head[u], c&#125;; head[u] = cnt;&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> c)</span></span>&#123;add(u, v, c); add(v, u, <span class="number">0</span>);&#125;</div><div class="line"><span class="built_in">queue</span> &lt;<span class="keyword">int</span>&gt; q;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">int</span> r = <span class="number">0</span>, z = <span class="number">1</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line"><span class="keyword">while</span>(ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch == <span class="string">'-'</span>) z = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">while</span>(ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>)&#123;r = r * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">return</span> r * z;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">bfs</span><span class="params">()</span></span>&#123;</div><div class="line">clr(d, <span class="number">-1</span>);</div><div class="line">q.push(s); d[s] = <span class="number">0</span>;</div><div class="line"><span class="keyword">while</span>(!q.empty())&#123;</div><div class="line"><span class="keyword">int</span> u = q.front(); q.pop();</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; ~i; i = g[i].nxt)&#123;</div><div class="line"><span class="keyword">int</span> v = g[i].to;</div><div class="line"><span class="keyword">if</span>(g[i].c &amp;&amp; d[v] == <span class="number">-1</span>)&#123;</div><div class="line">d[v] = d[u] + <span class="number">1</span>;</div><div class="line">q.push(v);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> d[t] != <span class="number">-1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> flow)</span></span>&#123;</div><div class="line"><span class="keyword">if</span>(u == t) <span class="keyword">return</span> flow;</div><div class="line"><span class="keyword">int</span> ret = <span class="number">0</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span>&amp; i = cur[u]; ~i; i = g[i].nxt)&#123;</div><div class="line"><span class="keyword">int</span> v = g[i].to;</div><div class="line"><span class="keyword">if</span>(g[i].c &amp;&amp; d[v] == d[u] + <span class="number">1</span>)&#123;</div><div class="line"><span class="keyword">int</span> tmp = dfs(v, min(flow, g[i].c));</div><div class="line">flow -= tmp; g[i].c -= tmp;</div><div class="line">ret += tmp; g[i ^ <span class="number">1</span>].c += tmp;</div><div class="line"><span class="keyword">if</span>(!flow) <span class="keyword">break</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>(!ret) d[u] = <span class="number">-1</span>;</div><div class="line"><span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">clr(head, <span class="number">-1</span>);</div><div class="line">m = read(), n = read(); s = n * m + <span class="number">1</span>, t = n * m + <span class="number">2</span>; <span class="keyword">int</span> tot = <span class="number">0</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i ++)</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j ++) mark[i][j] = (i - <span class="number">1</span>) * n + j;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i ++)&#123;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j ++)&#123;</div><div class="line">a[i][j] = read(); tot += a[i][j];</div><div class="line"><span class="keyword">if</span>((i + j) % <span class="number">2</span> == <span class="number">0</span>) add_edge(s, mark[i][j], a[i][j]);</div><div class="line"><span class="keyword">else</span> add_edge(mark[i][j], t, a[i][j]);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x1 = <span class="number">1</span>; x1 &lt;= m; x1 ++)&#123;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> y1 = <span class="number">1</span>; y1 &lt;= n; y1 ++)&#123; <span class="keyword">if</span>((x1 + y1) % <span class="number">2</span> == <span class="number">1</span>) <span class="keyword">continue</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= <span class="number">4</span>; k ++)&#123;</div><div class="line"><span class="keyword">int</span> x2 = x1 + dx[k], y2 = y1 + dy[k];</div><div class="line">add_edge(mark[x1][y1], mark[x2][y2], INF);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line"><span class="keyword">while</span>(bfs())&#123;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n * m + <span class="number">2</span>; i ++) cur[i] = head[i];</div><div class="line">ans += dfs(s, INF);</div><div class="line">&#125;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, tot - ans);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">work();</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="9-餐巾计划："><a href="#9-餐巾计划：" class="headerlink" title="9.餐巾计划："></a>9.餐巾计划：</h1><h2 id="题意：-8"><a href="#题意：-8" class="headerlink" title="题意："></a>题意：</h2><p>一个餐厅在相继的 $n$ 天里，每天需用的餐巾数不尽相同。假设第 $i$ 天需要 $r_i$ 块餐巾。餐厅可以购买新的餐巾，每块餐巾的费用为 $P$ 分；或者把旧餐巾送到快洗部，洗一块需 $M$ 天，其费用为 $F$ 分；或者送到慢洗部，洗一块需 $N$ 天，其费用为 $S$ 分。</p><p>每天结束时，餐厅必须决定将多少块脏的餐巾送到快洗部，多少块餐巾送到慢洗部，以及多少块保存起来延期送洗。但是每天洗好的餐巾和购买的新餐巾数之和，要满足当天的需求量。</p><p>试设计一个算法为餐厅合理地安排好 $n$ 天中餐巾使用计划,使总的花费最小。</p><h2 id="题解：-8"><a href="#题解：-8" class="headerlink" title="题解："></a>题解：</h2><p>终于到费用流了。。。</p><p>这个。。。我觉得这道题真的不错（虽说这个系列的题都不错），最好初学者自己想想。</p><p><strong>如何建图：</strong></p><p>1、从S向每个Xi连一条容量为ri，费用为0的有向边。</p><p>2、从每个Yi向T连一条容量为ri，费用为0的有向边。</p><p>3、从S向每个Yi连一条容量为无穷大，费用为p的有向边。</p><p>4、从每个Xi向Xi+1(i+1&lt;=N)连一条容量为无穷大，费用为0的有向边。</p><p>5、从每个Xi向Yi+m(i+m&lt;=N)连一条容量为无穷大，费用为f的有向边。</p><p>6、从每个Xi向Yi+n(i+n&lt;=N)连一条容量为无穷大，费用为s的有向边。</p><h2 id="代码：-8"><a href="#代码：-8" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> LF;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(x, y) memset(x, y, sizeof(x))</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">2e4</span> + <span class="number">15</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXM = <span class="number">2e6</span> + <span class="number">15</span>;</div><div class="line"><span class="keyword">const</span> LL INF = <span class="number">1e18</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span>LL to, nxt, c, w;&#125;g[MAXM &lt;&lt; <span class="number">1</span>];</div><div class="line">LL head[MAXN], cnt = <span class="number">-1</span>, dist[MAXN], N, p, m, f, n, s, r[MAXN], S, T, pre[MAXN];</div><div class="line"><span class="built_in">queue</span> &lt;LL&gt; q; <span class="keyword">bool</span> inq[MAXN];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(LL u, LL v, LL c, LL w)</span></span>&#123;g[++ cnt] = (Edge)&#123;v, head[u], c, w&#125;; head[u] = cnt;&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(LL u, LL v, LL c, LL w)</span></span>&#123;add(u, v, c, w); add(v, u, <span class="number">0</span>, -w);&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">Min</span><span class="params">(LL a, LL b)</span></span>&#123;<span class="keyword">return</span> a &lt; b ? a : b;&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">    LL r = <span class="number">0</span>, z = <span class="number">1</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line">    <span class="keyword">while</span>(ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch == <span class="string">'-'</span>) z = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">while</span>(ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>)&#123;r =r * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">return</span> r * z;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">spfa</span><span class="params">()</span></span>&#123;</div><div class="line">    clr(inq, <span class="number">0</span>); clr(pre, <span class="number">-1</span>);</div><div class="line">    <span class="keyword">for</span>(LL i = <span class="number">1</span>; i &lt;= N * <span class="number">2</span> + <span class="number">2</span>; i ++) dist[i] = INF;</div><div class="line">    dist[S] = <span class="number">0</span>; q.push(S); inq[S] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span>(!q.empty())&#123;</div><div class="line">        <span class="keyword">int</span> u = q.front(); q.pop(); inq[u] = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(LL i = head[u]; ~i; i = g[i].nxt)&#123;</div><div class="line">            <span class="keyword">int</span> v = g[i].to;</div><div class="line">            <span class="keyword">if</span>(g[i].c &lt;= <span class="number">0</span> || dist[u] + g[i].w &gt;= dist[v]) <span class="keyword">continue</span>;</div><div class="line">            dist[v] = dist[u] + g[i].w; pre[v] = i;</div><div class="line">            <span class="keyword">if</span>(!inq[v])&#123;q.push(v); inq[v] = <span class="number">1</span>;&#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> pre[T] != <span class="number">-1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">    clr(head, <span class="number">-1</span>);</div><div class="line">    N = read(); S = N * <span class="number">2</span> + <span class="number">1</span>, T = N * <span class="number">2</span> + <span class="number">2</span>;</div><div class="line">    p = read(); m = read(), f = read(); n = read(), s = read();</div><div class="line">    <span class="keyword">for</span>(LL i = <span class="number">1</span>; i &lt;= N; i ++)&#123;</div><div class="line">        r[i] = read();</div><div class="line">        add_edge(S, i, r[i], <span class="number">0</span>); add_edge(i + N, T, r[i], <span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(LL i = <span class="number">1</span>; i &lt;= N; i ++) add_edge(S, i + N, INF, p);</div><div class="line">    <span class="keyword">for</span>(LL i = <span class="number">1</span>; i &lt; N; i ++) add_edge(i, i + <span class="number">1</span>, INF, <span class="number">0</span>);</div><div class="line">    <span class="keyword">for</span>(LL i = <span class="number">1</span>; i + m &lt;= N; i ++) add_edge(i, i + N + m, INF, f);</div><div class="line">    <span class="keyword">for</span>(LL i = <span class="number">1</span>; i + n &lt;= N; i ++) add_edge(i, i + N + n, INF, s);</div><div class="line">    LL ans = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span>(spfa())&#123;</div><div class="line">        LL flow = INF;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = T; i != S; i = g[pre[i] ^ <span class="number">1</span>].to)&#123;</div><div class="line">            flow = Min(flow, g[pre[i]].c);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = T; i != S; i = g[pre[i] ^ <span class="number">1</span>].to)&#123;</div><div class="line">            g[pre[i]].c -= flow; g[pre[i] ^ <span class="number">1</span>].c += flow;</div><div class="line">        &#125;</div><div class="line">        ans += dist[T] * flow;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    work();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="10-数字梯形"><a href="#10-数字梯形" class="headerlink" title="10.数字梯形"></a>10.数字梯形</h1><h2 id="题意：-9"><a href="#题意：-9" class="headerlink" title="题意："></a>题意：</h2><p>给定一个由 $n$ 行数字组成的数字梯形如下图所示。梯形的第一行有 $m$ 个数字。从梯形的顶部的 $m$ 个数字开始，在每个数字处可以沿左下或右下方向移动，形成一条从梯形的顶至底的路径。</p><p>分别遵守以下规则：</p><ol><li>从梯形的顶至底的 $m$ 条路径互不相交；</li><li>从梯形的顶至底的 $m$ 条路径仅在数字结点处相交；</li><li>从梯形的顶至底的 $m$ 条路径允许在数字结点相交或边相交。</li></ol><h2 id="题解：-9"><a href="#题解：-9" class="headerlink" title="题解："></a>题解：</h2><p>这道题有三问，确实都是不错的题。</p><p>对于第一问，m条路互不相交也就意味着每个点只经过一次，怎么维护？拆点！</p><p>每个点的出点与他下一行的所能到达的两个点连一条容量为1，费用为自己的数值的边。</p><p>s与第一行的点的入点连一条容量为1，费用为0的边。</p><p>第n行的点的出点与t连一条容量为1，费用为0的边。</p><p>跑最大费用最大流。</p><p>第二问呢？</p><p>第二问意味着不用拆点了。</p><p>并且把第n行的点与t的连边改成容量为INF，费用为自己的数值就完了。</p><p>第三问呢？</p><p>所有的（除了s道第一行的各点的）弧全都改为容量为INF。</p><h2 id="代码：-9"><a href="#代码：-9" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> LF;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">complex</span> &lt;LF&gt; cd;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> PI 3.14159265358979</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x7fffffff</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(x, y) memset(x, y, sizeof(x))</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e3</span> + <span class="number">15</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXM = <span class="number">1e6</span> + <span class="number">15</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span><span class="keyword">int</span> to, nxt, c, w;&#125;g[MAXM &lt;&lt; <span class="number">1</span>];</div><div class="line"><span class="keyword">int</span> head[MAXN], cnt = <span class="number">-1</span>, dist[MAXN], pre[MAXN], m, n, a[MAXN][MAXN], mark[MAXN][MAXN], s, t;</div><div class="line"><span class="built_in">queue</span> &lt;<span class="keyword">int</span>&gt; q; <span class="keyword">bool</span> inq[MAXN];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> c, <span class="keyword">int</span> w)</span></span>&#123;g[++ cnt] = (Edge)&#123;v, head[u], c, w&#125;; head[u] = cnt;&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> c, <span class="keyword">int</span> w)</span></span>&#123;add(u, v, c, w); add(v, u, <span class="number">0</span>, -w);&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">int</span> r = <span class="number">0</span>, z = <span class="number">1</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line"><span class="keyword">while</span>(ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch == <span class="string">'-'</span>) z = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">while</span>(ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>)&#123;r = r * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">return</span> r * z;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">spfa</span><span class="params">()</span></span>&#123;</div><div class="line">clr(pre, <span class="number">-1</span>); clr(dist, <span class="number">0xc0</span>); clr(inq, <span class="number">0</span>);</div><div class="line">q.push(s); dist[s] = <span class="number">0</span>; inq[s] = <span class="number">1</span>;</div><div class="line"><span class="keyword">while</span>(!q.empty())&#123;</div><div class="line"><span class="keyword">int</span> u = q.front(); q.pop(); inq[u] = <span class="number">0</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; ~i; i = g[i].nxt)&#123;</div><div class="line"><span class="keyword">int</span> v = g[i].to;</div><div class="line"><span class="keyword">if</span>(g[i].c &amp;&amp; dist[u] + g[i].w &gt; dist[v])&#123;</div><div class="line">dist[v] = dist[u] + g[i].w; pre[v] = i;</div><div class="line"><span class="keyword">if</span>(!inq[v])&#123;inq[v] = <span class="number">1</span>; q.push(v);&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> pre[t] != <span class="number">-1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">clr(head, <span class="number">-1</span>);</div><div class="line">m = read(), n = read(); <span class="keyword">int</span> tmp = <span class="number">0</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)&#123; <span class="keyword">int</span> p = m + i - <span class="number">1</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= p; j ++)&#123;</div><div class="line">a[i][j] = read();</div><div class="line">tmp ++; mark[i][j] = tmp;</div><div class="line">&#125;</div><div class="line">&#125; s = tmp * <span class="number">2</span> + <span class="number">1</span>; t = tmp * <span class="number">2</span> + <span class="number">2</span>;</div><div class="line"></div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)&#123; <span class="keyword">int</span> p = m + i - <span class="number">1</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= p; j ++)&#123;</div><div class="line"><span class="keyword">if</span>(mark[i + <span class="number">1</span>][j]) add_edge(mark[i][j] + tmp, mark[i + <span class="number">1</span>][j], <span class="number">1</span>, <span class="number">0</span>);</div><div class="line"><span class="keyword">if</span>(mark[i + <span class="number">1</span>][j + <span class="number">1</span>]) add_edge(mark[i][j] + tmp, mark[i + <span class="number">1</span>][j + <span class="number">1</span>], <span class="number">1</span>, <span class="number">0</span>);</div><div class="line">add_edge(mark[i][j], mark[i][j] + tmp, <span class="number">1</span>, a[i][j]);</div><div class="line"><span class="keyword">if</span>(i == <span class="number">1</span>) add_edge(s, mark[i][j], <span class="number">1</span>, <span class="number">0</span>);</div><div class="line"><span class="keyword">if</span>(i == n) add_edge(mark[i][j] + tmp, t, <span class="number">1</span>, <span class="number">0</span>);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> ans1 = <span class="number">0</span>;</div><div class="line"><span class="keyword">while</span>(spfa())&#123;</div><div class="line"><span class="keyword">int</span> flow = INF;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = t; i != s; i = g[pre[i] ^ <span class="number">1</span>].to) flow = min(flow, g[pre[i]].c);</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = t; i != s; i = g[pre[i] ^ <span class="number">1</span>].to)&#123;</div><div class="line">g[pre[i]].c -= flow; g[pre[i] ^ <span class="number">1</span>].c += flow;</div><div class="line">ans1 += flow * g[pre[i]].w;</div><div class="line">&#125;</div><div class="line">&#125; <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans1);</div><div class="line"></div><div class="line">clr(head, <span class="number">-1</span>); cnt = <span class="number">-1</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)&#123; <span class="keyword">int</span> p = m + i - <span class="number">1</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= p; j ++)&#123;</div><div class="line"><span class="keyword">if</span>(mark[i + <span class="number">1</span>][j]) add_edge(mark[i][j], mark[i + <span class="number">1</span>][j], <span class="number">1</span>, a[i][j]);</div><div class="line"><span class="keyword">if</span>(mark[i + <span class="number">1</span>][j + <span class="number">1</span>]) add_edge(mark[i][j], mark[i + <span class="number">1</span>][j + <span class="number">1</span>], <span class="number">1</span>, a[i][j]);</div><div class="line"><span class="keyword">if</span>(i == <span class="number">1</span>) add_edge(s, mark[i][j], <span class="number">1</span>, <span class="number">0</span>);</div><div class="line"><span class="keyword">if</span>(i == n) add_edge(mark[i][j], t, INF, a[i][j]);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> ans2 = <span class="number">0</span>;</div><div class="line"><span class="keyword">while</span>(spfa())&#123;</div><div class="line"><span class="keyword">int</span> flow = INF;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = t; i != s; i = g[pre[i] ^ <span class="number">1</span>].to) flow = min(flow, g[pre[i]].c);</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = t; i != s; i = g[pre[i] ^ <span class="number">1</span>].to)&#123;</div><div class="line">g[pre[i]].c -= flow; g[pre[i] ^ <span class="number">1</span>].c += flow;</div><div class="line">ans2 += flow * g[pre[i]].w;</div><div class="line">&#125;</div><div class="line">&#125; <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans2);</div><div class="line"></div><div class="line">clr(head, <span class="number">-1</span>); cnt = <span class="number">-1</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)&#123; <span class="keyword">int</span> p = m + i - <span class="number">1</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= p; j ++)&#123;</div><div class="line"><span class="keyword">if</span>(mark[i + <span class="number">1</span>][j]) add_edge(mark[i][j], mark[i + <span class="number">1</span>][j], INF, a[i][j]);</div><div class="line"><span class="keyword">if</span>(mark[i + <span class="number">1</span>][j + <span class="number">1</span>]) add_edge(mark[i][j], mark[i + <span class="number">1</span>][j + <span class="number">1</span>], INF, a[i][j]);</div><div class="line"><span class="keyword">if</span>(i == <span class="number">1</span>) add_edge(s, mark[i][j], <span class="number">1</span>, <span class="number">0</span>);</div><div class="line"><span class="keyword">if</span>(i == n) add_edge(mark[i][j], t, INF, a[i][j]);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> ans3 = <span class="number">0</span>;</div><div class="line"><span class="keyword">while</span>(spfa())&#123;</div><div class="line"><span class="keyword">int</span> flow = INF;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = t; i != s; i = g[pre[i] ^ <span class="number">1</span>].to) flow = min(flow, g[pre[i]].c);</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = t; i != s; i = g[pre[i] ^ <span class="number">1</span>].to)&#123;</div><div class="line">g[pre[i]].c -= flow; g[pre[i] ^ <span class="number">1</span>].c += flow;</div><div class="line">ans3 += flow * g[pre[i]].w;</div><div class="line">&#125;</div><div class="line">&#125; <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans3);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">work();</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="11-运输问题"><a href="#11-运输问题" class="headerlink" title="11.运输问题"></a>11.运输问题</h1><h2 id="题意：-10"><a href="#题意：-10" class="headerlink" title="题意："></a>题意：</h2><p>W 公司有 $m$ 个仓库和 $n$ 个零售商店。第 $i$ 个仓库有 $a_i$ 个单位的货物；第 $j$ 个零售商店需要 $b_j$ 个单位的货物。货物供需平衡。从第 $i$ 个仓库运送每单位货物到第 $j$ 个零售商店的费用为 $c_j$。试设计一个将仓库中所有货物运送到零售商店的运输方案，使总运输费用最少。</p><h2 id="题解：-10"><a href="#题解：-10" class="headerlink" title="题解："></a>题解：</h2><p>这个。。。太水了吧。。。好像都不用动脑子，瞎搞一搞就好了、</p><h2 id="代码：-10"><a href="#代码：-10" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> LF;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">complex</span> &lt;LF&gt; cd;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> PI 3.14159265358979</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x7fffffff</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(x, y) memset(x, y, sizeof(x))</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e3</span> + <span class="number">15</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXM = <span class="number">1e6</span> + <span class="number">15</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span><span class="keyword">int</span> to, nxt, c, w;&#125;g[MAXM &lt;&lt; <span class="number">1</span>];</div><div class="line"><span class="keyword">int</span> head[MAXN], cnt = <span class="number">-1</span>, dist[MAXN], pre[MAXN], a[MAXN], b[MAXN], c[MAXN][MAXN], m, n, s, t;</div><div class="line"><span class="built_in">queue</span> &lt;<span class="keyword">int</span>&gt; q; <span class="keyword">bool</span> inq[MAXN];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> c, <span class="keyword">int</span> w)</span></span>&#123;g[++ cnt] = (Edge)&#123;v, head[u], c, w&#125;; head[u] = cnt;&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> c, <span class="keyword">int</span> w)</span></span>&#123;add(u, v, c, w); add(v, u, <span class="number">0</span>, -w);&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">int</span> r = <span class="number">0</span>, z = <span class="number">1</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line"><span class="keyword">while</span>(ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch == <span class="string">'-'</span>) z = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">while</span>(ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>)&#123;r = r * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">return</span> r * z;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">spfa1</span><span class="params">()</span></span>&#123;</div><div class="line">clr(dist, <span class="number">0x3f</span>); clr(inq, <span class="number">0</span>); clr(pre, <span class="number">-1</span>);</div><div class="line">q.push(s); dist[s] = <span class="number">0</span>; inq[s] = <span class="number">1</span>;</div><div class="line"><span class="keyword">while</span>(!q.empty())&#123;</div><div class="line"><span class="keyword">int</span> u = q.front(); q.pop(); inq[u] = <span class="number">0</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; ~i; i = g[i].nxt)&#123;</div><div class="line"><span class="keyword">int</span> v = g[i].to;</div><div class="line"><span class="keyword">if</span>(g[i].c &amp;&amp; dist[u] + g[i].w &lt; dist[v])&#123;</div><div class="line">dist[v] = dist[u] + g[i].w; pre[v] = i;</div><div class="line"><span class="keyword">if</span>(!inq[v])&#123;inq[v] = <span class="number">1</span>; q.push(v);&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> pre[t] != <span class="number">-1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">spfa2</span><span class="params">()</span></span>&#123;</div><div class="line">clr(dist, <span class="number">0xc0</span>); clr(inq, <span class="number">0</span>); clr(pre, <span class="number">-1</span>);</div><div class="line">q.push(s); dist[s] = <span class="number">0</span>; inq[s] = <span class="number">1</span>;</div><div class="line"><span class="keyword">while</span>(!q.empty())&#123;</div><div class="line"><span class="keyword">int</span> u = q.front(); q.pop(); inq[u] = <span class="number">0</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; ~i; i = g[i].nxt)&#123;</div><div class="line"><span class="keyword">int</span> v = g[i].to;</div><div class="line"><span class="keyword">if</span>(g[i].c &amp;&amp; dist[u] + g[i].w &gt; dist[v])&#123;</div><div class="line">dist[v] = dist[u] + g[i].w; pre[v] = i;</div><div class="line"><span class="keyword">if</span>(!inq[v])&#123;inq[v] = <span class="number">1</span>; q.push(v);&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> pre[t] != <span class="number">-1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">clr(head, <span class="number">-1</span>);</div><div class="line">m = read(), n = read(); s = (m + n) * <span class="number">2</span> + <span class="number">1</span>, t = (m + n) * <span class="number">2</span> + <span class="number">2</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i ++) a[i] = read();</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j ++) b[j] = read();</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i ++)</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j ++)</div><div class="line">c[i][j] = read();</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i ++)&#123; add_edge(s, i, a[i], <span class="number">0</span>);</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j ++)&#123;</div><div class="line">add_edge(i, j + m, a[i], c[i][j]);</div><div class="line"><span class="keyword">if</span>(i == <span class="number">1</span>) add_edge(j + m, t, b[j], <span class="number">0</span>);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> ans1 = <span class="number">0</span>;</div><div class="line"><span class="keyword">while</span>(spfa1())&#123;</div><div class="line"><span class="keyword">int</span> flow = INF;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = t; i != s; i = g[pre[i] ^ <span class="number">1</span>].to)&#123;flow = min(flow, g[pre[i]].c);&#125;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = t; i != s; i = g[pre[i] ^ <span class="number">1</span>].to)&#123;</div><div class="line">g[pre[i]].c -= flow; g[pre[i] ^ <span class="number">1</span>].c += flow;</div><div class="line">ans1 += flow * g[pre[i]].w;</div><div class="line">&#125;</div><div class="line">&#125; <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans1);</div><div class="line"></div><div class="line">clr(head, <span class="number">-1</span>); cnt = <span class="number">-1</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i ++)&#123; add_edge(s, i, a[i], <span class="number">0</span>);</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j ++)&#123;</div><div class="line">add_edge(i, j + m, a[i], c[i][j]);</div><div class="line"><span class="keyword">if</span>(i == <span class="number">1</span>) add_edge(j + m, t, b[j], <span class="number">0</span>);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> ans2 = <span class="number">0</span>;</div><div class="line"><span class="keyword">while</span>(spfa2())&#123;</div><div class="line"><span class="keyword">int</span> flow = INF;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = t; i != s; i = g[pre[i] ^ <span class="number">1</span>].to)&#123;flow = min(flow, g[pre[i]].c);&#125;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = t; i != s; i = g[pre[i] ^ <span class="number">1</span>].to)&#123;</div><div class="line">g[pre[i]].c -= flow; g[pre[i] ^ <span class="number">1</span>].c += flow;</div><div class="line">ans2 += flow * g[pre[i]].w;</div><div class="line">&#125;</div><div class="line">&#125; <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans2);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">work();</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="12-分配问题"><a href="#12-分配问题" class="headerlink" title="12.分配问题"></a>12.分配问题</h1><h2 id="题意：-11"><a href="#题意：-11" class="headerlink" title="题意："></a>题意：</h2><p>有 $n$ 件工作要分配给 $n$ 个人做。第 $i$ 个人做第 $j$ 件工作产生的效益为 $c_{i,j}$。试设计一个将 $n$ 件工作分配给 $n$ 个人做的分配方案，使产生的总效益最大。</p><h2 id="题解：-11"><a href="#题解：-11" class="headerlink" title="题解："></a>题解：</h2><p>太弱了。。。这尼玛哪用动脑子，简直就是裸的模板啊啊啊</p><h2 id="代码：-11"><a href="#代码：-11" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> LF;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">complex</span> &lt;LF&gt; cd;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> PI 3.14159265358979</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x7fffffff</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(x, y) memset(x, y, sizeof(x))</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e3</span> + <span class="number">15</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXM = <span class="number">1e6</span> + <span class="number">15</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span><span class="keyword">int</span> to, nxt, c, w;&#125;g[MAXM &lt;&lt; <span class="number">1</span>];</div><div class="line"><span class="keyword">int</span> head[MAXN], cnt = <span class="number">-1</span>, dist[MAXN], pre[MAXN], c[MAXN][MAXN], n, s, t;</div><div class="line"><span class="built_in">queue</span> &lt;<span class="keyword">int</span>&gt; q; <span class="keyword">bool</span> inq[MAXN];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> c, <span class="keyword">int</span> w)</span></span>&#123;g[++ cnt] = (Edge)&#123;v, head[u], c, w&#125;; head[u] = cnt;&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> c, <span class="keyword">int</span> w)</span></span>&#123;add(u, v, c, w); add(v, u, <span class="number">0</span>, -w);&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">int</span> r = <span class="number">0</span>, z = <span class="number">1</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line"><span class="keyword">while</span>(ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch == <span class="string">'-'</span>) z = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">while</span>(ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>)&#123;r = r * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">return</span> r * z;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">spfa1</span><span class="params">()</span></span>&#123;</div><div class="line">clr(dist, <span class="number">0x3f</span>); clr(inq, <span class="number">0</span>); clr(pre, <span class="number">-1</span>);</div><div class="line">q.push(s); dist[s] = <span class="number">0</span>; inq[s] = <span class="number">1</span>;</div><div class="line"><span class="keyword">while</span>(!q.empty())&#123;</div><div class="line"><span class="keyword">int</span> u = q.front(); q.pop(); inq[u] = <span class="number">0</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; ~i; i = g[i].nxt)&#123;</div><div class="line"><span class="keyword">int</span> v = g[i].to;</div><div class="line"><span class="keyword">if</span>(g[i].c &amp;&amp; dist[u] + g[i].w &lt; dist[v])&#123;</div><div class="line">dist[v] = dist[u] + g[i].w; pre[v] = i;</div><div class="line"><span class="keyword">if</span>(!inq[v])&#123;inq[v] = <span class="number">1</span>; q.push(v);&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> pre[t] != <span class="number">-1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">spfa2</span><span class="params">()</span></span>&#123;</div><div class="line">clr(dist, <span class="number">0xc0</span>); clr(inq, <span class="number">0</span>); clr(pre, <span class="number">-1</span>);</div><div class="line">q.push(s); dist[s] = <span class="number">0</span>; inq[s] = <span class="number">1</span>;</div><div class="line"><span class="keyword">while</span>(!q.empty())&#123;</div><div class="line"><span class="keyword">int</span> u = q.front(); q.pop(); inq[u] = <span class="number">0</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; ~i; i = g[i].nxt)&#123;</div><div class="line"><span class="keyword">int</span> v = g[i].to;</div><div class="line"><span class="keyword">if</span>(g[i].c &amp;&amp; dist[u] + g[i].w &gt; dist[v])&#123;</div><div class="line">dist[v] = dist[u] + g[i].w; pre[v] = i;</div><div class="line"><span class="keyword">if</span>(!inq[v])&#123;inq[v] = <span class="number">1</span>; q.push(v);&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> pre[t] != <span class="number">-1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">clr(head, <span class="number">-1</span>);</div><div class="line">n = read(); s = n * <span class="number">2</span> + <span class="number">1</span>, t = n * <span class="number">2</span> + <span class="number">2</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j ++)</div><div class="line">c[i][j] = read();</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)&#123; add_edge(s, i, <span class="number">1</span>, <span class="number">0</span>);</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j ++)&#123;</div><div class="line">add_edge(i, j + n, <span class="number">1</span>, c[i][j]);</div><div class="line"><span class="keyword">if</span>(i == <span class="number">1</span>) add_edge(j + n, t, <span class="number">1</span>, <span class="number">0</span>);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> ans1 = <span class="number">0</span>;</div><div class="line"><span class="keyword">while</span>(spfa1())&#123;</div><div class="line"><span class="keyword">int</span> flow = INF;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = t; i != s; i = g[pre[i] ^ <span class="number">1</span>].to)&#123;flow = min(flow, g[pre[i]].c);&#125;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = t; i != s; i = g[pre[i] ^ <span class="number">1</span>].to)&#123;</div><div class="line">g[pre[i]].c -= flow; g[pre[i] ^ <span class="number">1</span>].c += flow;</div><div class="line">ans1 += flow * g[pre[i]].w;</div><div class="line">&#125;</div><div class="line">&#125; <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans1);</div><div class="line"></div><div class="line">clr(head, <span class="number">-1</span>); cnt = <span class="number">-1</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)&#123; add_edge(s, i, <span class="number">1</span>, <span class="number">0</span>);</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j ++)&#123;</div><div class="line">add_edge(i, j + n, <span class="number">1</span>, c[i][j]);</div><div class="line"><span class="keyword">if</span>(i == <span class="number">1</span>) add_edge(j + n, t, <span class="number">1</span>, <span class="number">0</span>);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> ans2 = <span class="number">0</span>;</div><div class="line"><span class="keyword">while</span>(spfa2())&#123;</div><div class="line"><span class="keyword">int</span> flow = INF;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = t; i != s; i = g[pre[i] ^ <span class="number">1</span>].to)&#123;flow = min(flow, g[pre[i]].c);&#125;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = t; i != s; i = g[pre[i] ^ <span class="number">1</span>].to)&#123;</div><div class="line">g[pre[i]].c -= flow; g[pre[i] ^ <span class="number">1</span>].c += flow;</div><div class="line">ans2 += flow * g[pre[i]].w;</div><div class="line">&#125;</div><div class="line">&#125; <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans2);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">work();</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="13-负载平衡"><a href="#13-负载平衡" class="headerlink" title="13.负载平衡"></a>13.负载平衡</h1><h2 id="题意：-12"><a href="#题意：-12" class="headerlink" title="题意："></a>题意：</h2><p>G 公司有 $n$ 个沿铁路运输线环形排列的仓库，每个仓库存储的货物数量不等。如何用最少搬运量可以使 $n$ 个仓库的库存数量相同。搬运货物时，只能在相邻的仓库之间搬运。</p><h2 id="题解：-12"><a href="#题解：-12" class="headerlink" title="题解："></a>题解：</h2><p>这个。。。自己看代码吧。以上三题都比较水。</p><h2 id="代码：-12"><a href="#代码：-12" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> LF;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">complex</span> &lt;LF&gt; cd;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> PI 3.14159265358979</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x7fffffff</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(x, y) memset(x, y, sizeof(x))</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e3</span> + <span class="number">15</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXM = <span class="number">1e6</span> + <span class="number">15</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span><span class="keyword">int</span> to, nxt, c, w;&#125;g[MAXM &lt;&lt; <span class="number">1</span>];</div><div class="line"><span class="keyword">int</span> head[MAXN], cnt = <span class="number">-1</span>, dist[MAXN], pre[MAXN], n, s, t, a[MAXN];</div><div class="line"><span class="built_in">queue</span> &lt;<span class="keyword">int</span>&gt; q; <span class="keyword">bool</span> inq[MAXN];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> c, <span class="keyword">int</span> w)</span></span>&#123;g[++ cnt] = (Edge)&#123;v, head[u], c, w&#125;; head[u] = cnt;&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> c, <span class="keyword">int</span> w)</span></span>&#123;add(u, v, c, w); add(v, u, <span class="number">0</span>, -w);&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">int</span> r = <span class="number">0</span>, z = <span class="number">1</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line"><span class="keyword">while</span>(ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch == <span class="string">'-'</span>) z = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">while</span>(ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>)&#123;r = r * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">return</span> r * z;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">spfa</span><span class="params">()</span></span>&#123;</div><div class="line">clr(pre, <span class="number">-1</span>); clr(dist, <span class="number">0x3f</span>); clr(inq, <span class="number">0</span>);</div><div class="line">dist[s] = <span class="number">0</span>; q.push(s); inq[s] = <span class="number">1</span>;</div><div class="line"><span class="keyword">while</span>(!q.empty())&#123;</div><div class="line"><span class="keyword">int</span> u = q.front(); q.pop(); inq[u] = <span class="number">0</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; ~i; i = g[i].nxt)&#123;</div><div class="line"><span class="keyword">int</span> v = g[i].to;</div><div class="line"><span class="keyword">if</span>(g[i].c &amp;&amp; dist[u] + g[i].w &lt; dist[v])&#123;</div><div class="line">dist[v] = dist[u] + g[i].w; pre[v] = i;</div><div class="line"><span class="keyword">if</span>(!inq[v])&#123;q.push(v); inq[v] = <span class="number">1</span>;&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> pre[t] != <span class="number">-1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">clr(head, <span class="number">-1</span>);</div><div class="line">n = read(); s = n + <span class="number">1</span>, t = n + <span class="number">2</span>; <span class="keyword">int</span> tot = <span class="number">0</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)&#123;</div><div class="line">a[i] = read(); tot += a[i];</div><div class="line">&#125; tot /= n;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)&#123;</div><div class="line"><span class="keyword">if</span>(i != n) add_edge(i, i + <span class="number">1</span>, INF, <span class="number">1</span>);</div><div class="line"><span class="keyword">else</span> add_edge(i, <span class="number">1</span>, INF, <span class="number">1</span>);</div><div class="line"><span class="keyword">if</span>(i != <span class="number">1</span>) add_edge(i, i - <span class="number">1</span>, INF, <span class="number">1</span>);</div><div class="line"><span class="keyword">else</span> add_edge(i, n, INF, <span class="number">1</span>);</div><div class="line">add_edge(i, t, tot, <span class="number">0</span>);</div><div class="line">add_edge(s, i, a[i], <span class="number">0</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line"><span class="keyword">while</span>(spfa())&#123;</div><div class="line"><span class="keyword">int</span> flow = INF;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = t; i != s; i = g[pre[i] ^ <span class="number">1</span>].to) flow = min(flow, g[pre[i]].c);</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = t; i != s; i = g[pre[i] ^ <span class="number">1</span>].to)&#123;</div><div class="line">g[pre[i]].c -= flow; g[pre[i] ^ <span class="number">1</span>].c += flow;</div><div class="line">ans += flow * g[pre[i]].w;</div><div class="line">&#125;</div><div class="line">&#125; <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">work();</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="14-最长-k-可重区间集"><a href="#14-最长-k-可重区间集" class="headerlink" title="14.最长 k 可重区间集"></a>14.最长 k 可重区间集</h1><h2 id="题意：-13"><a href="#题意：-13" class="headerlink" title="题意："></a>题意：</h2><p>网址：<a href="https://loj.ac/problem/6014" target="_blank" rel="external">传送门</a></p><h2 id="题解：-13"><a href="#题解：-13" class="headerlink" title="题解："></a>题解：</h2><p>我们不知道这个开区间到底会有多长，所以我们首先肯定要离散化一下。</p><p>然后接下来就简单了。由于我们要限制每个点最多只能被覆盖k次，所以我们只给这个网络k的流量，没选一条，就将这段区间的剩余流量-1，具体实现就是i-&gt;i+1连一条容量为INF，费用为0的边；对于备选线段i-&gt;j，我们从i向j连一条容量为1，费用为其长度的边。</p><h2 id="代码：-13"><a href="#代码：-13" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> LF;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">complex</span> &lt;LF&gt; cd;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> PI 3.14159265358979</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x7fffffff</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(x, y) memset(x, y, sizeof(x))</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e3</span> + <span class="number">15</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXM = <span class="number">1e6</span> + <span class="number">15</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span><span class="keyword">int</span> to, nxt, c, w;&#125;g[MAXM &lt;&lt; <span class="number">1</span>];</div><div class="line"><span class="keyword">int</span> head[MAXN], cnt = <span class="number">-1</span>, dist[MAXN], pre[MAXN], n, k, s, t, l[MAXN], r[MAXN], dd[MAXN &lt;&lt; <span class="number">1</span>], len = <span class="number">0</span>, mark[MAXM];</div><div class="line"><span class="built_in">queue</span> &lt;<span class="keyword">int</span>&gt; q; <span class="keyword">bool</span> inq[MAXN];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> c, <span class="keyword">int</span> w)</span></span>&#123;g[++ cnt] = (Edge)&#123;v, head[u], c, w&#125;; head[u] = cnt;&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> c, <span class="keyword">int</span> w)</span></span>&#123;add(u, v, c, w); add(v, u, <span class="number">0</span>, -w);&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">int</span> r = <span class="number">0</span>, z = <span class="number">1</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line"><span class="keyword">while</span>(ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch == <span class="string">'-'</span>) z = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">while</span>(ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>)&#123;r = r * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">return</span> r * z;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">spfa</span><span class="params">()</span></span>&#123;</div><div class="line">clr(inq, <span class="number">0</span>); clr(dist, <span class="number">0xc0</span>); clr(pre, <span class="number">-1</span>);</div><div class="line">q.push(s); dist[s] = <span class="number">0</span>; inq[s] = <span class="number">1</span>;</div><div class="line"><span class="keyword">while</span>(!q.empty())&#123;</div><div class="line"><span class="keyword">int</span> u = q.front(); q.pop(); inq[u] = <span class="number">0</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; ~i; i = g[i].nxt)&#123;</div><div class="line"><span class="keyword">int</span> v = g[i].to;</div><div class="line"><span class="keyword">if</span>(g[i].c &amp;&amp; dist[u] + g[i].w &gt; dist[v])&#123;</div><div class="line">dist[v] = dist[u] + g[i].w; pre[v] = i;</div><div class="line"><span class="keyword">if</span>(!inq[v])&#123;inq[v] = <span class="number">1</span>; q.push(v);&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> pre[t] != <span class="number">-1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">clr(head, <span class="number">-1</span>);</div><div class="line">n = read(); k = read();</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)&#123;</div><div class="line">l[i] = read(), r[i] = read();</div><div class="line"><span class="keyword">if</span>(l[i] &gt; r[i]) swap(l[i], r[i]);</div><div class="line">dd[++ len] = l[i], dd[++ len] = r[i];</div><div class="line">&#125;</div><div class="line">sort(dd + <span class="number">1</span>, dd + len + <span class="number">1</span>); s = len + <span class="number">1</span>, t = len + <span class="number">2</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= len; i ++) mark[dd[i]] = i;</div><div class="line">add_edge(s, <span class="number">1</span>, k, <span class="number">0</span>); add_edge(len, t, k, <span class="number">0</span>);</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; len; i ++) add_edge(i, i + <span class="number">1</span>, INF, <span class="number">0</span>);</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)&#123;</div><div class="line">add_edge(mark[l[i]], mark[r[i]], <span class="number">1</span>, r[i] - l[i]);</div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line"><span class="keyword">while</span>(spfa())&#123;</div><div class="line"><span class="keyword">int</span> flow = INF;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = t; i != s; i = g[pre[i] ^ <span class="number">1</span>].to) flow = min(flow, g[pre[i]].c);</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = t; i != s; i = g[pre[i] ^ <span class="number">1</span>].to)&#123;</div><div class="line">g[pre[i]].c -= flow; g[pre[i] ^ <span class="number">1</span>].c += flow;</div><div class="line">ans += flow * g[pre[i]].w;</div><div class="line">&#125;</div><div class="line">&#125; <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">work();</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="15-星际转移"><a href="#15-星际转移" class="headerlink" title="15.星际转移"></a>15.星际转移</h1><h2 id="题意：-14"><a href="#题意：-14" class="headerlink" title="题意："></a>题意：</h2><p>网址：<a href="https://loj.ac/problem/6015" target="_blank" rel="external">传送门</a></p><h2 id="题解：-14"><a href="#题解：-14" class="headerlink" title="题解："></a>题解：</h2><p>这个属于<strong>枚举答案，构造网络流判定的问题</strong>，前面好像有一道什么柱子放球的问题，这两个应该是差不多的，只不过这个建图更难一些。</p><p>首先判断从地球到月球是否存在一条路线，如果不存在那么无解，否则把每个太空站按照每天拆分成d个点，<i,d>表示第i个站第d天。建立附加源S汇T，顺序枚举答案Day。</i,d></p><p>1、对于第Day天，从S到<0,day>连接一条容量为无穷大的有向边。<br>2、从&lt;−1,Day&gt;到T连接一条容量为无穷大的有向边。<br>3、对于第i个太空船，设第Day-1天在a处，第Day天在b处，从<a,day−1>到<b,day>连接一条容量为该太空船容量的有向边。<br>4、对于第i个太空站，从<i,day−1>到<i,day>连接一条容量为无穷大的有向边。<br>5、求当前网络最大流，如果最大流量大于等于地球上人数K，停止枚举，当前Day值就是答案。</i,day></i,day−1></b,day></a,day−1></0,day></p><h2 id="代码：-14"><a href="#代码：-14" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> LF;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">complex</span> &lt;LF&gt; cd;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> PI 3.14159265358979</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x7fffffff</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(x, y) memset(x, y, sizeof(x))</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e4</span> + <span class="number">15</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXM = <span class="number">1e6</span> + <span class="number">15</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span><span class="keyword">int</span> to, nxt, c;&#125;g[MAXM &lt;&lt; <span class="number">1</span>];</div><div class="line"><span class="keyword">int</span> head[MAXN], cnt = <span class="number">-1</span>, fa[MAXN], cur[MAXN], d[MAXN], n, m, k, s, t, wgt[MAXN], tt[MAXN], stop[MAXN][MAXN], mark[MAXN][MAXN]; <span class="comment">//mark[i][j]表示第j天太空站（地球：n+1 月球：n+2）i的编号 </span></div><div class="line"><span class="built_in">queue</span> &lt;<span class="keyword">int</span>&gt; q;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> c)</span></span>&#123;g[++ cnt] = (Edge)&#123;v, head[u], c&#125;; head[u] = cnt;&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> c)</span></span>&#123;add(u, v, c); add(v, u, <span class="number">0</span>);&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">getfa</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">return</span> x == fa[x] ? x : fa[x] = getfa(fa[x]);&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">int</span> r = <span class="number">0</span>, z = <span class="number">1</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line"><span class="keyword">while</span>(ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch == <span class="string">'-'</span>) z = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">while</span>(ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>)&#123;r = r * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">return</span> r * z;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">bfs</span><span class="params">()</span></span>&#123;</div><div class="line">clr(d, <span class="number">-1</span>);</div><div class="line">q.push(s); d[s] = <span class="number">0</span>;</div><div class="line"><span class="keyword">while</span>(!q.empty())&#123;</div><div class="line"><span class="keyword">int</span> u = q.front(); q.pop();</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; ~i; i = g[i].nxt)&#123;</div><div class="line"><span class="keyword">int</span> v = g[i].to;</div><div class="line"><span class="keyword">if</span>(g[i].c &amp;&amp; d[v] == <span class="number">-1</span>)&#123;</div><div class="line">d[v] = d[u] + <span class="number">1</span>;</div><div class="line">q.push(v);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> d[t] != <span class="number">-1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> flow)</span></span>&#123;</div><div class="line"><span class="keyword">if</span>(u == t) <span class="keyword">return</span> flow;</div><div class="line"><span class="keyword">int</span> ret = <span class="number">0</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; ~i; i = g[i].nxt)&#123;</div><div class="line"><span class="keyword">int</span> v = g[i].to;</div><div class="line"><span class="keyword">if</span>(g[i].c &amp;&amp; d[v] == d[u] + <span class="number">1</span>)&#123;</div><div class="line"><span class="keyword">int</span> tmp = dfs(v, min(g[i].c, flow));</div><div class="line">flow -= tmp; g[i].c -= tmp;</div><div class="line">ret += tmp; g[i ^ <span class="number">1</span>].c += tmp;</div><div class="line"><span class="keyword">if</span>(!flow) <span class="keyword">break</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>(!ret) d[u] = <span class="number">-1</span>;</div><div class="line"><span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">clr(head, <span class="number">-1</span>);</div><div class="line">n = read(), m = read(), k = read(); s = <span class="number">0</span>, t = <span class="number">8015</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n + <span class="number">2</span>; i ++) fa[i] = i;</div><div class="line"><span class="keyword">int</span> earth = n + <span class="number">1</span>, moon = n + <span class="number">2</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i ++)&#123;</div><div class="line">wgt[i] = read(); tt[i] = read(); <span class="keyword">bool</span> flag = <span class="number">0</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= tt[i]; j ++)&#123;</div><div class="line">stop[i][j] = read();</div><div class="line"><span class="keyword">if</span>(stop[i][j] == <span class="number">0</span>) stop[i][j] = earth;</div><div class="line"><span class="keyword">if</span>(stop[i][j] == <span class="number">-1</span>) stop[i][j] = moon;</div><div class="line"><span class="keyword">int</span> f1 = getfa(stop[i][<span class="number">1</span>]), f2 = getfa(stop[i][j]);</div><div class="line"><span class="keyword">if</span>(f1 != f2 &amp;&amp; j != <span class="number">1</span>) fa[f2] = f1;</div><div class="line">&#125;</div><div class="line">&#125; <span class="keyword">int</span> tmp = <span class="number">0</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n + <span class="number">2</span>; i ++)&#123;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= <span class="number">515</span>; j ++)&#123;</div><div class="line">tmp ++;</div><div class="line">mark[i][j] = tmp;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>(getfa(earth) != getfa(moon))&#123;<span class="built_in">printf</span>(<span class="string">"0\n"</span>); <span class="keyword">return</span> ;&#125;</div><div class="line"><span class="keyword">int</span> Day = <span class="number">0</span>, ans = <span class="number">0</span>;</div><div class="line">add_edge(s, mark[earth][<span class="number">0</span>], INF); add_edge(mark[moon][<span class="number">0</span>], t, INF);</div><div class="line"><span class="keyword">while</span>(ans &lt; k)&#123; Day ++;</div><div class="line">add_edge(s, mark[earth][Day], INF); add_edge(mark[moon][Day], t, INF);</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i ++)&#123;</div><div class="line"><span class="keyword">int</span> a = stop[i][(Day - <span class="number">1</span>) % tt[i] + <span class="number">1</span>], b = stop[i][Day % tt[i] + <span class="number">1</span>];</div><div class="line">add_edge(mark[a][Day - <span class="number">1</span>], mark[b][Day], wgt[i]);</div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) add_edge(mark[i][Day - <span class="number">1</span>], mark[i][Day], INF);</div><div class="line"><span class="keyword">while</span>(bfs())&#123;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">8015</span>; i ++) cur[i] = head[i];</div><div class="line">ans += dfs(s, INF);</div><div class="line">&#125;</div><div class="line">&#125; <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, Day);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">work();</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="16-航空路线问题"><a href="#16-航空路线问题" class="headerlink" title="16.航空路线问题"></a>16.航空路线问题</h1><h2 id="题意：-15"><a href="#题意：-15" class="headerlink" title="题意："></a>题意：</h2><p>给定一张航空图，图中顶点代表城市，边代表两个城市间的直通航线。现要求找出一条满足下述限制条件的且途经城市最多的旅行路线。</p><ol><li>从最西端城市出发，单向从西向东途经若干城市到达最东端城市，然后再单向从东向西飞回起点（可途经若干城市）。</li><li>除起点城市外，任何城市只能访问一次。</li></ol><p>对于给定的航空图，试设计一个算法找出一条满足要求的最佳航空旅行路线。</p><h2 id="题解：-15"><a href="#题解：-15" class="headerlink" title="题解："></a>题解：</h2><p>这个。。。我们看到了任何城市只能访问一次，就知道了这道题肯定是要拆点的。</p><p>然后瞎搞不就完了吗。。。</p><h2 id="代码：-15"><a href="#代码：-15" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i, a, b) for(int i = a; i &lt;= b; i ++)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REPG(i, x) for(int i = head[x]; i; i = g[i].nxt)</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(x, y) memset(x, y, sizeof(x));</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x7fffffff</span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> LF;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">Max</span><span class="params">(LL a, LL b)</span></span>&#123;<span class="keyword">return</span> a &gt; b ? a : b;&#125;</div><div class="line"><span class="function">LL <span class="title">Min</span><span class="params">(LL a, LL b)</span></span>&#123;<span class="keyword">return</span> a &lt; b ? a : b;&#125;</div><div class="line"><span class="function">LL <span class="title">abs</span><span class="params">(LL x)</span></span>&#123;<span class="keyword">return</span> x &gt; <span class="number">0</span> ? x : -x;&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e3</span> + <span class="number">15</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXM = <span class="number">1e6</span> + <span class="number">15</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span><span class="keyword">int</span> to, nxt, c, w;&#125;g[MAXM &lt;&lt; <span class="number">1</span>];</div><div class="line"><span class="keyword">int</span> head[MAXN], cnt = <span class="number">-1</span>, dist[MAXN], pre[MAXN], n, m, s, t;</div><div class="line"><span class="built_in">queue</span> &lt;<span class="keyword">int</span>&gt; q; <span class="keyword">bool</span> inq[MAXN]; <span class="built_in">map</span> &lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt; a; <span class="built_in">map</span> &lt;<span class="keyword">int</span>, <span class="built_in">string</span>&gt; b;</div><div class="line"><span class="built_in">string</span> ss1[MAXN];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> c, <span class="keyword">int</span> w)</span></span>&#123;g[++ cnt] = (Edge)&#123;v, head[u], c, w&#125;; head[u] = cnt;&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> c, <span class="keyword">int</span> w)</span></span>&#123;add(u, v, c, w); add(v, u, <span class="number">0</span>, -w);&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">int</span> r = <span class="number">0</span>, z = <span class="number">1</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line"><span class="keyword">while</span>(ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch == <span class="string">'-'</span>) z = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">while</span>(ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>)&#123;r = r * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">return</span> r * z;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">spfa</span><span class="params">()</span></span>&#123;</div><div class="line">clr(inq, <span class="number">0</span>); clr(pre, <span class="number">-1</span>); clr(dist, <span class="number">0xc0</span>);</div><div class="line">q.push(s); dist[s] = <span class="number">0</span>; inq[s] = <span class="number">1</span>;</div><div class="line"><span class="keyword">while</span>(!q.empty())&#123;</div><div class="line"><span class="keyword">int</span> u = q.front(); q.pop(); inq[u] = <span class="number">0</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; ~i; i = g[i].nxt)&#123;</div><div class="line"><span class="keyword">int</span> v = g[i].to;</div><div class="line"><span class="keyword">if</span>(g[i].c &amp;&amp; dist[u] + g[i].w &gt; dist[v])&#123;</div><div class="line">dist[v] = dist[u] + g[i].w; pre[v] = i;</div><div class="line"><span class="keyword">if</span>(!inq[v])&#123;inq[v] = <span class="number">1</span>; q.push(v);&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> pre[t] != <span class="number">-1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; ~i; i = g[i].nxt)&#123;</div><div class="line"><span class="keyword">int</span> v = g[i].to;</div><div class="line"><span class="keyword">if</span>(v == t) <span class="keyword">break</span>;</div><div class="line"><span class="keyword">if</span>(!g[i].c)&#123;</div><div class="line"><span class="keyword">if</span>(u == <span class="number">1</span> + n) g[i].c = <span class="number">1</span>;</div><div class="line"><span class="built_in">cout</span> &lt;&lt; b[v] &lt;&lt;<span class="built_in">endl</span>;</div><div class="line">print(v + n);</div><div class="line"><span class="keyword">break</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">print2</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; ~i; i = g[i].nxt)&#123;</div><div class="line"><span class="keyword">int</span> v = g[i].to;</div><div class="line"><span class="keyword">if</span>(v == t) <span class="keyword">break</span>;</div><div class="line"><span class="keyword">if</span>(!g[i].c)&#123;</div><div class="line">print2(v + n);</div><div class="line"><span class="keyword">if</span>(b[v] != ss1[n]) <span class="built_in">cout</span> &lt;&lt; b[v] &lt;&lt;<span class="built_in">endl</span>;</div><div class="line"><span class="keyword">break</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">clr(head, <span class="number">-1</span>);</div><div class="line">n = read(), m = read(); s = n * <span class="number">2</span> + <span class="number">1</span>, t = n * <span class="number">2</span> + <span class="number">2</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)&#123;</div><div class="line"><span class="built_in">cin</span> &gt;&gt; ss1[i];</div><div class="line">a[ss1[i]] = i; b[i] = ss1[i];</div><div class="line"><span class="keyword">if</span>(i == <span class="number">1</span> || i == n) add_edge(i, i + n, <span class="number">2</span>, <span class="number">1</span>);</div><div class="line"><span class="keyword">else</span> add_edge(i, i + n, <span class="number">1</span>, <span class="number">1</span>);</div><div class="line">&#125;</div><div class="line">add_edge(s, <span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>); add_edge(n * <span class="number">2</span>, t, <span class="number">2</span>, <span class="number">0</span>); <span class="keyword">int</span> flag = cnt - <span class="number">1</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i ++)&#123;</div><div class="line"><span class="built_in">string</span> x, y; <span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y;</div><div class="line"><span class="keyword">int</span> xx = a[x], yy = a[y]; <span class="keyword">if</span>(xx &gt; yy) swap(xx, yy);</div><div class="line"><span class="keyword">if</span>(xx == <span class="number">1</span> &amp;&amp; yy == n) add_edge(xx + n, yy, <span class="number">2</span>, <span class="number">0</span>); <span class="keyword">else</span> add_edge(a[x] + n, a[y], <span class="number">1</span>, <span class="number">0</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line"><span class="keyword">while</span>(spfa())&#123;</div><div class="line"><span class="keyword">int</span> flow = INF;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = t; i != s; i = g[pre[i] ^ <span class="number">1</span>].to) flow = min(flow, g[pre[i]].c);</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = t; i != s; i = g[pre[i] ^ <span class="number">1</span>].to)&#123;</div><div class="line">g[pre[i]].c -= flow; g[pre[i] ^ <span class="number">1</span>].c += flow;</div><div class="line">ans += flow * g[pre[i]].w;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>(g[flag].c)&#123;<span class="built_in">printf</span>(<span class="string">"No Solution!\n"</span>); <span class="keyword">return</span> ;&#125;</div><div class="line"><span class="built_in">cout</span>&lt;&lt;ans - <span class="number">2</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">print(s); print2(s);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">work();</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="17-深海机器人问题"><a href="#17-深海机器人问题" class="headerlink" title="17.深海机器人问题"></a>17.深海机器人问题</h1><h2 id="题意：-16"><a href="#题意：-16" class="headerlink" title="题意："></a>题意：</h2><p>深海资源考察探险队的潜艇将到达深海的海底进行科学考察。</p><p>潜艇内有多个深海机器人。潜艇到达深海海底后，深海机器人将离开潜艇向预定目标移动。</p><p>深海机器人在移动中还必须沿途采集海底生物标本。沿途生物标本由最先遇到它的深海机器人完成采集。</p><p>每条预定路径上的生物标本的价值是已知的，而且生物标本只能被采集一次。</p><p>本题限定深海机器人只能从其出发位置沿着向北或向东的方向移动，而且多个深海机器人可以在同一时间占据同一位置。</p><p>用一个 $P\times Q$ 网格表示深海机器人的可移动位置。西南角的坐标为 $(0,0)$，东北角的坐标为$ (Q,P)$。</p><p>给定每个深海机器人的出发位置和目标位置，以及每条网格边上生物标本的价值。</p><p>计算深海机器人的最优移动方案， 使深海机器人到达目的地后，采集到的生物标本的总价值最高。</p><h2 id="题解：-16"><a href="#题解：-16" class="headerlink" title="题解："></a>题解：</h2><p>这道题。。。我很草率的就A了，但是后面的一道题让我思考了良久，下一题再说这个问题是什么。</p><p>这道题我没拆点，因为不拆点看起来是对的（自己想想就知道了）。</p><p>建图就不说了，挺简单的。</p><p>当然，这道题拆点肯定是能做的，甚至这个方法比较好想。</p><h2 id="代码：-16"><a href="#代码：-16" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> LF;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">complex</span> &lt;LF&gt; cd;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(x, y) memset(x, y, sizeof(x))</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x7fffffff</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e3</span> + <span class="number">15</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXM = <span class="number">1e6</span> + <span class="number">15</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span><span class="keyword">int</span> to, nxt, c, w;&#125;g[MAXM &lt;&lt; <span class="number">1</span>];</div><div class="line"><span class="keyword">int</span> head[MAXN], cnt = <span class="number">-1</span>, pre[MAXN], dist[MAXN], mark[MAXN][MAXN], a, b, p, q, s, t, n, m;</div><div class="line"><span class="built_in">queue</span> &lt;<span class="keyword">int</span>&gt; q1; <span class="keyword">bool</span> inq[MAXN];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> c, <span class="keyword">int</span> w)</span></span>&#123;g[++ cnt] = (Edge)&#123;v, head[u], c, w&#125;; head[u] = cnt;&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> c, <span class="keyword">int</span> w)</span></span>&#123;add(u, v, c, w); add(v, u, <span class="number">0</span>, -w);&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">int</span> r = <span class="number">0</span>, z = <span class="number">1</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line"><span class="keyword">while</span>(ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch == <span class="string">'-'</span>) z = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">while</span>(ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>)&#123;r = r * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">return</span> r * z;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">spfa</span><span class="params">()</span></span>&#123;</div><div class="line">clr(inq, <span class="number">0</span>); clr(pre, <span class="number">-1</span>); clr(dist, <span class="number">0xc0</span>);</div><div class="line">q1.push(s); dist[s] = <span class="number">0</span>; inq[s] = <span class="number">1</span>;</div><div class="line"><span class="keyword">while</span>(!q1.empty())&#123;</div><div class="line"><span class="keyword">int</span> u = q1.front(); q1.pop(); inq[u] = <span class="number">0</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; ~i; i = g[i].nxt)&#123;</div><div class="line"><span class="keyword">int</span> v = g[i].to;</div><div class="line"><span class="keyword">if</span>(g[i].c &amp;&amp; dist[u] + g[i].w &gt; dist[v])&#123;</div><div class="line">dist[v] = dist[u] + g[i].w; pre[v] = i;</div><div class="line"><span class="keyword">if</span>(!inq[v])&#123;inq[v] = <span class="number">1</span>; q1.push(v);&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> pre[t] != <span class="number">-1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">clr(head, <span class="number">-1</span>);</div><div class="line">a = read(), b = read(); p = read() + <span class="number">1</span>, q = read() + <span class="number">1</span>; <span class="keyword">int</span> tmp = <span class="number">0</span>;</div><div class="line">s = p * q + <span class="number">1</span>, t = p * q + <span class="number">2</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= p; i ++)</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= q; j ++) mark[i][j] = ++ tmp;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= p; i ++)&#123;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; q; j ++)&#123;</div><div class="line"><span class="keyword">int</span> x = read();</div><div class="line">add_edge(mark[i][j], mark[i][j + <span class="number">1</span>], <span class="number">1</span>, x);</div><div class="line">add_edge(mark[i][j], mark[i][j + <span class="number">1</span>], INF, <span class="number">0</span>);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= q; i ++)&#123;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; p; j ++)&#123;</div><div class="line"><span class="keyword">int</span> x = read();</div><div class="line">add_edge(mark[j][i], mark[j + <span class="number">1</span>][i], <span class="number">1</span>, x);</div><div class="line">add_edge(mark[j][i], mark[j + <span class="number">1</span>][i], INF, <span class="number">0</span>);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= a; i ++)&#123;</div><div class="line"><span class="keyword">int</span> k = read(), x = read() + <span class="number">1</span>, y = read() + <span class="number">1</span>;</div><div class="line">add_edge(s, mark[x][y], k, <span class="number">0</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= b; i ++)&#123;</div><div class="line"><span class="keyword">int</span> k = read(), x = read() + <span class="number">1</span>, y = read() + <span class="number">1</span>;</div><div class="line">add_edge(mark[x][y], t, k, <span class="number">0</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line"><span class="keyword">while</span>(spfa())&#123;</div><div class="line"><span class="keyword">int</span> flow = INF;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = t; i != s; i = g[pre[i] ^ <span class="number">1</span>].to) flow = min(flow, g[pre[i]].c);</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = t; i != s; i = g[pre[i] ^ <span class="number">1</span>].to)&#123;</div><div class="line">g[pre[i]].c -= flow; g[pre[i] ^ <span class="number">1</span>].c += flow;</div><div class="line">ans += flow * g[pre[i]].w;</div><div class="line">&#125;</div><div class="line">&#125; <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">work();</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="18-火星探险问题"><a href="#18-火星探险问题" class="headerlink" title="18.火星探险问题"></a>18.火星探险问题</h1><h2 id="题意：-17"><a href="#题意：-17" class="headerlink" title="题意："></a>题意：</h2><p>火星探险队的登陆舱将在火星表面着陆，登陆舱内有多部障碍物探测车。</p><p>登陆舱着陆后，探测车将离开登陆舱向先期到达的传送器方向移动。</p><p>探测车在移动中还必须采集岩石标本。</p><p>每一块岩石标本由最先遇到它的探测车完成采集。</p><p>每块岩石标本只能被采集一次。</p><p>岩石标本被采集后，其他探测车可以从原来岩石标本所在处通过。</p><p>探测车不能通过有障碍的地面。</p><p>本题限定探测车只能从登陆处沿着向南或向东的方向朝传送器移动，而且多个探测车可以在同一时间占据同一位置。</p><p>如果某个探测车在到达传送器以前不能继续前进，则该车所采集的岩石标本将全部损失。</p><p>用一个 $P\times Q$ 网格表示登陆舱与传送器之间的位置。登陆舱的位置在 $(X_1,Y_1)$ 处，传送器 的位置在 $(X_P,Y_Q)$处。 给定每个位置的状态，计算探测车的最优移动方案，使到达传送器的探测车的数量最多， 而且探测车采集到的岩石标本的数量最多。</p><h2 id="题解：-17"><a href="#题解：-17" class="headerlink" title="题解："></a>题解：</h2><p>这道题我最开始也想用和上一题差不多的方法，然而，发现是错的，就是为什么是错的呢？</p><p>这种的走格子的如果转化成上一题走边的话，你会发现有一些边加了很多次，所以这显然是错的。拆点做的话，便能很好的限制一条边被算了两次。</p><p>如果我们把这道题改改，我们依然走格子，但是权值在边上呢？这时候，我能可以发现，我们把这个图转化成跟上一问差不多的图，是没有问题的，是不会有边算了2次的。</p><p>如果没有懂得话，可以结合下面的图看一看。</p><p><img src="/2017/12/27/网络流24题总结/explanation.png" alt="explanation"></p><h1 id="19-骑士共存问题"><a href="#19-骑士共存问题" class="headerlink" title="19.骑士共存问题"></a>19.骑士共存问题</h1><h2 id="题意：-18"><a href="#题意：-18" class="headerlink" title="题意："></a>题意：</h2><p>在一个 $n\times n$ 个方格的国际象棋棋盘上，马（骑士）可以攻击的棋盘方格如图所示。棋盘上某些方格设置了障碍，骑士不得进入。</p><p>对于给定的 n×n\text{n} \times \text{n}n×n 个方格的国际象棋棋盘和障碍标志，计算棋盘上最多可以放置多少个骑士，使得它们彼此互不攻击。</p><h2 id="题解：-18"><a href="#题解：-18" class="headerlink" title="题解："></a>题解：</h2><p>这道题又是一个方格问题。首先我们要做的还是染色。染完色后我们发现两个能互相攻击的骑士颜色互不相同，然后有冲突的连边，算最大点独立集即可。</p><p><strong>心得</strong>：这次收获还是蛮大的，20道题刷了2.5天，速度还是有些慢了，一天才8道，不过这才刚开始，倒是还能接受。估计这20题也让我把网络流的大部分常见的建模套路全都熟悉了一边，所以说收获真的始挺大的。</p>]]></content>
      
      <categories>
          
          <category> 总结 </category>
          
          <category> 刷题总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络流 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>混合图求欧拉回路</title>
      <link href="/2017/12/27/%E6%B7%B7%E5%90%88%E5%9B%BE%E6%B1%82%E6%AC%A7%E6%8B%89%E5%9B%9E%E8%B7%AF/"/>
      <content type="html"><![CDATA[<p>刚学完网络流，正好看到了这个混合图求欧拉回路也是用网络流做，就学了学。</p><p>先推荐一篇blog，写的是真好：<a href="http://blog.csdn.net/commonc/article/details/52442882" target="_blank" rel="external">混合图求欧拉回路</a></p><p>我这篇也是从他那里转的。</p><p><strong>算法目的：</strong>求混合图(有的边是单向，有的边是双向)的欧拉回路 </p><p><strong>预备知识：</strong></p><p>1.无向图欧拉回路求法（其实就是dfs）</p><p>2.有向图欧拉回路球阀（其实就是无向图的dfs倒着输出）</p><p>3.网络流算法</p><p><strong>大概思路：</strong></p><p>1.先对所有无向边进行任意定向，即随机为他们确定一个方向<br>2.此时这张图变成了一个有向图，我们计算出所有点的入度和出度，如果有点的入度与出度的奇偶性不同，那么无解 </p><p>3.将所有入度&gt;出度的点向超级汇点连一条容量为$\frac{入度−出度}{2}$的边，超级源点向所有出度&gt;入度的点连一条容量为$\frac{出度−入度}{2}$的边，然后对于原图中所有的定向为(a,b)无向边连一条从a到b容量为1的边<br>4.跑网络流，如果正好能使所有从超级源点出来的边满流，则有解<br>5.把在网络流中那些因为原图无向边而建的流量为1的边中经过流量的边反向，就形成了一个能跑出欧拉回路的有向图，如果要求方案，用有向图求欧拉回路的方法求解即可 </p><p><strong>算法解析：</strong></p><p>第一步先定向没什么好说的。根据预备知识我们可以得到，只有当所有点的“入度=出度”时，这张图才能有欧拉回路。所以我们的目标是调整“无向边”的方向使得每个点的入度等于出度。<br>而考虑我们刚才所进行的网络流建图，从源到汇的一条增广路中经过的那些“原来是无向边而产生的边”，相当于把它们全部进行反向。这样造成的后果就是中间经过的那些点出度入度不变，只有一开始的点入度+1，出度-1、最后的点入度-1，出度+1.所以当源点到一个点的那条边满流时，就意味着这个点的出度已经等于入度了，自调整的过程已经完成。而当全部的点全部完成这一事件时，就说明已经能找到一条欧拉回路了。</p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=28815250&auto=1&height=66"></iframe>]]></content>
      
      <categories>
          
          <category> 知识点 </category>
          
          <category> 讲解与实践 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 欧拉回路 </tag>
            
            <tag> 网络流 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>vijos 1880 ファーラの力 题解</title>
      <link href="/2017/12/27/vijos-1880%E9%A2%98%E8%A7%A3/"/>
      <content type="html"><![CDATA[<h1 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>窗外斜阳 日暮西山 倚栏眺<br>想着当年气盛青涩的年少<br>时光湍急 岁月汹涌 物是人已非<br>年年我挥汗洒泪赴沙场</p><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>Ninian 的魔力可以在结界间传递。<br>结界中有 N 个光柱，第 i 个光柱的光压范围为 0~Ei 。魔力可以有 M 种传递，从光柱 Ai 传递到光柱 Bi ，花费时间 Ti 。<br>当魔力从光压为 S 传递并花费了 T 的时间后，就会衰减到光柱上光压为 S-T 处，S-T 不能为负。<br>Ninian 可以将魔力的光压花费 1 时间增加 1 或减少 1 ，当然魔力的光压不能超过光柱的光压范围，也不能小于 0 。<br>Ninian 的魔力初始在 1 号光柱，光压为 X 。<br>问 Ninian 的魔力到达第 N 个光柱且光压最大所需要的最少时间。</p><h2 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h2><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><p>第一行三个整数 N, M, X 。<br>接下来的 N 行每行一个整数表示 Ei 。<br>接下来的 M 行每行三个整数表示 Ai, Bi, Ti 。</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><p>输出一个整数表示所需的最少时间，如果 Ninian 的魔力无法到达，输出 -1 。</p><h1 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h1><p>这道题我倒是想了一个下午。。。估（肯）计（定）是我太蠢了。。。</p><p>我们先考虑x=0的情况，x=0的话，我们何时往上加都是一样的，所以说，我们直接跑个最短路dist，ans就是dist*2+h[n]就完了（为什么乘2呢？一个是时间上的，一个是光压上的补满（这样我就不难发现1单位的时间换1单位的光压，这个在接下来的分析中很有用））</p><p>好了，接下来我们该考虑一下x!=0的情况了（其实x=0就是一种特殊情况）。</p><p>首先我们要知道，往上加光压何时做都是等效的，这样的话我们最后再加光压，然后我们每到一个光柱的时候，所在的光压一定是递减的。</p><p>我们先算出（先不用管怎么算）f[n]（表示不加光压，到n的最大光压）。</p><p>这时候我们统计答案的时候分类讨论：</p><p>1.当f[n]&gt;0时，这说明我们所走过的所有的光压值都没有&lt;0（因为是递减的）。那么这时候我们要做的就是算上<strong>走过的时间</strong>以及<strong>补满的时间</strong>。<strong>走过的时间</strong>就是x-f[n]，<strong>补满的时间</strong>就是h[n]-f[n]，所以说ans就是x+h[n]-f[n]*2。</p><p>2.当f[n]&lt;0时，我们还是要算<strong>走过的时间</strong>和<strong>补满的时间</strong>，<strong>走过的时间</strong>就是x-f[n]，<strong>补满的时间</strong>就是h[n]-f[n]（可以理解成先用-f[n]的时间补到0，然后+h[n]补满），所以说ans就是x+h[n]-f[n]*2。</p><p>呵呵，貌似不用分类讨论（我大概是个zz）。</p><p>怎么算f[n]呢？即我们怎样才能得到最大光压。显然，最短路所得到的一定是最大的，所以跑最短路就完了。</p><p><strong>注意：</strong>这道题要开LL，同时，INF要开的大点，要不然就会跟我一样gg了半天。</p><h1 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> LF;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">complex</span>&lt;LF&gt; cd;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(x, y) memset(x, y, sizeof(x))</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> LL MAXN = <span class="number">1e6</span> + <span class="number">15</span>;</div><div class="line"><span class="keyword">const</span> LL INF = <span class="number">1e16</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span>LL to, nxt, dis;&#125;g[MAXN &lt;&lt; <span class="number">1</span>];</div><div class="line">LL head[MAXN], cnt = <span class="number">0</span>, h[MAXN], dist[MAXN], n, m, x, f;</div><div class="line"><span class="built_in">queue</span> &lt;LL&gt; q; <span class="keyword">bool</span> vis[MAXN];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(LL u, LL v, LL dis)</span></span>&#123;g[++ cnt] = (Edge)&#123;v, head[u], dis&#125;; head[u] = cnt;&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(LL u, LL v, LL dis)</span></span>&#123;<span class="keyword">if</span>(h[u] &gt;= -dis) add(u, v, dis); <span class="keyword">if</span>(h[v] &gt;= -dis) add(v, u, dis);&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">LL r = <span class="number">0</span>, z = <span class="number">1</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line"><span class="keyword">while</span>(ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch == <span class="string">'-'</span>) z = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">while</span>(ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>)&#123;r = r * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">return</span> r * z;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">spfa</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">for</span>(LL i = <span class="number">1</span>; i &lt;= n; i ++) dist[i] = -INF;</div><div class="line">q.push(<span class="number">1</span>); dist[<span class="number">1</span>] = x; vis[<span class="number">1</span>] = <span class="number">1</span>;</div><div class="line"><span class="keyword">while</span>(!q.empty())&#123;</div><div class="line">LL u = q.front(); q.pop(); vis[u] = <span class="number">0</span>;</div><div class="line"><span class="keyword">for</span>(LL i = head[u]; i; i = g[i].nxt)&#123;</div><div class="line">LL v = g[i].to;</div><div class="line"><span class="keyword">if</span>(dist[v] &lt; dist[u] + g[i].dis)&#123;</div><div class="line">dist[v] = min(dist[u] + g[i].dis, h[v]);</div><div class="line"><span class="keyword">if</span>(!vis[v])&#123;vis[v] = <span class="number">1</span>; q.push(v);&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">f = dist[n];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">n = read(), m = read(), x = read();</div><div class="line"><span class="keyword">for</span>(LL i = <span class="number">1</span>; i &lt;= n; i ++) h[i] = read();</div><div class="line"><span class="keyword">for</span>(LL i = <span class="number">1</span>; i &lt;= m; i ++)&#123;</div><div class="line">LL u = read(), v = read(), t = read();</div><div class="line">add_edge(u, v, -t);</div><div class="line">&#125;</div><div class="line">spfa();</div><div class="line"><span class="keyword">if</span>(f == -INF) <span class="built_in">printf</span>(<span class="string">"-1\n"</span>);</div><div class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, x + h[n] - f * <span class="number">2</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">work();</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 知识点 </category>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 最短路 </tag>
            
            <tag> SPFA </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>POI 2010 Bridges 题解</title>
      <link href="/2017/12/27/POI-2010-Bridges-%E9%A2%98%E8%A7%A3/"/>
      <content type="html"><![CDATA[<h1 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>San Bytecisco is a beautifully situated coastal town. It consists of <img src="https://szkopul.edu.pl/problemset/problem/gh2Yj6Ckrt4Lo_RojONuljuC/site/images/OI17/mos-en-tex.1.png" alt="img"> small, yet densely populated islands, numbered from <img src="https://szkopul.edu.pl/problemset/problem/gh2Yj6Ckrt4Lo_RojONuljuC/site/images/OI17/mos-en-tex.2.png" alt="img"> to <img src="https://szkopul.edu.pl/problemset/problem/gh2Yj6Ckrt4Lo_RojONuljuC/site/images/OI17/mos-en-tex.3.png" alt="img">. Certain islands are connected with bridges, used for (bidirectional) road traffic. Each pair of islands can be connected with at most one bridge. The islands are connected in such a way that every island can be reached from every other by using the bridges only.</p><p>Byteasar and Bytie are going for a bike trip in San Bytecisco. The will start their ride at the island no. 1. They intend to visit every island, while passing along every bridge once and ending the trip where it began, i.e., the island no. 1. Being quite seasoned riders, they expect some serious trouble from… the wind! After all, it is very windy along the coast, and especially so on the bridges between the islands. Obviously, depending on its speed and direction, the wind makes it hard to cross the bridge <em>in different extent for either direction</em>. For simplicity we will assume for every bridge and direction of crossing, the opposing wind speed is constant.</p><p>Help Byteasar and Bytie to find a route as they desire that will in addition be the least tiresome. Byteasar and Bytie agreed on the maximum opposing wind speed as a measure of a route’s tiresomeness.</p><h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>In the first line of the standard input there are two integers separated by a single space: <img src="https://szkopul.edu.pl/problemset/problem/gh2Yj6Ckrt4Lo_RojONuljuC/site/images/OI17/mos-en-tex.4.png" alt="img"> and <img src="https://szkopul.edu.pl/problemset/problem/gh2Yj6Ckrt4Lo_RojONuljuC/site/images/OI17/mos-en-tex.5.png" alt="img"> (<img src="https://szkopul.edu.pl/problemset/problem/gh2Yj6Ckrt4Lo_RojONuljuC/site/images/OI17/mos-en-tex.6.png" alt="img">, <img src="https://szkopul.edu.pl/problemset/problem/gh2Yj6Ckrt4Lo_RojONuljuC/site/images/OI17/mos-en-tex.7.png" alt="img">), denoting the number of islands and the number of bridges in San Bytecisco respectively. The islands are numbered from 1 to <img src="https://szkopul.edu.pl/problemset/problem/gh2Yj6Ckrt4Lo_RojONuljuC/site/images/OI17/mos-en-tex.8.png" alt="img">, while the bridges from 1 to <img src="https://szkopul.edu.pl/problemset/problem/gh2Yj6Ckrt4Lo_RojONuljuC/site/images/OI17/mos-en-tex.9.png" alt="img">. The following <img src="https://szkopul.edu.pl/problemset/problem/gh2Yj6Ckrt4Lo_RojONuljuC/site/images/OI17/mos-en-tex.10.png" alt="img"> lines specify the bridges. The line no. <img src="https://szkopul.edu.pl/problemset/problem/gh2Yj6Ckrt4Lo_RojONuljuC/site/images/OI17/mos-en-tex.11.png" alt="img"> contains four integers <img src="https://szkopul.edu.pl/problemset/problem/gh2Yj6Ckrt4Lo_RojONuljuC/site/images/OI17/mos-en-tex.12.png" alt="img">, <img src="https://szkopul.edu.pl/problemset/problem/gh2Yj6Ckrt4Lo_RojONuljuC/site/images/OI17/mos-en-tex.13.png" alt="img">, <img src="https://szkopul.edu.pl/problemset/problem/gh2Yj6Ckrt4Lo_RojONuljuC/site/images/OI17/mos-en-tex.14.png" alt="img">, <img src="https://szkopul.edu.pl/problemset/problem/gh2Yj6Ckrt4Lo_RojONuljuC/site/images/OI17/mos-en-tex.15.png" alt="img"> (<img src="https://szkopul.edu.pl/problemset/problem/gh2Yj6Ckrt4Lo_RojONuljuC/site/images/OI17/mos-en-tex.16.png" alt="img">, <img src="https://szkopul.edu.pl/problemset/problem/gh2Yj6Ckrt4Lo_RojONuljuC/site/images/OI17/mos-en-tex.17.png" alt="img">, <img src="https://szkopul.edu.pl/problemset/problem/gh2Yj6Ckrt4Lo_RojONuljuC/site/images/OI17/mos-en-tex.18.png" alt="img">), separated by single spaces. These denote that the bridge no. <img src="https://szkopul.edu.pl/problemset/problem/gh2Yj6Ckrt4Lo_RojONuljuC/site/images/OI17/mos-en-tex.19.png" alt="img"> connects the islands no. <img src="https://szkopul.edu.pl/problemset/problem/gh2Yj6Ckrt4Lo_RojONuljuC/site/images/OI17/mos-en-tex.20.png" alt="img"> and <img src="https://szkopul.edu.pl/problemset/problem/gh2Yj6Ckrt4Lo_RojONuljuC/site/images/OI17/mos-en-tex.21.png" alt="img">. The opposing wind speeds are <img src="https://szkopul.edu.pl/problemset/problem/gh2Yj6Ckrt4Lo_RojONuljuC/site/images/OI17/mos-en-tex.22.png" alt="img"> when one goes moves from <img src="https://szkopul.edu.pl/problemset/problem/gh2Yj6Ckrt4Lo_RojONuljuC/site/images/OI17/mos-en-tex.23.png" alt="img"> to <img src="https://szkopul.edu.pl/problemset/problem/gh2Yj6Ckrt4Lo_RojONuljuC/site/images/OI17/mos-en-tex.24.png" alt="img">, and <img src="https://szkopul.edu.pl/problemset/problem/gh2Yj6Ckrt4Lo_RojONuljuC/site/images/OI17/mos-en-tex.25.png" alt="img"> if one goes from <img src="https://szkopul.edu.pl/problemset/problem/gh2Yj6Ckrt4Lo_RojONuljuC/site/images/OI17/mos-en-tex.26.png" alt="img"> to <img src="https://szkopul.edu.pl/problemset/problem/gh2Yj6Ckrt4Lo_RojONuljuC/site/images/OI17/mos-en-tex.27.png" alt="img">.</p><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>If there is no route satisfying the requirements of the daring two riders, the first and only line of the standard output should hold the word <code>NIE</code> (<em>no</em> in Polish). Otherwise, the output should have two lines, specifying the least tiresome route over San Bytecisco. The first line should hold the maximum opposing wind speed for that route, i.e., the number we wish to minimize. The second line should hold <img src="https://szkopul.edu.pl/problemset/problem/gh2Yj6Ckrt4Lo_RojONuljuC/site/images/OI17/mos-en-tex.28.png" alt="img"> integers, separated by single spaces, giving the numbers of successive bridges one crosses on the least tiresome route.</p><p>Should there be more than one least tiresome route, your program can pick one arbitrarily.</p><h1 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h1><p>这道题裸的混合图求欧拉回路，直接搞就完了，输出方案的时候倒着输出即可。</p><h1 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> LF;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">complex</span> &lt;LF&gt; cd;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(x, y) memset(x, y, sizeof(x))</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 707185547</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e4</span> + <span class="number">15</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXM = <span class="number">1e6</span> + <span class="number">15</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span><span class="keyword">int</span> from, to, nxt, c;&#125;g[MAXM &lt;&lt; <span class="number">1</span>];</div><div class="line"><span class="keyword">int</span> head[MAXN], cnt, du[MAXN], dd[MAXN], cur[MAXN], n, m, a[MAXN], b[MAXN], c[MAXN], d[MAXN], s, t, tot = <span class="number">0</span>, e[<span class="number">1005</span>][<span class="number">1005</span>], ans[MAXN], len = <span class="number">0</span>;</div><div class="line"><span class="built_in">queue</span> &lt;<span class="keyword">int</span>&gt; q;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> c)</span></span>&#123;g[++ cnt] = (Edge)&#123;u, v, head[u], c&#125;; head[u] = cnt;&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> c)</span></span>&#123;add(u, v, c); add(v, u, <span class="number">0</span>);&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> r = <span class="number">0</span>, z = <span class="number">1</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line">    <span class="keyword">while</span>(ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch == <span class="string">'-'</span>) z = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">while</span>(ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>)&#123;r = r * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">return</span> r * z;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">bfs</span><span class="params">()</span></span>&#123;</div><div class="line">    clr(dd, <span class="number">-1</span>);</div><div class="line">    q.push(s); dd[s] = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span>(!q.empty())&#123;</div><div class="line">        <span class="keyword">int</span> u = q.front(); q.pop();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; ~i; i = g[i].nxt)&#123;</div><div class="line">            <span class="keyword">int</span> v = g[i].to;</div><div class="line">            <span class="keyword">if</span>(g[i].c &amp;&amp; dd[v] == <span class="number">-1</span>)&#123;</div><div class="line">                dd[v] = dd[u] + <span class="number">1</span>;</div><div class="line">                q.push(v);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> dd[t] != <span class="number">-1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> flow)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(u == t) <span class="keyword">return</span> flow;</div><div class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span>&amp; i = cur[u]; ~i; i = g[i].nxt)&#123;</div><div class="line">        <span class="keyword">int</span> v = g[i].to;</div><div class="line">        <span class="keyword">if</span>(g[i].c &amp;&amp; dd[v] == dd[u] + <span class="number">1</span>)&#123;</div><div class="line">            <span class="keyword">int</span> tmp = dfs(v, min(flow, g[i].c));</div><div class="line">            flow -= tmp; g[i].c -= tmp;</div><div class="line">            ret += tmp; g[i ^ <span class="number">1</span>].c += tmp;</div><div class="line">            <span class="keyword">if</span>(!flow) <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(!ret) dd[u] = <span class="number">-1</span>;</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">dinic</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span>(bfs())&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n + <span class="number">2</span>; i ++) cur[i] = head[i];</div><div class="line">        ans += dfs(s, INF);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">pd</span><span class="params">(<span class="keyword">int</span> mid)</span></span>&#123;</div><div class="line">    clr(head, <span class="number">-1</span>); cnt = <span class="number">-1</span>;</div><div class="line">    s = n + <span class="number">1</span>, t = n + <span class="number">2</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i ++)&#123;</div><div class="line">        <span class="keyword">if</span>(c[i] &gt; mid) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="keyword">if</span>(d[i] &lt;= mid) add_edge(a[i], b[i], <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)&#123;</div><div class="line">        <span class="keyword">if</span>(du[i] &gt; <span class="number">0</span>) add_edge(s, i, du[i] / <span class="number">2</span>);</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(du[i] &lt; <span class="number">0</span>) add_edge(i, t, -du[i] / <span class="number">2</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(dinic() == tot / <span class="number">2</span>) <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)&#123;</div><div class="line">        <span class="keyword">if</span>(e[x][i])&#123;</div><div class="line">            e[x][i] = <span class="number">0</span>;</div><div class="line">            dfs(i);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    ans[++ len] = x;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> mid)</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= cnt; i += <span class="number">2</span>)&#123;</div><div class="line">        <span class="keyword">if</span>(g[i].from == s || g[i].to == t) <span class="keyword">continue</span>;</div><div class="line">        <span class="keyword">if</span>(g[i].c == <span class="number">0</span>) e[g[i].to][g[i].from] = <span class="number">1</span>;</div><div class="line">        <span class="keyword">else</span> e[g[i].from][g[i].to] = <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i ++)&#123;</div><div class="line">        <span class="keyword">if</span>(c[i] &lt;= mid &amp;&amp; d[i] &gt; mid) e[a[i]][b[i]] = <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/*</span></div><div class="line"><span class="comment">    for(int i = 1; i &lt;= n; i ++)&#123;</span></div><div class="line"><span class="comment">        for(int j = 1; j &lt;= n; j ++)&#123;</span></div><div class="line"><span class="comment">            if(e[i][j]) printf("%d --&gt; %d\n", i, j);</span></div><div class="line"><span class="comment">        &#125;</span></div><div class="line"><span class="comment">    &#125;</span></div><div class="line"><span class="comment">    */</span></div><div class="line">    dfs(<span class="number">1</span>);<span class="comment">//printf("\n");</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">    clr(head, <span class="number">-1</span>);</div><div class="line">    n = read(), m = read();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i ++)&#123;</div><div class="line">        a[i] = read(), b[i] = read(), c[i] = read(), d[i] = read();</div><div class="line">        <span class="keyword">if</span>(d[i] &lt; c[i])&#123;swap(a[i], b[i]); swap(c[i], d[i]);&#125;</div><div class="line">        du[a[i]] ++; du[b[i]] --;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)&#123;</div><div class="line">        <span class="keyword">if</span>(du[i] % <span class="number">2</span> != <span class="number">0</span>)&#123;<span class="built_in">printf</span>(<span class="string">"NIE\n"</span>); <span class="keyword">return</span> ;&#125;</div><div class="line">        tot += <span class="built_in">abs</span>(du[i]) / <span class="number">2</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> l = <span class="number">1</span>, r = <span class="number">1000</span>;</div><div class="line">    <span class="keyword">while</span>(l &lt; r)&#123;</div><div class="line">        <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span>(pd(mid)) r = mid;</div><div class="line">        <span class="keyword">else</span> l = mid + <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, l);</div><div class="line">    <span class="keyword">int</span> nonsense = pd(l); print(l);</div><div class="line">    clr(e, <span class="number">0</span>);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i ++)&#123;</div><div class="line">        e[a[i]][b[i]] = e[b[i]][a[i]] = i;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = len; i &gt; <span class="number">1</span>; i --)&#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>, e[ans[i]][ans[i - <span class="number">1</span>]]);</div><div class="line">    &#125; <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    work();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 知识点 </category>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 欧拉回路 </tag>
            
            <tag> 网络流 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>loj2323 [清华集训]小Y和地铁 题解</title>
      <link href="/2017/12/27/loj2323%E9%A2%98%E8%A7%A3/"/>
      <content type="html"><![CDATA[<h1 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h1><p>小Y是一个爱好旅行的OIer。一天，她来到了一个新的城市。由于不熟悉那里的交通系统，她选择了坐地铁。</p><p>她发现每条地铁线路可以看成平面上的一条曲线，不同线路的交点处一定会设有换乘站<img src="https://i.loli.net/2017/12/10/5a2c94ce85465.png" alt="interchange-station.png">。通过调查得知，没有线路是环线，也没有线路与自身相交。任意两条不同的线路只会在若干个点上相交，没有重合的部分，且没有三线共点的情况。即，如图所示的情况都是不存在的：</p><p><img src="https://i.loli.net/2017/12/10/5a2c94d4b56ad.png" alt=""></p><p>小Y坐着地铁 0 号线，路上依次经过了 n 个换乘站。她记下了每个换乘站可以换乘的线路编号，发现每条线路与她所乘坐的线路最多只有 2 个换乘站。现在小Y想知道，除掉她经过的换乘站以外，这个城市里最少有几个换乘站。只有你告诉她正确的答案，她才会答应下次带你去玩呢。</p><h1 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h1><p>这道题呀，反正我这种蒟蒻不会想到这题竟然是个爆搜。。。</p><p>首先，得说明一条性质：</p><p><img src="http://images2017.cnblogs.com/blog/822137/201712/822137-20171214161930982-1099609151.png" alt=""></p><p><img src="http://images2017.cnblogs.com/blog/822137/201712/822137-20171214161947888-380416103.png" alt=""></p><p>这两种是等价的（旋转一下就可以得到另外一个）。</p><p>好，接下来我来讲讲怎么爆搜。</p><p>我们可以不用考虑与0号线只交了1个点的线路（一个点就能自成线路），只记录交了2次的。然后我们维护右端点是从上面过来的，还是从下面过来的。维护信息的时候用个树状数组就可以了，代码里有更详细的解释，在这就不赘述了。</p><p><strong>注意：</strong>枚举右端点的时候为什么左端点取个min就成了？即证明这个贪心为什么是对的。</p><p>我们判断一下连通性就好了。</p><p><img src="/2017/12/27/loj2323题解/explanation.png" alt=""></p><p>如图，最左边这一列显然不用考虑，我们看右半部分。</p><p>对于上边的图，2和3不连通，5和6连通。</p><p>对于下边的图，2‘和3’不连通，5‘和6’连通。</p><p>连通性是一样的，所以说这个贪心是没问题的。</p><h1 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> LF;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">complex</span>&lt;LF&gt; cd;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(x, y) memset(x, y, sizeof(x))</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x7fffffff</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">115</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> a[MAXN], l[MAXN], r[MAXN], T, n, cnt = <span class="number">0</span>, ans;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">szsz</span>&#123;</span></div><div class="line"><span class="keyword">int</span> s[MAXN];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;clr(s, <span class="number">0</span>);&#125;;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> v)</span></span>&#123;<span class="keyword">for</span>(; x &lt;= MAXN; x += x &amp; -x) s[x] += v;&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">getsum</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">int</span> ret = <span class="number">0</span>; <span class="keyword">for</span>(; x; x -= x &amp; -x) ret += s[x]; <span class="keyword">return</span> ret;&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;<span class="keyword">return</span> getsum(r) - getsum(l - <span class="number">1</span>);&#125;</div><div class="line">&#125;up, down;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">int</span> r = <span class="number">0</span>, z = <span class="number">1</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line"><span class="keyword">while</span>(ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch == <span class="string">'-'</span>) z = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">while</span>(ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>)&#123;r = r * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">return</span> r * z;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> j, <span class="keyword">int</span> now)</span></span>&#123;</div><div class="line"><span class="keyword">if</span>(now &gt; ans) <span class="keyword">return</span> ;</div><div class="line"><span class="keyword">if</span>(j &gt; cnt)&#123;<span class="keyword">if</span>(now &lt; ans) ans = now; <span class="keyword">return</span> ;&#125;</div><div class="line">up.add(r[j], <span class="number">1</span>); dfs(j + <span class="number">1</span>, now + min(up.query(l[j], r[j] - <span class="number">1</span>), up.query(r[j] + <span class="number">1</span>, n) + down.query(l[j], n)));<span class="comment">//右端点从上面过去的。左端点从上过：up.query(l[j], r[j] - 1)左端点从下过：up.query(r[j] + 1, n) + down.query(l[j], n)-&gt;这个需要用到上面提的性质转化一下，把图变成右边有个大圈圈的样子。</span></div><div class="line">up.add(r[j], <span class="number">-1</span>);down.add(r[j], <span class="number">1</span>);</div><div class="line">dfs(j + <span class="number">1</span>, now + min(down.query(l[j], r[j] - <span class="number">1</span>), down.query(r[j] + <span class="number">1</span>, n) + up.query(l[j], n)));<span class="comment">//右端点从下面过去，同上。</span></div><div class="line">down.add(r[j], <span class="number">-1</span>);</div><div class="line"><span class="keyword">return</span> ;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">T = read();</div><div class="line"><span class="keyword">while</span>(T --)&#123;</div><div class="line">n = read(); up.init(), down.init();</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) a[i] = read(); cnt = <span class="number">0</span>; ans = INF;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i ++) <span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= n; j ++)&#123;</div><div class="line"><span class="keyword">if</span>(a[i] == a[j]) l[++ cnt] = i, r[cnt] = j;</div><div class="line">&#125; dfs(<span class="number">1</span>, <span class="number">0</span>); <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">work();</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 知识点 </category>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 搜索 </tag>
            
            <tag> 树状数组 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>arc077F题解</title>
      <link href="/2017/12/27/arc077F%E9%A2%98%E8%A7%A3/"/>
      <content type="html"><![CDATA[<h1 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h1><h2 id="原题："><a href="#原题：" class="headerlink" title="原题："></a>原题：</h2><p>We will call a string that can be obtained by concatenating two equal strings an <em>even</em> string. For example, xyzxyz and aaaaaa are even, while ababab` and xyzxy are not.</p><p>For a non-empty string <em>S</em>, we will define <em>f</em>(<em>S</em>) as the shortest even string that can be obtained by appending one or more characters to the end of <em>S</em>. For example, <em>f</em>(abaaba)=abaababaab. It can be shown that <em>f</em>(<em>S</em>) is uniquely determined for a non-empty string <em>S</em>.</p><p>You are given an even string <em>S</em> consisting of lowercase English letters. For each letter in the lowercase English alphabet, find the number of its occurrences from the <em>l</em>-th character through the <em>r</em>-th character of f^10^100(S).</p><p>Here,f^10^100(S) is the string f(f(f(…f(S)…)))  obtained by applying <em>f</em> to <em>S</em> 10^100​ times.</p><h2 id="译题："><a href="#译题：" class="headerlink" title="译题："></a>译题：</h2><p>定义AA表示两个一样的字符串A接在一起。<br>定义F(SS)=TT，TT是长度最小的满足条件的字符串且SS是TT的前缀。<br>给你小写字母串SS，求F10100(SS)的区间[l,r]每个字母出现次数。</p><h1 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h1><p>对于f(SS)，我们找到其最长公共后缀T，那么f(SS)=STST。</p><p>因为是对称的，而且我们要找接近无限次，所以我们可以只考虑变换g(S)=ST。</p><p>设T的长度为d，S的长度为n。</p><p>可以证明，如果d|n，那么g(ST)=STT，否则g(ST)=STS。（意（我）会（也）即（不）可（会））</p><p>对于g(ST)=STS，我们可以发现S-&gt;ST-&gt;STS-&gt;STSST……    这显然是满足斐波那契的这种特性。</p><p>我们分类讨论一下就可以了。</p><p>具体写代码的时候，我们求一个next数组，T就是n-next[n]。我们再记一个每个字母出现的前缀和。</p><p>输出的时候，我们判断一下，如果这个长度小于我们输入的串，直接输出即可；如果大于，就记录一下我们最开始的两个字符串的长度和每个字母出现的次数，通过递归求出这个“类斐波那契”的式子。</p><h1 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> LF;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">complex</span>&lt;LF&gt; cd;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(x, y) memset(x, y, sizeof(x))</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x7fffffff</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">2e5</span> + <span class="number">15</span>;</div><div class="line"></div><div class="line"><span class="keyword">char</span> ch[MAXN];</div><div class="line"><span class="keyword">int</span> n, nxt[MAXN], T;</div><div class="line">LL l, r, f[MAXN][<span class="number">35</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">int</span> r = <span class="number">0</span>, z = <span class="number">1</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line"><span class="keyword">while</span>(ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch == <span class="string">'-'</span>) z = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">while</span>(ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>)&#123;r = r * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">return</span> r * z;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">ff</span><span class="params">(LL len, <span class="keyword">int</span> c)</span></span>&#123;</div><div class="line"><span class="keyword">if</span>(len &lt;= n) <span class="keyword">return</span> f[len][c];</div><div class="line"><span class="keyword">if</span>(len &lt;= n * <span class="number">2</span>) <span class="keyword">return</span> f[n][c] + f[len - n][c];</div><div class="line">LL f1 = f[n][c], f2 = f[n][c] + f[T][c], l1 = n, l2 = n + T;</div><div class="line"><span class="keyword">while</span>(len &gt; l1 + l2)&#123;</div><div class="line">LL t = f2;</div><div class="line">f2 += f1; f1 = t;</div><div class="line">t = l2; l2 += l1; l1 = t;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> f2 + ff(len - l2, c);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">calc</span><span class="params">(LL len, <span class="keyword">int</span> c)</span></span>&#123;</div><div class="line"><span class="keyword">if</span>(len &lt;= n) <span class="keyword">return</span> f[len][c];</div><div class="line"><span class="keyword">if</span>(len &lt;= n * <span class="number">2</span>) <span class="keyword">return</span> f[n][c] + f[len - n][c];</div><div class="line"><span class="keyword">if</span>(n % T == <span class="number">0</span>)&#123;</div><div class="line">LL tmp = (len - <span class="number">1l</span>l * n) / T * f[T][c] + f[n][c];</div><div class="line">len -= n; len %= T;</div><div class="line"><span class="keyword">return</span> tmp + f[len][c];</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> ff(len, c);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="built_in">scanf</span>(<span class="string">"%s %lld %lld"</span>, ch + <span class="number">1</span>, &amp;l, &amp;r); n = <span class="built_in">strlen</span>(ch + <span class="number">1</span>) / <span class="number">2</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)&#123;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">26</span>; j ++) f[i][j] = f[i - <span class="number">1</span>][j];</div><div class="line">f[i][ch[i] - <span class="string">'a'</span>] ++;</div><div class="line">&#125; nxt[<span class="number">1</span>] = <span class="number">0</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>, j = <span class="number">0</span>; i &lt;= n; i ++)&#123;</div><div class="line"><span class="keyword">for</span>(; j &amp;&amp; ch[j + <span class="number">1</span>] != ch[i];) j = nxt[j];</div><div class="line"><span class="keyword">if</span>(ch[j + <span class="number">1</span>] == ch[i]) j ++;</div><div class="line">nxt[i] = j;</div><div class="line">&#125;</div><div class="line">T = n - nxt[n];</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i ++) <span class="built_in">printf</span>(<span class="string">"%lld "</span>, calc(r, i) - calc(l - <span class="number">1</span>, i));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">work();</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 知识点 </category>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> KMP </tag>
            
            <tag> 递推 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>agc006D题解</title>
      <link href="/2017/12/27/agc006D%E9%A2%98%E8%A7%A3/"/>
      <content type="html"><![CDATA[<h1 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h1><h2 id="原题"><a href="#原题" class="headerlink" title="原题"></a>原题</h2><p>We have a pyramid with <em>N</em> steps, built with blocks. The steps are numbered 1 through <em>N</em> from top to bottom. For each 1≤<em>i</em>≤<em>N</em>, step <em>i</em> consists of 2i−1 blocks aligned horizontally. The pyramid is built so that the blocks at the centers of the steps are aligned vertically.</p><p><img src="https://atcoder.jp/img/agc006/a2bde72df5ad036d1699f4a74d74a370.png" alt="A pyramid with *N*=4 steps"></p><p>Snuke wrote a permutation of (1, 2, …, 2<em>N</em>−1) into the blocks of step <em>N</em>. Then, he wrote integers into all remaining blocks, under the following rule:</p><ul><li>The integer written into a block <em>b</em> must be equal to the median of the three integers written into the three blocks directly under <em>b</em>, or to the lower left or lower right of <em>b</em>.</li></ul><p>Writing integers into the blocks</p><p>Afterwards, he erased all integers written into the blocks. Now, he only remembers that the permutation written into the blocks of step <em>N</em> was (<em>a</em>1, <em>a</em>2, …, <em>a</em>2<em>N</em>−1).</p><p>Find the integer written into the block of step 1.</p><h2 id="译题："><a href="#译题：" class="headerlink" title="译题："></a>译题：</h2><p>给你一个数n，我们要往一个n阶的“金字塔里”填数，输入给出了最底下一排的2n-1个数（一个1~2n-1的排列），每个格子里所填的数满足这样一个条件：这个数是它斜左下方、斜右下方、正下方三个数中第二大的（也就是既不是最大、又不是最小的那个），问最上面的那个数字是多少。</p><h1 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h1><p>这道题我感觉比较巧妙。</p><p>首先，我们肯定知道，朴素算法是$O(n^2)$的，肯定过不了。</p><p>既然数据范围是$10^5$，我们很容易想到这题应该是$O(nlogn)$的，所以我们二分答案。</p><p>关键就是怎么check，我们设k为当前二分的值，那么我们把大于等于k的记为1，小于k的记为0，如下图：</p><p><img src="http://img.blog.csdn.net/20170330215947769?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMDYwMDI2MQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>这时候我们发现如果有一段（大于1）0或者1，它会一直留到最后，就像上图中的”0 0”和”1 1 1”。</p><p>如果1和0交替出现，我们会发现它的规模会越来越小，直到没有，就像上图中的”1 0 1 0 1 0”。</p><p>如果交替出现的没有了，我们还剩什么呢？肯定只剩一段0，一段1拼成的了。然而在两侧的由于越到金字塔规模越小，最后也会没有。</p><p>那么这时候还剩什么呢？只剩最中间的了。所以我们可以从刚才的”一段0，一段1拼成的序列”中找到第n个是几（即金字塔的最中央）。</p><h1 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> LF;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">complex</span>&lt;LF&gt; cd;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(x, y) memset(x, y, sizeof(x))</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x7fffffff</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">2e5</span> + <span class="number">15</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> a[MAXN], b[MAXN], n, m, ans, cnt = <span class="number">0</span>;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span><span class="keyword">int</span> l, r, c;&#125;f[MAXN];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">int</span> r = <span class="number">0</span>, z = <span class="number">1</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line"><span class="keyword">while</span>(ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch == <span class="string">'-'</span>) z = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">while</span>(ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>)&#123;r = r * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">return</span> r * z;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> k)</span></span>&#123; cnt = <span class="number">0</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) b[i] = (a[i] &gt;= k ? <span class="number">1</span> : <span class="number">0</span>);</div><div class="line"><span class="keyword">int</span> i = <span class="number">1</span>;</div><div class="line"><span class="keyword">while</span>(i &lt; n)&#123;</div><div class="line"><span class="keyword">if</span>(b[i] != b[i + <span class="number">1</span>])&#123;i ++; <span class="keyword">continue</span>;&#125;</div><div class="line">f[++ cnt].l = i, f[cnt].c = b[i];</div><div class="line"><span class="keyword">while</span>(i &lt; n &amp;&amp; b[i] == b[i + <span class="number">1</span>]) i ++;</div><div class="line">f[cnt].r = i; i ++;</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>(!cnt) <span class="keyword">return</span> b[<span class="number">1</span>]; f[<span class="number">0</span>].r = <span class="number">0</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cnt; i ++)&#123;</div><div class="line"><span class="keyword">int</span> l = f[i - <span class="number">1</span>].r + <span class="number">1</span>, r = f[i].l - <span class="number">1</span>;</div><div class="line"><span class="keyword">if</span>(l &gt; r) <span class="keyword">continue</span>;</div><div class="line"><span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</div><div class="line">f[i - <span class="number">1</span>].r = mid, f[i].l = mid + <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> l = f[cnt].r + <span class="number">1</span>, r = n; <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</div><div class="line"><span class="keyword">if</span>(l &lt;= r) f[cnt].r = mid;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) <span class="keyword">if</span>(f[i].l &lt;= m &amp;&amp; f[i].r &gt;= m) <span class="keyword">return</span> f[i].c;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">tp</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">int</span> l = <span class="number">1</span>, r = n;</div><div class="line"><span class="keyword">while</span>(l &lt;= r)&#123;</div><div class="line"><span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</div><div class="line"><span class="keyword">if</span>(check(mid)) ans = mid, l = mid + <span class="number">1</span>;</div><div class="line"><span class="keyword">else</span> r = mid - <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">n = read(); m = n; n = n * <span class="number">2</span> - <span class="number">1</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) a[i] = read();</div><div class="line">tp();</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">work();</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 知识点 </category>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二分答案 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>POJ3207 Ikki&#39;s Story IV - Panda&#39;s Trick 题解</title>
      <link href="/2017/12/10/POJ3207-Ikki-s-Story-IV-Panda-s-Trick-%E9%A2%98%E8%A7%A3/"/>
      <content type="html"><![CDATA[<h3 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h3><h4 id="原题："><a href="#原题：" class="headerlink" title="原题："></a>原题：</h4><p>liympanda, one of Ikki’s friend, likes playing games with Ikki. Today after minesweeping with Ikki and winning so many times, he is tired of such easy games and wants to play another game with Ikki.liympanda has a magic circle and he puts it on a plane, there are <em>n</em> points on its boundary in circular border: 0, 1, 2, …, <em>n</em> − 1. Evil panda claims that he is connecting m pairs of points. To connect two points, liympanda either places the link entirely inside the circle or entirely outside the circle. Now liympanda tells Ikki no two links touch inside/outside the circle, except on the boundary. He wants Ikki to figure out whether this is possible…Despaired at the minesweeping game just played, Ikki is totally at a loss, so he decides to write a program to help him.</p><h4 id="译题："><a href="#译题：" class="headerlink" title="译题："></a>译题：</h4><p>平面上，一个圆，圆的边上按顺时针放着n个点。现在要连m条边，比如a，b，那么a到b可以从圆的内部连接，也可以从圆的外部连接。给你的信息中，每个点最多只会连接的一条边。问能不能连接这m条边，使这些边都不相交。</p><h3 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h3><p>这道题可以归类为<strong>2-sat判断合法解</strong>，这种题应该算是比较基本、简单且常见的。</p><p>具体怎么做呢？</p><p>我们把每条边看成两个点，i表示画在内部，i’表示画在外部。</p><p>然后我们可以知道，<strong>在内部相交的边，在外部也一定相交。</strong></p><p>然后根据逻辑关系搞一搞就完了：</p><p>如果两边相交，那么连边：i-&gt;j’, i’-&gt;j, j-&gt;i’, j’-&gt;i</p><h3 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> LF;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">2e5</span> + <span class="number">15</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span><span class="keyword">int</span> to, nxt;&#125;g[MAXN];</div><div class="line"><span class="keyword">int</span> head[MAXN], cnt, px[MAXN], py[MAXN], n, m, belong[MAXN], dfn[MAXN], low[MAXN], tim, tot;</div><div class="line"><span class="keyword">bool</span> instack[MAXN];</div><div class="line"><span class="built_in">stack</span> &lt;<span class="keyword">int</span>&gt; sta;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span>&#123;g[++ cnt] = (Edge)&#123;v, head[u]&#125;; head[u] = cnt;&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">int</span> r = <span class="number">0</span>, z = <span class="number">1</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line"><span class="keyword">while</span>(ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch == <span class="string">'-'</span>) z = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">while</span>(ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>)&#123;r = r * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">return</span> r * z;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="built_in">memset</span>(head, <span class="number">0</span>, <span class="keyword">sizeof</span>(head)); cnt = <span class="number">0</span>;</div><div class="line"><span class="built_in">memset</span>(px, <span class="number">0</span>, <span class="keyword">sizeof</span>(px)); <span class="built_in">memset</span>(py, <span class="number">0</span>, <span class="keyword">sizeof</span>(py));</div><div class="line">tim = <span class="number">0</span>, tot = <span class="number">0</span>;</div><div class="line"><span class="built_in">memset</span>(instack, <span class="number">0</span>, <span class="keyword">sizeof</span>(instack)); <span class="built_in">memset</span>(belong, <span class="number">0</span>, <span class="keyword">sizeof</span>(belong));</div><div class="line"><span class="built_in">memset</span>(dfn, <span class="number">0</span>, <span class="keyword">sizeof</span>(dfn)); <span class="built_in">memset</span>(low, <span class="number">0</span>, <span class="keyword">sizeof</span>(low));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">getmap</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i ++)&#123;</div><div class="line">px[i] = read(), py[i] = read();</div><div class="line"><span class="keyword">if</span>(px[i] &gt; py[i]) swap(px[i], py[i]);</div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i ++)</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= m; j ++)</div><div class="line"><span class="keyword">if</span>(px[j] &gt;= px[i] &amp;&amp; px[j] &lt;= py[i] &amp;&amp; py[j] &gt;= py[i] || py[j] &gt;= px[i] &amp;&amp; py[j] &lt;= py[i] &amp;&amp; px[j] &lt;= px[i])&#123;</div><div class="line">add(<span class="number">2</span> * i - <span class="number">1</span>, <span class="number">2</span> * j); add(<span class="number">2</span> * j - <span class="number">1</span>, <span class="number">2</span> * i);</div><div class="line">add(<span class="number">2</span> * j, <span class="number">2</span> * i - <span class="number">1</span>); add(<span class="number">2</span> * i, <span class="number">2</span> * j - <span class="number">1</span>);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> fafa)</span></span>&#123;</div><div class="line">dfn[u] = low[u] = ++ tim;</div><div class="line">instack[u] = <span class="number">1</span>; sta.push(u);</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; i; i = g[i].nxt)&#123;</div><div class="line"><span class="keyword">int</span> v = g[i].to; <span class="keyword">if</span>(u == fafa) <span class="keyword">continue</span>;</div><div class="line"><span class="keyword">if</span>(!dfn[v])&#123;</div><div class="line">tarjan(v, u); low[u] = min(low[u], low[v]);</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> <span class="keyword">if</span>(instack[v]) low[u] = min(low[u], dfn[v]);</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>(dfn[u] == low[u])&#123;</div><div class="line">tot ++; <span class="keyword">int</span> i;</div><div class="line"><span class="keyword">do</span>&#123;</div><div class="line">i = sta.top(); sta.pop();</div><div class="line">instack[i] = <span class="number">0</span>; belong[i] = tot;</div><div class="line">&#125;<span class="keyword">while</span>(i != u);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m * <span class="number">2</span>; i ++)</div><div class="line"><span class="keyword">if</span>(!dfn[i]) tarjan(i, <span class="number">0</span>);</div><div class="line"><span class="keyword">bool</span> flag = <span class="number">1</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; m * <span class="number">2</span>; i += <span class="number">2</span>)&#123;</div><div class="line"><span class="keyword">if</span>(belong[i] == belong[i + <span class="number">1</span>])&#123;flag = <span class="number">0</span>; <span class="keyword">break</span>;&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>(flag) <span class="built_in">printf</span>(<span class="string">"panda is telling the truth...\n"</span>);</div><div class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"the evil panda is lying again\n"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m))&#123;</div><div class="line">init();</div><div class="line">getmap();</div><div class="line">solve();</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">work();</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 知识点 </category>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 2-sat </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>POJ3683 Priest John&#39;s Busiest Day 题解</title>
      <link href="/2017/12/10/POJ3683-Priest-John-s-Busiest-Day-%E9%A2%98%E8%A7%A3/"/>
      <content type="html"><![CDATA[<h3 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h3><h4 id="原题："><a href="#原题：" class="headerlink" title="原题："></a>原题：</h4><p><img src="/2017/12/10/POJ3683-Priest-John-s-Busiest-Day-题解/Description.png" alt="Description"></p><h4 id="译题："><a href="#译题：" class="headerlink" title="译题："></a>译题：</h4><p>一个小镇里面只有一个牧师，现在有些新人要结婚，需要牧师分别去主持一个仪式，给出每对新人婚礼的开始时间 s 和结束时间 t ，还有他们俩的这个仪式需要的时间（每对新人需要的时间长短可能不同） d ，牧师可以在婚礼开始的时间 d 内（s 到 s+d）或者是结束前的时间 d 内（t - d 到 t）完成这个仪式。现在问能否给出一种安排，让牧师能完成所有夫妇婚礼的仪式，如果可以，输出一种安排。</p><h3 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h3><p>又是一道<strong>2-sat输出解</strong>的题。</p><p>好做。</p><p>怎么做？</p><p>我们把题目可以稍微转化一下，把一场婚礼可以举行仪式的两个时间段单拿出来，然后选其中之一，看看能不能找到一种方案，使得每一对中的两个时间段选其一，且线段之间没有相互覆盖。这很符合2-sat的模型啊！如果没有理解可以看下图。</p><p><img src="/2017/12/10/POJ3683-Priest-John-s-Busiest-Day-题解/t1.png" alt=""></p><p>然后问题就简单了，问题就转化成了怎么建边。</p><p>找出相互覆盖的两条线段a和b，那么可以建边：a-&gt;b’ b-&gt;a’</p><h3 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> LF;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e4</span> + <span class="number">15</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXX = <span class="number">1e6</span> + <span class="number">15</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span><span class="keyword">int</span> to, nxt;&#125;g[MAXX &lt;&lt; <span class="number">1</span>], e[MAXX &lt;&lt; <span class="number">1</span>];</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Wed</span>&#123;</span><span class="keyword">int</span> s, t;&#125;a[MAXN];</div><div class="line"><span class="keyword">int</span> head[MAXN], head1[MAXN], cnt = <span class="number">0</span>, cnt1 = <span class="number">0</span>, dfn[MAXN], low[MAXN], belong[MAXN], tim = <span class="number">0</span>, n, dt[MAXN], tot = <span class="number">0</span>, d[MAXN], opp[MAXN], col[MAXN];</div><div class="line"><span class="keyword">bool</span> instack[MAXN];</div><div class="line"><span class="built_in">stack</span> &lt;<span class="keyword">int</span>&gt; sta; <span class="built_in">queue</span> &lt;<span class="keyword">int</span>&gt; q;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span>&#123;g[++ cnt] = (Edge)&#123;v, head[u]&#125;; head[u] = cnt;&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">readd</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span>&#123;e[++ cnt1] = (Edge)&#123;v, head1[u]&#125;; head1[u] = cnt1;&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">int</span> r = <span class="number">0</span>, z = <span class="number">1</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line"><span class="keyword">while</span>(ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch == <span class="string">'-'</span>) z = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">while</span>(ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>)&#123;r = r * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">return</span> r * z;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">pd</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span>&#123;</div><div class="line"><span class="keyword">if</span>(a[i].s &gt;= a[j].t || a[i].t &lt;= a[j].s) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"><span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</div><div class="line">dfn[u] = low[u] = ++ tim;</div><div class="line">sta.push(u); instack[u] = <span class="number">1</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; i; i = g[i].nxt)&#123;</div><div class="line"><span class="keyword">int</span> v = g[i].to;</div><div class="line"><span class="keyword">if</span>(!dfn[v])&#123;</div><div class="line">tarjan(v);</div><div class="line">low[u] = min(low[u], low[v]);</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> <span class="keyword">if</span>(instack[v]) low[u] = min(low[u], dfn[v]);</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>(dfn[u] == low[u])&#123;</div><div class="line">tot ++; <span class="keyword">int</span> i;</div><div class="line"><span class="keyword">do</span>&#123;</div><div class="line">i = sta.top(); sta.pop();</div><div class="line">belong[i] = tot; instack[i] = <span class="number">0</span>;</div><div class="line">&#125;<span class="keyword">while</span>(i != u &amp;&amp; !sta.empty());</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n * <span class="number">2</span>; i ++)&#123;</div><div class="line"><span class="keyword">if</span>(!dfn[i]) tarjan(i);</div><div class="line">&#125;</div><div class="line"><span class="keyword">bool</span> flag = <span class="number">1</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n * <span class="number">2</span>; i += <span class="number">2</span>)&#123;</div><div class="line"><span class="keyword">if</span>(belong[i] == belong[i + <span class="number">1</span>])&#123;flag = <span class="number">0</span>; <span class="keyword">break</span>;&#125;</div><div class="line">opp[belong[i]] = belong[i + <span class="number">1</span>];</div><div class="line">opp[belong[i + <span class="number">1</span>]] = belong[i];</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>(!flag)&#123;<span class="built_in">printf</span>(<span class="string">"NO\n"</span>); <span class="keyword">return</span> <span class="number">0</span>;&#125;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"YES\n"</span>); <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">setmdl</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j ++)&#123;</div><div class="line"><span class="keyword">if</span>(i == j) <span class="keyword">continue</span>;</div><div class="line"><span class="keyword">if</span>(pd(i * <span class="number">2</span> - <span class="number">1</span>, j * <span class="number">2</span> - <span class="number">1</span>)) add(i * <span class="number">2</span> - <span class="number">1</span>, j * <span class="number">2</span>);</div><div class="line"><span class="keyword">if</span>(pd(i * <span class="number">2</span> - <span class="number">1</span>, j * <span class="number">2</span>)) add(i * <span class="number">2</span> - <span class="number">1</span>, j * <span class="number">2</span> - <span class="number">1</span>);</div><div class="line"><span class="keyword">if</span>(pd(i * <span class="number">2</span>, j * <span class="number">2</span> - <span class="number">1</span>)) add(i * <span class="number">2</span>, j * <span class="number">2</span>);</div><div class="line"><span class="keyword">if</span>(pd(i * <span class="number">2</span>, j * <span class="number">2</span>)) add(i * <span class="number">2</span>, j * <span class="number">2</span> - <span class="number">1</span>);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">rebuild</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n * <span class="number">2</span>; i ++)&#123;</div><div class="line"><span class="keyword">int</span> u1 = belong[i];</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = head[i]; j; j = g[j].nxt)&#123;</div><div class="line"><span class="keyword">int</span> v1 = belong[g[j].to];</div><div class="line"><span class="keyword">if</span>(u1 != v1)&#123;readd(v1, u1); d[u1] ++;&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">topo_sort</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="built_in">memset</span>(col, <span class="number">-1</span>, <span class="keyword">sizeof</span>(col));</div><div class="line"><span class="keyword">int</span> tmp = <span class="number">0</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= tot; i ++) <span class="keyword">if</span>(!d[i]) q.push(i);</div><div class="line"><span class="keyword">while</span>(!q.empty())&#123;</div><div class="line"><span class="keyword">int</span> u = q.front(); q.pop();</div><div class="line"><span class="keyword">if</span>(col[u] == <span class="number">-1</span>)&#123;col[u] == <span class="number">1</span>; col[opp[u]] = <span class="number">0</span>;&#125;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = head1[u]; i; i = e[i].nxt)&#123;</div><div class="line"><span class="keyword">int</span> v = e[i].to; d[v] --;</div><div class="line"><span class="keyword">if</span>(!d[v]) q.push(v);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="comment">//for(int i = 1; i &lt;= n * 2; i ++)cout&lt;&lt;col[i]&lt;&lt;endl;</span></div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)&#123;</div><div class="line"><span class="keyword">if</span>(col[belong[i * <span class="number">2</span> - <span class="number">1</span>]]) <span class="built_in">printf</span>(<span class="string">"%.2d:%.2d %.2d:%.2d\n"</span>, a[i * <span class="number">2</span> - <span class="number">1</span>].s / <span class="number">60</span>, a[i * <span class="number">2</span> - <span class="number">1</span>].s % <span class="number">60</span>, a[i * <span class="number">2</span> - <span class="number">1</span>].t / <span class="number">60</span>, a[i * <span class="number">2</span> - <span class="number">1</span>].t % <span class="number">60</span>);</div><div class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%.2d:%.2d %.2d:%.2d\n"</span>, a[i * <span class="number">2</span>].s / <span class="number">60</span>, a[i * <span class="number">2</span>].s % <span class="number">60</span>, a[i * <span class="number">2</span>].t / <span class="number">60</span>, a[i * <span class="number">2</span>].t % <span class="number">60</span>);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">n = read();</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)&#123;</div><div class="line"><span class="keyword">int</span> x, y, z, r;</div><div class="line"><span class="built_in">scanf</span>(<span class="string">"%d:%d %d:%d"</span>, &amp;x, &amp;y, &amp;z, &amp;r); dt[i] = read();</div><div class="line">a[i * <span class="number">2</span> - <span class="number">1</span>].s = x * <span class="number">60</span> + y; a[i * <span class="number">2</span> - <span class="number">1</span>].t = x * <span class="number">60</span> + y + dt[i];</div><div class="line">a[i * <span class="number">2</span>].s = z * <span class="number">60</span> + r - dt[i]; a[i * <span class="number">2</span>].t = z * <span class="number">60</span> + r;</div><div class="line">&#125;</div><div class="line">setmdl();</div><div class="line"><span class="keyword">if</span>(!solve()) <span class="keyword">return</span> ;</div><div class="line">rebuild();</div><div class="line">topo_sort();</div><div class="line">print();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">work();</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 知识点 </category>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 2-sat </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>POJ3678 Katu Puzzle 题解</title>
      <link href="/2017/12/10/POJ3678-Katu-Puzzle-%E9%A2%98%E8%A7%A3/"/>
      <content type="html"><![CDATA[<h3 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h3><h4 id="原题："><a href="#原题：" class="headerlink" title="原题："></a>原题：</h4><p><img src="/POJ3678-Katu-Puzzle-题解/Description.png" alt="Description"></p><h4 id="译题："><a href="#译题：" class="headerlink" title="译题："></a>译题：</h4><p>一些点，点的取值可以是0或者1，没有告诉你具体取值。</p><p>一些边，有权值，有运算方式（并，或，异或），要求和这条边相连的两个点经过边上的运算后的结果是边的权值。</p><p>问你有没有可能把每个点赋值满足所有边的要求。</p><h3 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h3><p>又一道<strong>2-sat判断合法性</strong>题目。</p><p>代码量稍微的就小了一些，相比于要输出方案的。</p><p>关键还是建边，这个建边就更直白了，毕竟给你的就是逻辑运算符，只不过要建的边多一点。</p><p>A  0<br>A’ 1<br>c op</p><div class="table-container"><table><thead><tr><th style="text-align:center">值</th><th style="text-align:center">op</th><th style="text-align:center">边</th><th style="text-align:center">边</th><th style="text-align:center">边</th><th style="text-align:center">边</th></tr></thead><tbody><tr><td style="text-align:center">0</td><td style="text-align:center">and</td><td style="text-align:center">i’-&gt;j</td><td style="text-align:center">j’-&gt;i</td><td style="text-align:center">N/A</td><td style="text-align:center">N/A</td></tr><tr><td style="text-align:center">0</td><td style="text-align:center">or</td><td style="text-align:center">i’-&gt;i</td><td style="text-align:center">j’-&gt;j</td><td style="text-align:center">i-&gt;j</td><td style="text-align:center">j-&gt;i</td></tr><tr><td style="text-align:center">0</td><td style="text-align:center">xor</td><td style="text-align:center">i-&gt;j</td><td style="text-align:center">i’-&gt;j’</td><td style="text-align:center">j-&gt;i</td><td style="text-align:center">j’-&gt;i’</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">and</td><td style="text-align:center">i’-&gt;i</td><td style="text-align:center">j’-&gt;j</td><td style="text-align:center">i’-&gt;j’</td><td style="text-align:center">j’-&gt;i’</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">or</td><td style="text-align:center">i-&gt;j’</td><td style="text-align:center">j-&gt;i’</td><td style="text-align:center">N/A</td><td style="text-align:center">N/A</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">xor</td><td style="text-align:center">i-&gt;j’</td><td style="text-align:center">i’-&gt;j</td><td style="text-align:center">j-&gt;i’</td><td style="text-align:center">j’-&gt;i</td></tr></tbody></table></div><h3 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i, a, b) for(int i = a; i &lt;= b; i ++)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REPG(i, x) for(int i = head[x]; i; i = g[i].nxt)</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> mem(x, y) memset(x, y, sizeof(x));</span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> LF;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">Max</span><span class="params">(LL a, LL b)</span></span>&#123;<span class="keyword">return</span> a &gt; b ? a : b;&#125;</div><div class="line"><span class="function">LL <span class="title">Min</span><span class="params">(LL a, LL b)</span></span>&#123;<span class="keyword">return</span> a &lt; b ? a : b;&#125;</div><div class="line"><span class="function">LL <span class="title">abs</span><span class="params">(LL x)</span></span>&#123;<span class="keyword">return</span> x &gt; <span class="number">0</span> ? x : -x;&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">2e4</span> + <span class="number">15</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXM = <span class="number">2e6</span> + <span class="number">15</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span><span class="keyword">int</span> to, nxt;&#125;g[MAXN &lt;&lt; <span class="number">1</span>];</div><div class="line"><span class="keyword">int</span> head[MAXN], cnt = <span class="number">0</span>, tim = <span class="number">0</span>, tot = <span class="number">0</span>, dfn[MAXN], low[MAXN], belong[MAXN];</div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"><span class="keyword">bool</span> instack[MAXN];</div><div class="line"><span class="built_in">stack</span> &lt;<span class="keyword">int</span>&gt; sta;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span>&#123;g[++ cnt] = (Edge)&#123;v, head[u]&#125;; head[u] = cnt;&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">int</span> r = <span class="number">0</span>, z = <span class="number">1</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line"><span class="keyword">while</span>(ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch == <span class="string">'-'</span>) z = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">while</span>(ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>)&#123;r = r * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">return</span> r * z;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</div><div class="line">dfn[u] = low[u] = ++ tim;</div><div class="line">sta.push(u); instack[u] = <span class="number">1</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; i; i = g[i].nxt)&#123;</div><div class="line"><span class="keyword">int</span> v = g[i].to;</div><div class="line"><span class="keyword">if</span>(!dfn[v])&#123;</div><div class="line">tarjan(v);</div><div class="line">low[u] = min(low[u], low[v]);</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> <span class="keyword">if</span>(instack[v]) low[u] = min(low[u], dfn[v]);</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>(dfn[u] == low[u])&#123;</div><div class="line">tot ++; <span class="keyword">int</span> i;</div><div class="line"><span class="keyword">do</span>&#123;</div><div class="line">i = sta.top(); sta.pop();</div><div class="line">instack[i] = <span class="number">0</span>; belong[i] = tot;</div><div class="line">&#125;<span class="keyword">while</span>(i != u);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n * <span class="number">2</span>; i ++) <span class="keyword">if</span>(!dfn[i]) tarjan(i);</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)&#123;</div><div class="line"><span class="keyword">if</span>(belong[i * <span class="number">2</span> - <span class="number">1</span>] == belong[i * <span class="number">2</span>])&#123;<span class="built_in">printf</span>(<span class="string">"NO\n"</span>); <span class="keyword">return</span> ;&#125;</div><div class="line">&#125;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"YES\n"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">n = read(), m = read(); <span class="keyword">char</span> ch[<span class="number">10</span>];</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i ++)&#123;</div><div class="line"><span class="keyword">int</span> u = read() + <span class="number">1</span>, v = read() + <span class="number">1</span>, c = read(); <span class="built_in">scanf</span>(<span class="string">"%s"</span>, ch + <span class="number">1</span>);</div><div class="line"><span class="keyword">if</span>(!c)&#123;</div><div class="line"><span class="keyword">if</span>(ch[<span class="number">1</span>] == <span class="string">'A'</span>) add(<span class="number">2</span> * u, <span class="number">2</span> * v - <span class="number">1</span>), add(<span class="number">2</span> * v, <span class="number">2</span> * u - <span class="number">1</span>);</div><div class="line"><span class="keyword">else</span> <span class="keyword">if</span>(ch[<span class="number">1</span>] == <span class="string">'O'</span>) add(<span class="number">2</span> * u, <span class="number">2</span> * u - <span class="number">1</span>), add(<span class="number">2</span> * v, <span class="number">2</span> * v - <span class="number">1</span>), add(<span class="number">2</span> * u - <span class="number">1</span>, <span class="number">2</span> * v - <span class="number">1</span>), add(<span class="number">2</span> * v - <span class="number">1</span>, <span class="number">2</span> * u - <span class="number">1</span>);</div><div class="line"><span class="keyword">else</span> add(<span class="number">2</span> * u - <span class="number">1</span>, <span class="number">2</span> * v - <span class="number">1</span>), add(<span class="number">2</span> * u, <span class="number">2</span> * v), add(<span class="number">2</span> * v - <span class="number">1</span>, <span class="number">2</span> * u - <span class="number">1</span>), add(<span class="number">2</span> * v, <span class="number">2</span> * u);</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> &#123;</div><div class="line"><span class="keyword">if</span>(ch[<span class="number">1</span>] == <span class="string">'A'</span>) add(<span class="number">2</span> * u - <span class="number">1</span>, <span class="number">2</span> * u), add(<span class="number">2</span> * v - <span class="number">1</span>, <span class="number">2</span> * v), add(<span class="number">2</span> * u, <span class="number">2</span> * v), add(<span class="number">2</span> * v, <span class="number">2</span> * u);</div><div class="line"><span class="keyword">else</span> <span class="keyword">if</span>(ch[<span class="number">1</span>] == <span class="string">'O'</span>) add(<span class="number">2</span> * u - <span class="number">1</span>, <span class="number">2</span> * v), add(<span class="number">2</span> * v - <span class="number">1</span>, <span class="number">2</span> * u);</div><div class="line"><span class="keyword">else</span> add(<span class="number">2</span> * u - <span class="number">1</span>, <span class="number">2</span> * v), add(<span class="number">2</span> * u, <span class="number">2</span> * v - <span class="number">1</span>), add(<span class="number">2</span> * v - <span class="number">1</span>, <span class="number">2</span> * u), add(<span class="number">2</span> * v, <span class="number">2</span> * u - <span class="number">1</span>);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">solve();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">init();</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 知识点 </category>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 2-sat </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>POJ3648 Wedding 题解</title>
      <link href="/2017/12/10/POJ3648-Wedding-%E9%A2%98%E8%A7%A3/"/>
      <content type="html"><![CDATA[<h3 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h3><h4 id="原题："><a href="#原题：" class="headerlink" title="原题："></a>原题：</h4><p><img src="/2017/12/10/POJ3648-Wedding-题解/Description.png" alt="Description"></p><h4 id="译题："><a href="#译题：" class="headerlink" title="译题："></a>译题：</h4><p>一对新婚的夫妇邀请(n-1)对夫妇来参加自己的宴会,这对新人以及这些受邀请的夫妇都坐在长桌子的两边,新娘和新郎分别坐在桌子的两侧,新娘不希望看到她邀请来的那些夫妇之中有妻子和丈夫坐在同一边的情况(即妻子和丈夫要分作桌子的两边),在这n对夫妇中有一些男女存在着暧昧的关系,所以新娘也不希望看到有暧昧关系的人坐在她对面的那一侧.求解是否存在一种满足新娘要求的座位分配方案,如果存在的话,那么就输出这方案,否则输出”bad luck”.</p><h3 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h3><p>这道题属于<strong>2-sat输出解</strong>类型，比较麻烦，不过这也是有套路的，就是tarjan缩点建反图，然后拓扑排序，染色，输出答案即可。</p><p>我们设新娘编号为0，新郎为1，被邀请到的couples中，wife的编号为$2\times i$husband的编号为$2\times i + 1$。</p><p>我们以<strong>新娘对面的状态建图</strong>。</p><p>我们首先要建边0-&gt;1，表示对面一定坐着新郎。</p><p>然后我们根据输入中的“特殊关系”来建边。</p><p>对于A和B不能坐在同一边，</p><p>A-&gt;B’ B’-&gt;A</p><h4 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i, a, b) for(int i = a; i &lt;= b; i ++)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REPG(i, x) for(int i = head[x]; i; i = g[i].nxt)</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(x, y) memset(x, y, sizeof(x));</span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> LF;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">Max</span><span class="params">(LL a, LL b)</span></span>&#123;<span class="keyword">return</span> a &gt; b ? a : b;&#125;</div><div class="line"><span class="function">LL <span class="title">Min</span><span class="params">(LL a, LL b)</span></span>&#123;<span class="keyword">return</span> a &lt; b ? a : b;&#125;</div><div class="line"><span class="function">LL <span class="title">abs</span><span class="params">(LL x)</span></span>&#123;<span class="keyword">return</span> x &gt; <span class="number">0</span> ? x : -x;&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">5e4</span> + <span class="number">15</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXM = <span class="number">3e6</span> + <span class="number">15</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span><span class="keyword">int</span> to, nxt;&#125;g[MAXN &lt;&lt; <span class="number">1</span>], e[MAXN &lt;&lt; <span class="number">1</span>];</div><div class="line"><span class="keyword">int</span> head[MAXN], cnt = <span class="number">0</span>, head1[MAXN], cnt1 = <span class="number">0</span>, tim = <span class="number">0</span>, tot = <span class="number">0</span>, belong[MAXN], col[MAXN], dfn[MAXN], low[MAXN], opp[MAXN];</div><div class="line"><span class="keyword">int</span> n, m, d[MAXN];</div><div class="line"><span class="keyword">bool</span> instack[MAXN];</div><div class="line"><span class="built_in">stack</span> &lt;<span class="keyword">int</span>&gt; sta;</div><div class="line"><span class="built_in">queue</span> &lt;<span class="keyword">int</span>&gt; q;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span>&#123;g[++ cnt] = (Edge)&#123;v, head[u]&#125;; head[u] = cnt;&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add1</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span>&#123;e[++ cnt1] = (Edge)&#123;v, head1[u]&#125;; head1[u] = cnt1;&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">cnt = cnt1 = tim = tot = <span class="number">0</span>;</div><div class="line">clr(head, <span class="number">-1</span>); clr(head1, <span class="number">-1</span>); clr(belong, <span class="number">0</span>);</div><div class="line">clr(col, <span class="number">-1</span>); clr(instack, <span class="number">0</span>); clr(dfn, <span class="number">0</span>);</div><div class="line">clr(low, <span class="number">0</span>); clr(opp, <span class="number">0</span>); clr(d, <span class="number">0</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">int</span> r = <span class="number">0</span>, z = <span class="number">1</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line"><span class="keyword">while</span>(ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch == <span class="string">'-'</span>) z = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">while</span>(ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>)&#123;r = r * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">return</span> r * z;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</div><div class="line">dfn[u] = low[u] = ++ tim;</div><div class="line">sta.push(u); instack[u] = <span class="number">1</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; ~i; i = g[i].nxt)&#123;</div><div class="line"><span class="keyword">int</span> v = g[i].to;</div><div class="line"><span class="keyword">if</span>(!dfn[v])&#123;</div><div class="line">tarjan(v);</div><div class="line">low[u] = min(low[u], low[v]);</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> <span class="keyword">if</span>(instack[v]) low[u] = min(low[u], dfn[v]);</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>(dfn[u] == low[u])&#123;</div><div class="line">tot ++; <span class="keyword">int</span> i;</div><div class="line"><span class="keyword">do</span>&#123;</div><div class="line">i = sta.top(); sta.pop();</div><div class="line">instack[i] = <span class="number">0</span>; belong[i] = tot;</div><div class="line">&#125;<span class="keyword">while</span>(i != u);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">rebuild</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n * <span class="number">2</span>; i ++)&#123;</div><div class="line"><span class="keyword">int</span> u1 = belong[i];</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = head[i]; ~j; j = g[j].nxt)&#123;</div><div class="line"><span class="keyword">int</span> v1 = belong[g[j].to];</div><div class="line"><span class="keyword">if</span>(u1 != v1) add1(v1, u1), d[u1] ++;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">topo</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= tot; i ++) <span class="keyword">if</span>(!d[i]) q.push(i);</div><div class="line"><span class="keyword">while</span>(!q.empty())&#123;</div><div class="line"><span class="keyword">int</span> u = q.front(); q.pop();</div><div class="line"><span class="keyword">if</span>(col[u] == <span class="number">-1</span>) col[u] = <span class="number">1</span>, col[opp[u]] = <span class="number">0</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = head1[u]; ~i; i = e[i].nxt)&#123;</div><div class="line"><span class="keyword">int</span> v = e[i].to; d[v] --;</div><div class="line"><span class="keyword">if</span>(!d[v]) q.push(v);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; <span class="number">2</span> * n; i += <span class="number">2</span>)&#123;</div><div class="line"><span class="keyword">if</span>(col[belong[i]] == col[belong[<span class="number">0</span>]]) <span class="built_in">printf</span>(<span class="string">"%dw "</span>, i / <span class="number">2</span>);</div><div class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%dh "</span>, i / <span class="number">2</span>);</div><div class="line">&#125;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span> * n; i ++) <span class="keyword">if</span>(!dfn[i]) tarjan(i);</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i ++)&#123;</div><div class="line"><span class="keyword">if</span>(belong[i * <span class="number">2</span>] == belong[i * <span class="number">2</span> + <span class="number">1</span>])&#123;<span class="built_in">printf</span>(<span class="string">"bad luck\n"</span>); <span class="keyword">return</span> ;&#125;</div><div class="line">opp[belong[i * <span class="number">2</span>]] = belong[i * <span class="number">2</span> + <span class="number">1</span>];</div><div class="line">opp[belong[i * <span class="number">2</span> + <span class="number">1</span>]] = belong[i * <span class="number">2</span>];</div><div class="line">&#125;</div><div class="line">rebuild();</div><div class="line">topo();</div><div class="line">print();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">n = read(), m = read();</div><div class="line"><span class="keyword">while</span>(n &amp;&amp; m)&#123;</div><div class="line">init();</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i ++)&#123;</div><div class="line"><span class="keyword">int</span> u, v; <span class="keyword">char</span> s, t;</div><div class="line"><span class="keyword">int</span> a0, a1, b0, b1;</div><div class="line"><span class="built_in">scanf</span>(<span class="string">"%d %c %d %c"</span>, &amp;u, &amp;s, &amp;v, &amp;t);</div><div class="line"><span class="keyword">if</span>(s == <span class="string">'h'</span>) a0 = <span class="number">2</span> * u, a1 = <span class="number">2</span> * u + <span class="number">1</span>;</div><div class="line"><span class="keyword">else</span> a0 = <span class="number">2</span> * u + <span class="number">1</span>, a1 = <span class="number">2</span> * u;</div><div class="line"><span class="keyword">if</span>(t == <span class="string">'h'</span>) b0 = <span class="number">2</span> * v, b1 = <span class="number">2</span> * v + <span class="number">1</span>;</div><div class="line"><span class="keyword">else</span> b0 = <span class="number">2</span> * v + <span class="number">1</span>, b1 = <span class="number">2</span> * v;</div><div class="line">add(a1, b0); add(b1, a0);</div><div class="line">&#125; add(<span class="number">0</span>, <span class="number">1</span>);</div><div class="line">solve();</div><div class="line">n = read(), m = read();</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">work();</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 知识点 </category>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 2-sat </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>POJ2749 Building roads 题解</title>
      <link href="/2017/12/10/POJ2749-Building-roads-%E9%A2%98%E8%A7%A3/"/>
      <content type="html"><![CDATA[<h1 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h1><h2 id="原题："><a href="#原题：" class="headerlink" title="原题："></a>原题：</h2><p><img src="/2017/12/10/POJ2749-Building-roads-题解/Description2.png" alt="Description"></p><h2 id="译题："><a href="#译题：" class="headerlink" title="译题："></a>译题：</h2><p>有n个农场，每个农场有坐标x，y。</p><p>有两个集合点s1和s2（也有坐标），每个农场必须连接其中的一个（有且仅有一个）。</p><p>然后有A个条件，每个条件a，b表示a农场不能和b农场连接在一个集合点。</p><p>然后再有B个条件，每个条件a，b表示a农场必须和b农场连接在一个集合点。</p><p>问你，在各种合法的连接情况中，任何两个农场间的距离的最大值的最小值是多少。</p><h1 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h1><p>一看到最大值的最小值，我们要干什么呢？</p><p>二分答案！</p><p>没错，这道题和POJ2723很像，都是二分一下然后用2sat判定，这就做完了，怎样建图我想我不用多说了。</p><h1 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i, a, b) for(int i = a; i &lt;= b; i ++)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REPG(i, x) for(int i = head[x]; i; i = g[i].nxt)</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(x, y) memset(x, y, sizeof(x));</span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> LF;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">Max</span><span class="params">(LL a, LL b)</span></span>&#123;<span class="keyword">return</span> a &gt; b ? a : b;&#125;</div><div class="line"><span class="function">LL <span class="title">Min</span><span class="params">(LL a, LL b)</span></span>&#123;<span class="keyword">return</span> a &lt; b ? a : b;&#125;</div><div class="line"><span class="function">LL <span class="title">abs</span><span class="params">(LL x)</span></span>&#123;<span class="keyword">return</span> x &gt; <span class="number">0</span> ? x : -x;&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">2e4</span> + <span class="number">15</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXM = <span class="number">2e6</span> + <span class="number">15</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">1e8</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span><span class="keyword">int</span> to, nxt;&#125;g[MAXM &lt;&lt; <span class="number">1</span>];</div><div class="line"><span class="keyword">int</span> head[MAXN], cnt = <span class="number">0</span>, dfn[MAXN], low[MAXN], tim = <span class="number">0</span>, tot = <span class="number">0</span>, belong[MAXN], opp[MAXN];</div><div class="line"><span class="keyword">int</span> n, A, B, dis = <span class="number">0</span>, sx1, sy1, sx2, sy2, x[MAXN], y[MAXN], a[MAXN], b[MAXN], c[MAXN], d[MAXN];</div><div class="line"><span class="keyword">bool</span> instack[MAXN];</div><div class="line"><span class="built_in">stack</span> &lt;<span class="keyword">int</span>&gt; sta;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span>&#123;g[++ cnt] = (Edge)&#123;v, head[u]&#125;; head[u] = cnt;&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">int</span> r = <span class="number">0</span>, z = <span class="number">1</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line"><span class="keyword">while</span>(ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch == <span class="string">'-'</span>) z = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">while</span>(ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>)&#123;r = r * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">return</span> r * z;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">cnt = tim = tot = <span class="number">0</span>;</div><div class="line">clr(head, <span class="number">0</span>); clr(dfn, <span class="number">0</span>);</div><div class="line">clr(belong, <span class="number">0</span>); clr(low, <span class="number">0</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</div><div class="line">dfn[u] = low[u] = ++ tim;</div><div class="line">sta.push(u); instack[u] = <span class="number">1</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; i; i = g[i].nxt)&#123;</div><div class="line"><span class="keyword">int</span> v = g[i].to;</div><div class="line"><span class="keyword">if</span>(!dfn[v])&#123;</div><div class="line">tarjan(v);</div><div class="line">low[u] = min(low[u], low[v]);</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> <span class="keyword">if</span>(instack[v]) low[u] = min(low[u], dfn[v]);</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>(dfn[u] == low[u])&#123;</div><div class="line">tot ++; <span class="keyword">int</span> i;</div><div class="line"><span class="keyword">do</span>&#123;</div><div class="line">i = sta.top(); sta.pop();</div><div class="line">belong[i] = tot; instack[i] = <span class="number">0</span>;</div><div class="line">&#125;<span class="keyword">while</span>(i != u);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> k)</span></span>&#123;</div><div class="line">init();</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= A; i ++)&#123;</div><div class="line">add(a[i] * <span class="number">2</span>, b[i] * <span class="number">2</span> - <span class="number">1</span>);</div><div class="line">add(a[i] * <span class="number">2</span> - <span class="number">1</span>, b[i] * <span class="number">2</span>);</div><div class="line">add(b[i] * <span class="number">2</span>, a[i] * <span class="number">2</span> - <span class="number">1</span>);</div><div class="line">add(b[i] * <span class="number">2</span> - <span class="number">1</span>, a[i] * <span class="number">2</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= B; i ++)&#123;</div><div class="line">add(c[i] * <span class="number">2</span>, d[i] * <span class="number">2</span>);</div><div class="line">add(c[i] * <span class="number">2</span> - <span class="number">1</span>, d[i] * <span class="number">2</span> - <span class="number">1</span>);</div><div class="line">add(d[i] * <span class="number">2</span>, c[i] * <span class="number">2</span>);</div><div class="line">add(d[i] * <span class="number">2</span> - <span class="number">1</span>, c[i] * <span class="number">2</span> - <span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)&#123;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= n; j ++)&#123;</div><div class="line"><span class="keyword">if</span>(<span class="built_in">abs</span>(x[i] - sx1) + <span class="built_in">abs</span>(x[j] - sx1) + <span class="built_in">abs</span>(y[i] - sy1) + <span class="built_in">abs</span>(y[j] - sy1) &gt; k) add(<span class="number">2</span> * i - <span class="number">1</span>, <span class="number">2</span> * j), add(<span class="number">2</span> * j - <span class="number">1</span>, <span class="number">2</span> * i);   </div><div class="line">            <span class="keyword">if</span>(<span class="built_in">abs</span>(x[i] - sx1) + <span class="built_in">abs</span>(x[j] - sx2) + <span class="built_in">abs</span>(y[i] - sy1) + <span class="built_in">abs</span>(y[j] - sy2) + dis &gt; k) add(<span class="number">2</span> * i - <span class="number">1</span>, <span class="number">2</span> * j - <span class="number">1</span>), add(<span class="number">2</span> * j, <span class="number">2</span> * i);  </div><div class="line">            <span class="keyword">if</span>(<span class="built_in">abs</span>(x[i] - sx2) + <span class="built_in">abs</span>(x[j] - sx1) + <span class="built_in">abs</span>(y[i] - sy2) + <span class="built_in">abs</span>(y[j] - sy1) + dis &gt; k) add(<span class="number">2</span> * i, <span class="number">2</span> * j), add(<span class="number">2</span> * j - <span class="number">1</span>, <span class="number">2</span> * i - <span class="number">1</span>);</div><div class="line">            <span class="keyword">if</span>(<span class="built_in">abs</span>(x[i] - sx2) + <span class="built_in">abs</span>(x[j] - sx2) + <span class="built_in">abs</span>(y[i] - sy2) + <span class="built_in">abs</span>(y[j] - sy2) &gt; k) add(<span class="number">2</span> * i, <span class="number">2</span> * j - <span class="number">1</span>), add(<span class="number">2</span> * j, <span class="number">2</span> * i - <span class="number">1</span>);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n * <span class="number">2</span>; i ++) <span class="keyword">if</span>(!dfn[i]) tarjan(i);</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n * <span class="number">2</span>; i += <span class="number">2</span>)</div><div class="line"><span class="keyword">if</span>(belong[i] == belong[i + <span class="number">1</span>]) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"><span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">n = read(), A = read(), B = read();</div><div class="line">sx1 = read(), sy1 = read(), sx2 = read(), sy2 = read();</div><div class="line">dis = <span class="built_in">abs</span>(sx1 - sx2) + <span class="built_in">abs</span>(sy1 - sy2);</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) x[i] = read(), y[i] = read();</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= A; i ++) a[i] = read(), b[i] = read();</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= B; i ++) c[i] = read(), d[i] = read();</div><div class="line"><span class="keyword">int</span> l = <span class="number">0</span>, r = INF, ans = <span class="number">-1</span>;</div><div class="line"><span class="keyword">while</span>(l &lt;= r)&#123;</div><div class="line"><span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</div><div class="line"><span class="keyword">if</span>(check(mid)) r = mid - <span class="number">1</span>, ans = mid;</div><div class="line"><span class="keyword">else</span> l = mid + <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>(~ans) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"-1\n"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">work();</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 知识点 </category>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 2-sat </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>POJ2723 Get Luffy Out 题解</title>
      <link href="/2017/12/10/POJ2723-Get-Luffy-Out-%E9%A2%98%E8%A7%A3/"/>
      <content type="html"><![CDATA[<h1 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h1><h2 id="原题："><a href="#原题：" class="headerlink" title="原题："></a>原题：</h2><p><img src="/2017/12/10/POJ2723-Get-Luffy-Out-题解/Description1.png" alt="Description"></p><h2 id="译题："><a href="#译题：" class="headerlink" title="译题："></a>译题：</h2><p>鸳鸯锁：你的基友路飞被关进了一座M层的监狱，每层的门上由两把锁锁住，打开任意一把即可入内。这些锁的钥匙一共有2N种，两两互斥，当使用了一把钥匙后，另一把与其互斥的钥匙就会消失，造成鸳鸯锁永远只能解开一把。给定锁的配对关系和门上锁的编号，请计算最高能到达的层数。</p><h1 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h1><p>又是一道弱智题啊。。。还不用输出解，这岂不是很简单，套路套路，直接过。</p><p>哦，这道题多了一个二分答案，然后用2sat判定一下是否可行即可，具体可以看代码。</p><h1 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i, a, b) for(int i = a; i &lt;= b; i ++)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REPG(i, x) for(int i = head[x]; i; i = g[i].nxt)</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(x, y) memset(x, y, sizeof(x));</span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> LF;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">Max</span><span class="params">(LL a, LL b)</span></span>&#123;<span class="keyword">return</span> a &gt; b ? a : b;&#125;</div><div class="line"><span class="function">LL <span class="title">Min</span><span class="params">(LL a, LL b)</span></span>&#123;<span class="keyword">return</span> a &lt; b ? a : b;&#125;</div><div class="line"><span class="function">LL <span class="title">abs</span><span class="params">(LL x)</span></span>&#123;<span class="keyword">return</span> x &gt; <span class="number">0</span> ? x : -x;&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">2e4</span> + <span class="number">15</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXM = <span class="number">2e6</span> + <span class="number">15</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span><span class="keyword">int</span> to, nxt;&#125;g[MAXM &lt;&lt; <span class="number">1</span>];</div><div class="line"><span class="keyword">int</span> head[MAXN], a[MAXN], b[MAXN], cnt = <span class="number">0</span>, dfn[MAXN], low[MAXN], tim = <span class="number">0</span>, tot = <span class="number">0</span>, belong[MAXN], opp[MAXN];</div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"><span class="keyword">bool</span> instack[MAXN];</div><div class="line"><span class="built_in">stack</span> &lt;<span class="keyword">int</span>&gt; sta;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span>&#123;g[++ cnt] = (Edge)&#123;v, head[u]&#125;; head[u] = cnt;&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">int</span> r = <span class="number">0</span>, z = <span class="number">1</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line"><span class="keyword">while</span>(ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch == <span class="string">'-'</span>) z = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">while</span>(ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>)&#123;r = r * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">return</span> r * z;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">cnt = tim = tot = <span class="number">0</span>;</div><div class="line">clr(head, <span class="number">-1</span>); clr(dfn, <span class="number">0</span>);</div><div class="line">clr(belong, <span class="number">0</span>); clr(low, <span class="number">0</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</div><div class="line">dfn[u] = low[u] = ++ tim;</div><div class="line">sta.push(u); instack[u] = <span class="number">1</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; ~i; i = g[i].nxt)&#123;</div><div class="line"><span class="keyword">int</span> v = g[i].to;</div><div class="line"><span class="keyword">if</span>(!dfn[v])&#123;</div><div class="line">tarjan(v);</div><div class="line">low[u] = min(low[u], low[v]);</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> <span class="keyword">if</span>(instack[v]) low[u] = min(low[u], dfn[v]);</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>(dfn[u] == low[u])&#123;</div><div class="line">tot ++; <span class="keyword">int</span> i;</div><div class="line"><span class="keyword">do</span>&#123;</div><div class="line">i = sta.top(); sta.pop();</div><div class="line">belong[i] = tot; instack[i] = <span class="number">0</span>;</div><div class="line">&#125;<span class="keyword">while</span>(i != u);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> k)</span></span>&#123;</div><div class="line">init();</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; i ++)&#123;</div><div class="line">add(opp[a[i]], b[i]);</div><div class="line">add(opp[b[i]], a[i]);</div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n * <span class="number">2</span>; i ++) <span class="keyword">if</span>(!dfn[i]) tarjan(i);</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n * <span class="number">2</span>; i += <span class="number">2</span>)&#123;</div><div class="line"><span class="keyword">if</span>(belong[i] == belong[opp[i]]) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">n = read(), m = read();</div><div class="line"><span class="keyword">while</span>(n &amp;&amp; m)&#123;</div><div class="line"><span class="built_in">memset</span>(opp, <span class="number">0</span>, <span class="keyword">sizeof</span>(opp));</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)&#123;</div><div class="line"><span class="keyword">int</span> u = read(), v = read();</div><div class="line">opp[u] = v; opp[v] = u;</div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i ++) a[i] = read(), b[i] = read();</div><div class="line"><span class="keyword">int</span> l = <span class="number">0</span>, r = m, ans;</div><div class="line"><span class="keyword">while</span>(l &lt;= r)&#123;</div><div class="line"><span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</div><div class="line"><span class="keyword">if</span>(check(mid)) ans = mid, l = mid + <span class="number">1</span>;</div><div class="line"><span class="keyword">else</span> r = mid - <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">n = read(), m = read();</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">work();</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 知识点 </category>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 2-sat </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>点分治学习</title>
      <link href="/2017/12/09/%E7%82%B9%E5%88%86%E6%B2%BB%E5%AD%A6%E4%B9%A0/"/>
      <content type="html"><![CDATA[<p>最近学的东西比较多，感觉学了学点分治就已经彻底忘记平衡树了。。。。（<del>日常瞎扯.jpg</del>）</p><p>好，进入正题。</p><h2 id="讲解与模板："><a href="#讲解与模板：" class="headerlink" title="讲解与模板："></a>讲解与模板：</h2><p>先推荐几个讲解点分治的博客：</p><p><a href="https://www.cnblogs.com/chty/p/5912360.html" target="_blank" rel="external">传送门1</a> <a href="http://blog.csdn.net/ALPS233/article/details/51398629" target="_blank" rel="external">传送门2</a> <a href="http://blog.csdn.net/nixinyis/article/details/65445466" target="_blank" rel="external">传送门3</a></p><p>第3个讲得比较清楚，不过它的求重心好像有一些偏差。</p><p><strong>Q</strong> ：点分治是什么？</p><p><strong>A</strong> ：首先，它是一个算法，在竞赛中比较常用（废话）。</p><p><strong>Q</strong> ：点分治能干什么？</p><p><strong>A</strong> ：竞赛中，有一类题，就是<strong>求树上满足某特殊条件的路径的条数</strong>，一般见到这个，大概就可以套点分治了。它究竟还能干什么，好吧，必须承认我对其他的一无所知。。。</p><p><strong>注意：</strong></p><p>很多题解里面给出的getrt函数（即求重心函数）写的是有问题的，因为我们相当于是把重心当做新的根，但是此时的$size$（子树大小）没更新，导致下一次求重心的时候求错，所以我们每次要在递归每个子树的函数中，重新算一遍$size$。</p><h3 id="模板："><a href="#模板：" class="headerlink" title="模板："></a>模板：</h3><p>这个是POJ1741，题意就是说求树上距离$\leq k$的点对数量。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i, a, b) for(int i = a; i &lt;= b; i ++)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REPG(i, x) for(int i = head[x]; i; i = g[i].nxt)</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> mem(x, y) memset(x, y, sizeof(x));</span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> LF;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">2e4</span> + <span class="number">15</span>;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">Max</span><span class="params">(LL a, LL b)</span></span>&#123;<span class="keyword">return</span> a &gt; b ? a : b;&#125;</div><div class="line"><span class="function">LL <span class="title">Min</span><span class="params">(LL a, LL b)</span></span>&#123;<span class="keyword">return</span> a &lt; b ? a : b;&#125;</div><div class="line"><span class="function">LL <span class="title">abs</span><span class="params">(LL x)</span></span>&#123;<span class="keyword">return</span> x &gt; <span class="number">0</span> ? x : -x;&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span><span class="keyword">int</span> to, nxt, dis;&#125;g[MAXN];</div><div class="line"><span class="keyword">int</span> head[MAXN], cnt, f[MAXN], dd[MAXN], size[MAXN], d[MAXN];</div><div class="line"><span class="keyword">int</span> n, k, rt, ans, con, len;</div><div class="line"><span class="keyword">bool</span> vis[MAXN];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> dis)</span></span>&#123;g[++ cnt] = (Edge)&#123;v, head[u], dis&#125;; head[u] = cnt;&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> dis)</span></span>&#123;add(u, v, dis); add(v, u, dis);&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">clr</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) vis[i] = f[i] = size[i] = head[i] = dd[i] = <span class="number">0</span>;</div><div class="line">cnt = rt = <span class="number">0</span>, f[<span class="number">0</span>] = <span class="number">1e9</span>, con = n, len = ans = <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">int</span> r = <span class="number">0</span>, z = <span class="number">1</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line"><span class="keyword">while</span>(ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch == <span class="string">'-'</span>) z = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">while</span>(ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>)&#123;r = r * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">return</span> r * z;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">getrt</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> fafa)</span></span>&#123;</div><div class="line">size[u] = <span class="number">1</span>; f[u] = <span class="number">0</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; i; i = g[i].nxt)&#123;</div><div class="line"><span class="keyword">int</span> v = g[i].to; <span class="keyword">if</span>(v == fafa || vis[v]) <span class="keyword">continue</span>;</div><div class="line">getrt(v, u); size[u] += size[v];</div><div class="line">f[u] = max(f[u], size[v]);</div><div class="line">&#125;</div><div class="line">f[u] = max(f[u], con - size[u]);</div><div class="line"><span class="keyword">if</span>(f[u] &lt; f[rt]) rt = u;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">getdis</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> fafa)</span></span>&#123;</div><div class="line">size[u] = <span class="number">1</span>;</div><div class="line">dd[++ len] = d[u];</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; i; i = g[i].nxt)&#123;</div><div class="line"><span class="keyword">int</span> v = g[i].to; <span class="keyword">if</span>(v == fafa || vis[v]) <span class="keyword">continue</span>;</div><div class="line">d[v] = d[u] + g[i].dis; getdis(v, u);</div><div class="line">size[u] += size[v];</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">cal</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> w)</span></span>&#123;</div><div class="line">len = <span class="number">0</span>; d[u] = w; getdis(u, <span class="number">0</span>);</div><div class="line">sort(dd + <span class="number">1</span>, dd + len + <span class="number">1</span>);</div><div class="line"><span class="keyword">int</span> l = <span class="number">1</span>, r = len, sum = <span class="number">0</span>;</div><div class="line"><span class="keyword">while</span>(l &lt; r)&#123;</div><div class="line"><span class="keyword">if</span>(dd[l] + dd[r] &lt;= k) sum += r - l, l ++;</div><div class="line"><span class="keyword">else</span> r --;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> sum;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</div><div class="line">vis[u] = <span class="number">1</span>; ans += cal(u, <span class="number">0</span>);</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; i; i = g[i].nxt)&#123;</div><div class="line"><span class="keyword">int</span> v = g[i].to; <span class="keyword">if</span>(vis[v]) <span class="keyword">continue</span>;</div><div class="line">ans -= cal(v, g[i].dis);</div><div class="line">rt = <span class="number">0</span>; con = size[v];</div><div class="line">getrt(v, <span class="number">0</span>); solve(rt);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">while</span>((n = read()) &amp;&amp; (k = read()))&#123; clr();</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i ++)&#123;</div><div class="line"><span class="keyword">int</span> u = read(), v = read(), dis = read();</div><div class="line">add_edge(u, v, dis);</div><div class="line">&#125;</div><div class="line">getrt(<span class="number">1</span>, <span class="number">0</span>); solve(rt);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">init();</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>稍微讲一下这个程序：</p><p>我们把树上的路径分为两种：经过根的路径，不经过根的路径。</p><p>对于每个根，我们计算了每棵子树上的所有点到当前根的$dist$，然后排序，用two-pointer计数，其中有一些非法的路径，就是两条到根的路径出自同一棵子树，如下图，我们需要把它减掉。然后就做完了啊。</p><p><img src="/2017/12/09/点分治学习/非法路径.png" alt="非法路径"></p><h2 id="题目与练习："><a href="#题目与练习：" class="headerlink" title="题目与练习："></a>题目与练习：</h2><h3 id="BZOJ1468"><a href="#BZOJ1468" class="headerlink" title="BZOJ1468"></a>BZOJ1468</h3><h4 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h4><p>与POJ1741相同</p><h4 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h4><p>模板题。</p><h4 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"> </div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"> </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> LF;</div><div class="line"> </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">4e4</span> + <span class="number">15</span>;</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span><span class="keyword">int</span> to, nxt, dis;&#125;g[MAXN &lt;&lt; <span class="number">1</span>];</div><div class="line"><span class="keyword">int</span> size[MAXN], f[MAXN], dd[MAXN], d[MAXN], head[MAXN];</div><div class="line"><span class="keyword">int</span> rt = <span class="number">0</span>, n, k, cnt = <span class="number">0</span>, con, ans = <span class="number">0</span>, len = <span class="number">0</span>;</div><div class="line"><span class="keyword">bool</span> vis[MAXN];</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> dis)</span></span>&#123;g[++ cnt] = (Edge)&#123;v, head[u], dis&#125;; head[u] = cnt;&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> dis)</span></span>&#123;add(u, v, dis); add(v, u, dis);&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> r = <span class="number">0</span>, z = <span class="number">1</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line">    <span class="keyword">while</span>(ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch == <span class="string">'-'</span>) z = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">while</span>(ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>)&#123;r = r * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">return</span> r * z;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">getrt</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> fafa)</span></span>&#123;</div><div class="line">    size[u] = <span class="number">1</span>; f[u] = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; i; i = g[i].nxt)&#123;</div><div class="line">        <span class="keyword">int</span> v = g[i].to; <span class="keyword">if</span>(vis[v] || v == fafa) <span class="keyword">continue</span>;</div><div class="line">        getrt(v, u); size[u] += size[v];</div><div class="line">        f[u] = max(f[u], size[v]);</div><div class="line">    &#125;</div><div class="line">    f[u] = max(f[u], con - size[u]);</div><div class="line">    <span class="keyword">if</span>(f[u] &lt; f[rt]) rt = u;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">getdis</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> fafa)</span></span>&#123;</div><div class="line">    size[u] = <span class="number">1</span>; dd[++ len] = d[u];</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; i; i = g[i].nxt)&#123;</div><div class="line">        <span class="keyword">int</span> v = g[i].to; <span class="keyword">if</span>(vis[v] || v == fafa) <span class="keyword">continue</span>;</div><div class="line">        d[v] = d[u] + g[i].dis; getdis(v, u);</div><div class="line">        size[u] += size[v];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">cal</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> w)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>;</div><div class="line">    len = <span class="number">0</span>; d[u] = w; getdis(u, <span class="number">0</span>);</div><div class="line">    sort(dd + <span class="number">1</span>, dd + len + <span class="number">1</span>);</div><div class="line">    <span class="keyword">int</span> l = <span class="number">1</span>, r = len;</div><div class="line">    <span class="keyword">while</span>(l &lt; r)&#123;</div><div class="line">        <span class="keyword">if</span>(dd[l] + dd[r] &lt;= k) ret += r - l, l ++;</div><div class="line">        <span class="keyword">else</span> r --;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</div><div class="line">    vis[u] = <span class="number">1</span>; ans += cal(u, <span class="number">0</span>);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; i; i = g[i].nxt)&#123;</div><div class="line">        <span class="keyword">int</span> v = g[i].to; <span class="keyword">if</span>(vis[v]) <span class="keyword">continue</span>;</div><div class="line">        ans -= cal(v, g[i].dis);</div><div class="line">        rt = <span class="number">0</span>; con = size[v];</div><div class="line">        getrt(v, <span class="number">0</span>); solve(rt);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">    n = read();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i ++)&#123;</div><div class="line">        <span class="keyword">int</span> u = read(), v = read(), dis = read();</div><div class="line">        add_edge(u, v, dis);</div><div class="line">    &#125; k = read();</div><div class="line">    f[<span class="number">0</span>] = con = n;</div><div class="line">    getrt(<span class="number">1</span>, <span class="number">0</span>); solve(rt);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    work();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="BZOJ3365"><a href="#BZOJ3365" class="headerlink" title="BZOJ3365"></a>BZOJ3365</h3><h4 id="题意：-1"><a href="#题意：-1" class="headerlink" title="题意："></a>题意：</h4><p>与之前两题相同。</p><h4 id="题解：-1"><a href="#题解：-1" class="headerlink" title="题解："></a>题解：</h4><p>略。</p><h4 id="代码：-1"><a href="#代码：-1" class="headerlink" title="代码："></a>代码：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"> </div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"> </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> LF;</div><div class="line"> </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">4e4</span> + <span class="number">15</span>;</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span><span class="keyword">int</span> to, nxt, dis;&#125;g[MAXN &lt;&lt; <span class="number">1</span>];</div><div class="line"><span class="keyword">int</span> size[MAXN], f[MAXN], dd[MAXN], d[MAXN], head[MAXN];</div><div class="line"><span class="keyword">int</span> rt = <span class="number">0</span>, n, k, cnt = <span class="number">0</span>, con, ans = <span class="number">0</span>, len = <span class="number">0</span>;</div><div class="line"><span class="keyword">bool</span> vis[MAXN];</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> dis)</span></span>&#123;g[++ cnt] = (Edge)&#123;v, head[u], dis&#125;; head[u] = cnt;&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> dis)</span></span>&#123;add(u, v, dis); add(v, u, dis);&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> r = <span class="number">0</span>, z = <span class="number">1</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line">    <span class="keyword">while</span>(ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch == <span class="string">'-'</span>) z = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">while</span>(ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>)&#123;r = r * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">return</span> r * z;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">getrt</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> fafa)</span></span>&#123;</div><div class="line">    size[u] = <span class="number">1</span>; f[u] = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; i; i = g[i].nxt)&#123;</div><div class="line">        <span class="keyword">int</span> v = g[i].to; <span class="keyword">if</span>(vis[v] || v == fafa) <span class="keyword">continue</span>;</div><div class="line">        getrt(v, u); size[u] += size[v];</div><div class="line">        f[u] = max(f[u], size[v]);</div><div class="line">    &#125;</div><div class="line">    f[u] = max(f[u], con - size[u]);</div><div class="line">    <span class="keyword">if</span>(f[u] &lt; f[rt]) rt = u;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">getdis</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> fafa)</span></span>&#123;</div><div class="line">    dd[++ len] = d[u]; size[u] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; i; i = g[i].nxt)&#123;</div><div class="line">        <span class="keyword">int</span> v = g[i].to; <span class="keyword">if</span>(vis[v] || v == fafa) <span class="keyword">continue</span>;</div><div class="line">        d[v] = d[u] + g[i].dis; getdis(v, u); size[u] += size[v];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">cal</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> w)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>;</div><div class="line">    len = <span class="number">0</span>; d[u] = w; getdis(u, <span class="number">0</span>);</div><div class="line">    sort(dd + <span class="number">1</span>, dd + len + <span class="number">1</span>);</div><div class="line">    <span class="keyword">int</span> l = <span class="number">1</span>, r = len;</div><div class="line">    <span class="keyword">while</span>(l &lt; r)&#123;</div><div class="line">        <span class="keyword">if</span>(dd[l] + dd[r] &lt;= k) ret += r - l, l ++;</div><div class="line">        <span class="keyword">else</span> r --;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</div><div class="line">    vis[u] = <span class="number">1</span>; ans += cal(u, <span class="number">0</span>);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; i; i = g[i].nxt)&#123;</div><div class="line">        <span class="keyword">int</span> v = g[i].to; <span class="keyword">if</span>(vis[v]) <span class="keyword">continue</span>;</div><div class="line">        ans -= cal(v, g[i].dis);</div><div class="line">        rt = <span class="number">0</span>; con = size[v];</div><div class="line">        getrt(v, <span class="number">0</span>); solve(rt);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">    n = read(); <span class="keyword">int</span> m = read();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i ++)&#123;</div><div class="line">        <span class="keyword">int</span> u = read(), v = read(), dis = read(); <span class="keyword">char</span> ch[<span class="number">5</span>]; <span class="built_in">scanf</span>(<span class="string">"%s"</span>, ch);</div><div class="line">        add_edge(u, v, dis);</div><div class="line">    &#125; k = read();</div><div class="line">    f[<span class="number">0</span>] = con = n;</div><div class="line">    getrt(<span class="number">1</span>, <span class="number">0</span>); solve(rt);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    work();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="BZOJ2152："><a href="#BZOJ2152：" class="headerlink" title="BZOJ2152："></a>BZOJ2152：</h3><h4 id="题意：-2"><a href="#题意：-2" class="headerlink" title="题意："></a>题意：</h4><p>一棵树，路径距离是3的倍数的点对数占总点对数的百分之多少，求出这个分数（最简形式）。</p><h4 id="题解：-2"><a href="#题解：-2" class="headerlink" title="题解："></a>题解：</h4><p>首先，我们可以知道，总点对数的数量是$n\times n$个，最简形式也好搞，分子分母求个gcd就完了。</p><p>所以说，我们成功的把这个问题转化成了求满足树上路径距离是3的倍数的路径条数，很好，这显然就变成了点分治的”套路题“。</p><p>那么接下连我们怎么套路一番呢？很简单，我们递归每一棵子树时，g[0]表示路径距离$mod\ \ 3\equiv 0$的条数，g[1]和g[2]道理同前。</p><p>那么显然，每一棵子树的贡献就是$2\times g[1]\times g[2]+g[0]\times g[0]$</p><p>什么？不明白？</p><p>那再看一遍题吧，(3,4)和(4,3)算两种。。。</p><p>好吧，怪我没说清楚。</p><p>那么，又做完了一道题！</p><h4 id="代码：-2"><a href="#代码：-2" class="headerlink" title="代码："></a>代码：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"> </div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"> </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> LF;</div><div class="line"> </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">4e4</span> + <span class="number">15</span>;</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span><span class="keyword">int</span> to, nxt, dis;&#125;g[MAXN];</div><div class="line"><span class="keyword">int</span> size[MAXN], f[MAXN], d[<span class="number">5</span>], head[MAXN];</div><div class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>, con, rt, n, ans = <span class="number">0</span>;</div><div class="line"><span class="keyword">bool</span> vis[MAXN];</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> dis)</span></span>&#123;g[++ cnt] = (Edge)&#123;v, head[u], dis&#125;; head[u] = cnt;&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> dis)</span></span>&#123;add(u, v, dis); add(v, u, dis);&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> r = <span class="number">0</span>, z = <span class="number">1</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line">    <span class="keyword">while</span>(ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch == <span class="string">'-'</span>) z = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">while</span>(ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>)&#123;r = r * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">return</span> r * z;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;<span class="keyword">return</span> (!b) ? a : gcd(b, a % b);&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">getrt</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> fafa)</span></span>&#123;</div><div class="line">    size[u] = <span class="number">1</span>; f[u] = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; i; i = g[i].nxt)&#123;</div><div class="line">        <span class="keyword">int</span> v = g[i].to; <span class="keyword">if</span>(vis[v] || v == fafa) <span class="keyword">continue</span>;</div><div class="line">        getrt(v, u); size[u] += size[v];</div><div class="line">        f[u] = max(f[u], size[v]);</div><div class="line">    &#125;</div><div class="line">    f[u] = max(f[u], con - size[u]);</div><div class="line">    <span class="keyword">if</span>(f[u] &lt; f[rt]) rt = u;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">getdis</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> w, <span class="keyword">int</span> fafa)</span></span>&#123;</div><div class="line">    d[w] ++; size[u] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; i; i = g[i].nxt)&#123;</div><div class="line">        <span class="keyword">int</span> v = g[i].to; <span class="keyword">if</span>(vis[v] || v == fafa) <span class="keyword">continue</span>;</div><div class="line">        getdis(v, (w + g[i].dis) % <span class="number">3</span>, u); size[u] += size[v];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</div><div class="line">    vis[u] = <span class="number">1</span>; d[<span class="number">0</span>] = d[<span class="number">1</span>] = d[<span class="number">2</span>] = <span class="number">0</span>;</div><div class="line">    getdis(u, <span class="number">0</span>, <span class="number">0</span>); ans += d[<span class="number">0</span>] * d[<span class="number">0</span>] + <span class="number">2</span> * d[<span class="number">1</span>] * d[<span class="number">2</span>];</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; i; i = g[i].nxt)&#123;</div><div class="line">        <span class="keyword">int</span> v = g[i].to; <span class="keyword">if</span>(vis[v]) <span class="keyword">continue</span>;</div><div class="line">        d[<span class="number">0</span>] = d[<span class="number">1</span>] = d[<span class="number">2</span>] = <span class="number">0</span>;</div><div class="line">        getdis(v, g[i].dis, u);</div><div class="line">        ans -= d[<span class="number">0</span>] * d[<span class="number">0</span>] + <span class="number">2</span> * d[<span class="number">1</span>] * d[<span class="number">2</span>];</div><div class="line">        rt = <span class="number">0</span>; con = size[v];</div><div class="line">        getrt(v, <span class="number">0</span>); solve(rt);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">    n = read();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i ++)&#123;</div><div class="line">        <span class="keyword">int</span> u = read(), v = read(), dis = read();</div><div class="line">        add_edge(u, v, dis % <span class="number">3</span>);</div><div class="line">    &#125;</div><div class="line">    f[<span class="number">0</span>] = con = n;</div><div class="line">    getrt(<span class="number">1</span>, <span class="number">0</span>); solve(rt);</div><div class="line">    n *= n;</div><div class="line">    <span class="keyword">int</span> tmp = gcd(n, ans);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d/%d\n"</span>, ans / tmp, n / tmp);</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    work();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="BZOJ2599"><a href="#BZOJ2599" class="headerlink" title="BZOJ2599"></a>BZOJ2599</h3><h4 id="题意：-3"><a href="#题意：-3" class="headerlink" title="题意："></a>题意：</h4><p>给一棵树,每条边有权.求一条简单路径,权值和等于K,且边的数量最小.N &lt;= 200000, K &lt;= 1000000</p><h4 id="题解：-3"><a href="#题解：-3" class="headerlink" title="题解："></a>题解：</h4><p>看着是IOI的题，但是你看完题解以后，会发现这题并没有那么难。</p><p>这个乍一看跟点分治好像扯不上边啊。。。</p><p>不用点分治你用什么？？？</p><p>好吧，还是<del>强行扯回</del>点分治。</p><p>实际上这道题跟点分治并不是没关系，一看路径距离和，我像是个OIer都应该知道可以用点分治做吧。。。</p><p>我们用$d$数组表示该点深度，$dis$数组表示当前根到当前递归到的点的距离，同时我们再开一个$t$数组，$t[dist]$表示距离为$dist$经过的最少的边。然后对于当前的根，我们每递归完它的一个子树，就update一些$t$数组的值，同时，每次递归的时候，也更新一下$ans$的值。</p><p>大家不要被update(v, 0, 0)吓到，它只是为了清空$t$而生的，我（更准确的说是黄学长）觉得memset太慢。</p><p>这个做法事黄学长提供的，如果看不懂我的题解，可以看黄学长的。</p><p><a href="http://hzwer.com/4286.html" target="_blank" rel="external">hzwer的题解</a></p><h4 id="代码：-3"><a href="#代码：-3" class="headerlink" title="代码："></a>代码：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i, a, b) for(int i = a; i &lt;= b; i ++)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REPG(i, x) for(int i = head[x]; i; i = g[i].nxt)</span></div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> mem(x, y) memset(x, y, sizeof(x));</span></div><div class="line"> </div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"> </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> LF;</div><div class="line"> </div><div class="line"><span class="function">LL <span class="title">Max</span><span class="params">(LL a, LL b)</span></span>&#123;<span class="keyword">return</span> a &gt; b ? a : b;&#125;</div><div class="line"><span class="function">LL <span class="title">Min</span><span class="params">(LL a, LL b)</span></span>&#123;<span class="keyword">return</span> a &lt; b ? a : b;&#125;</div><div class="line"><span class="function">LL <span class="title">abs</span><span class="params">(LL x)</span></span>&#123;<span class="keyword">return</span> x &gt; <span class="number">0</span> ? x : -x;&#125;</div><div class="line"> </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">2e5</span> + <span class="number">15</span>;</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span><span class="keyword">int</span> to, nxt, dis;&#125;g[MAXN &lt;&lt; <span class="number">1</span>];</div><div class="line"><span class="keyword">int</span> head[MAXN], size[MAXN], t[MAXN * <span class="number">10</span>], f[MAXN], d[MAXN], dis[MAXN];</div><div class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>, rt, n, k, ans, con;</div><div class="line"><span class="keyword">bool</span> vis[MAXN];</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> dis)</span></span>&#123;g[++ cnt] = (Edge)&#123;v, head[u], dis&#125;; head[u] = cnt;&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> dis)</span></span>&#123;add(u, v, dis); add(v, u, dis);&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> r = <span class="number">0</span>, z = <span class="number">1</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line">    <span class="keyword">while</span>(ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch == <span class="string">'-'</span>) z = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">while</span>(ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>)&#123;r = r * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">return</span> r * z;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">getrt</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> fafa)</span></span>&#123;</div><div class="line">    size[u] = <span class="number">1</span>; f[u] = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; i; i = g[i].nxt)&#123;</div><div class="line">        <span class="keyword">int</span> v = g[i].to; <span class="keyword">if</span>(vis[v] || v == fafa) <span class="keyword">continue</span>;</div><div class="line">        getrt(v, u); size[u] += size[v];</div><div class="line">        f[u] = max(f[u], size[v]);</div><div class="line">    &#125;</div><div class="line">    f[u] = max(f[u], con - size[u]);</div><div class="line">    <span class="keyword">if</span>(f[u] &lt; f[rt]) rt = u;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> fafa, <span class="keyword">bool</span> opt)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(dis[u] &lt;= k)&#123;</div><div class="line">        <span class="keyword">if</span>(opt) t[dis[u]] = min(t[dis[u]], d[u]);</div><div class="line">        <span class="keyword">else</span> t[dis[u]] = <span class="number">1e9</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; i; i = g[i].nxt)&#123;</div><div class="line">        <span class="keyword">int</span> v = g[i].to; <span class="keyword">if</span>(vis[v] || v == fafa) <span class="keyword">continue</span>;</div><div class="line">        update(v, u, opt);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">cal</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> fafa)</span></span>&#123;</div><div class="line">    size[u] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">if</span>(dis[u] &lt;= k) ans = min(ans, t[k - dis[u]] + d[u]);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; i; i = g[i].nxt)&#123;</div><div class="line">        <span class="keyword">int</span> v = g[i].to; <span class="keyword">if</span>(vis[v] || v == fafa) <span class="keyword">continue</span>;</div><div class="line">        d[v] = d[u] + <span class="number">1</span>; dis[v] = dis[u] + g[i].dis;</div><div class="line">        cal(v, u); size[u] += size[v];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</div><div class="line">    vis[u] = <span class="number">1</span>; t[<span class="number">0</span>] = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; i; i = g[i].nxt)&#123;</div><div class="line">        <span class="keyword">int</span> v = g[i].to; <span class="keyword">if</span>(vis[v]) <span class="keyword">continue</span>;</div><div class="line">        d[v] = <span class="number">1</span>; dis[v] = g[i].dis;</div><div class="line">        cal(v, <span class="number">0</span>); update(v, <span class="number">0</span>, <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; i; i = g[i].nxt)&#123;</div><div class="line">        <span class="keyword">int</span> v = g[i].to; <span class="keyword">if</span>(vis[v]) <span class="keyword">continue</span>;</div><div class="line">        update(v, <span class="number">0</span>, <span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; i; i = g[i].nxt)&#123;</div><div class="line">        <span class="keyword">int</span> v = g[i].to; <span class="keyword">if</span>(vis[v]) <span class="keyword">continue</span>;</div><div class="line">        rt = <span class="number">0</span>; con = size[v];</div><div class="line">        getrt(v, <span class="number">0</span>); solve(rt);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    n = read(), k = read();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; i ++) t[i] = n;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i ++)&#123;</div><div class="line">        <span class="keyword">int</span> u = read() + <span class="number">1</span>, v = read() + <span class="number">1</span>, dis = read();</div><div class="line">        add_edge(u, v, dis);</div><div class="line">    &#125;</div><div class="line">    f[<span class="number">0</span>] = con = ans = n;</div><div class="line">    getrt(<span class="number">1</span>, <span class="number">0</span>); solve(rt);</div><div class="line">    <span class="keyword">if</span>(ans != n) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"-1\n"</span>);</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    init();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="BZOJ1316"><a href="#BZOJ1316" class="headerlink" title="BZOJ1316"></a>BZOJ1316</h3><h4 id="题意：-4"><a href="#题意：-4" class="headerlink" title="题意："></a>题意：</h4><p>一棵n个点的带权有根树，有p个询问，每次询问树中是否存在一条长度为Len的路径，如果是，输出Yes否输出No.</p><h4 id="题解：-4"><a href="#题解：-4" class="headerlink" title="题解："></a>题解：</h4><p>这道题就有点像最开始讲的那道模板题，只不过换成了=。<br>那我们应该怎么做呢？<br>同样的方法做，<br>只不过，我们不能用双指针了吧？！<br>是啊！<br>那怎么办呢？<br>两次二分呗！<br>两次二分分别二分我们要找的值的最左边出现的位置和最右边出现的位置。</p><p>这不就做完了吗？？？快去刷吧，这题太水了，洛谷都把它归为“模板题”啦！</p><h4 id="代码：-4"><a href="#代码：-4" class="headerlink" title="代码："></a>代码：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"> </div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"> </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> LF;</div><div class="line"> </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e4</span> + <span class="number">15</span>;</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span><span class="keyword">int</span> to, nxt, dis;&#125;g[MAXN &lt;&lt; <span class="number">1</span>];</div><div class="line"><span class="keyword">int</span> n, m, rt, cnt = <span class="number">0</span>, len = <span class="number">0</span>, con;</div><div class="line"><span class="keyword">int</span> head[MAXN], size[MAXN], f[MAXN], d[MAXN], dd[MAXN], q[MAXN], ans[MAXN];</div><div class="line"><span class="keyword">bool</span> vis[MAXN];</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> dis)</span></span>&#123;g[++ cnt] = (Edge)&#123;v, head[u], dis&#125;; head[u] = cnt;&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> dis)</span></span>&#123;add(u, v, dis); add(v, u, dis);&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">getrt</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> fafa)</span></span>&#123;</div><div class="line">    size[u] = <span class="number">1</span>; f[u] = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; i; i = g[i].nxt)&#123;</div><div class="line">        <span class="keyword">int</span> v = g[i].to; <span class="keyword">if</span>(vis[v] || v == fafa) <span class="keyword">continue</span>;</div><div class="line">        getrt(v, u); size[u] += size[v];</div><div class="line">        f[u] = max(f[u], size[v]);</div><div class="line">    &#125;</div><div class="line">    f[u] = max(f[u], con - size[u]);</div><div class="line">    <span class="keyword">if</span>(f[u] &lt; f[rt]) rt = u;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">find_l</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> k)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span>(l &lt;= r)&#123;</div><div class="line">        <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span>(dd[mid] == k) ans = mid, r = mid - <span class="number">1</span>;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(dd[mid] &lt; k) l = mid + <span class="number">1</span>;</div><div class="line">        <span class="keyword">else</span> r = mid - <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">find_r</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> k)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> ans = <span class="number">-1</span>;</div><div class="line">    <span class="keyword">while</span>(l &lt;= r)&#123;</div><div class="line">        <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span>(dd[mid] == k) ans = mid, l = mid + <span class="number">1</span>;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(dd[mid] &lt; k) l = mid + <span class="number">1</span>;</div><div class="line">        <span class="keyword">else</span> r = mid - <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">getdis</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> fafa)</span></span>&#123;</div><div class="line">    dd[++ len] = d[u];</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; i; i = g[i].nxt)&#123;</div><div class="line">        <span class="keyword">int</span> v = g[i].to; <span class="keyword">if</span>(vis[v] || v == fafa) <span class="keyword">continue</span>;</div><div class="line">        d[v] = d[u] + g[i].dis; getdis(v, u);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">cal</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> w, <span class="keyword">int</span> k)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>;</div><div class="line">    len = <span class="number">0</span>; d[u] = w; getdis(u, <span class="number">0</span>);</div><div class="line">    sort(dd + <span class="number">1</span>, dd + len + <span class="number">1</span>);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= len; i ++)&#123;</div><div class="line">        <span class="keyword">if</span>(<span class="number">2</span> * dd[i] &gt; k) <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">int</span> l = find_l(i, len, k - dd[i]);</div><div class="line">        <span class="keyword">int</span> r = find_r(i, len, k - dd[i]);</div><div class="line">        ret += r - l + <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</div><div class="line">    vis[u] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i ++) ans[i] += cal(u, <span class="number">0</span>, q[i]);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; i; i = g[i].nxt)&#123;</div><div class="line">        <span class="keyword">int</span> v = g[i].to; <span class="keyword">if</span>(vis[v]) <span class="keyword">continue</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j ++) ans[j] -= cal(v, g[i].dis, q[j]);</div><div class="line">        rt = <span class="number">0</span>; con = size[v];</div><div class="line">        getrt(v, <span class="number">0</span>); solve(rt);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> r = <span class="number">0</span>, z = <span class="number">1</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line">    <span class="keyword">while</span>(ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch == <span class="string">'-'</span>) z = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">while</span>(ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>)&#123;r = r * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">return</span> r * z;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">    n = read(), m = read();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i ++)&#123;</div><div class="line">        <span class="keyword">int</span> u = read(), v = read(), dis = read();</div><div class="line">        add_edge(u, v, dis);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i ++) q[i] = read();</div><div class="line">    f[<span class="number">0</span>] = con = n; rt = <span class="number">0</span>;</div><div class="line">    getrt(<span class="number">1</span>, <span class="number">0</span>); solve(rt);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i ++)&#123;</div><div class="line">        <span class="keyword">if</span>(ans[i]) <span class="built_in">printf</span>(<span class="string">"Yes\n"</span>);</div><div class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"No\n"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    work();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="BZOJ3697："><a href="#BZOJ3697：" class="headerlink" title="BZOJ3697："></a>BZOJ3697：</h3><h4 id="题意：-5"><a href="#题意：-5" class="headerlink" title="题意："></a>题意：</h4><p>采药人的药田是一个树状结构，每条路径上都种植着同种药材。<br>采药人以自己对药材独到的见解，对每种药材进行了分类。大致分为两类，一种是阴性的，一种是阳性的。<br>采药人每天都要进行采药活动。他选择的路径是很有讲究的，他认为阴阳平衡是很重要的，所以他走的一定是两种药材数目相等的路径。采药工作是很辛苦的，所以他希望他选出的路径中有一个可以作为休息站的节点（不包括起点和终点），满足起点到休息站和休息站到终点的路径也是阴阳平衡的。他想知道他一共可以选择多少种不同的路径。</p><h4 id="题解：-5"><a href="#题解：-5" class="headerlink" title="题解："></a>题解：</h4><p>如果觉得我讲的不够清楚，可以参照黄学长的blog：<a href="http://hzwer.com/4526.html" target="_blank" rel="external">传送门</a></p><p>我们先把边权为0的边改成-1。</p><p>想一想，我们是不是把这个问题转化成了：<strong>存在多少条路径，满足到中间的某点前缀和为0，并且到终点的总和也为0（和的概念是“边权和”）</strong>？</p><p>如果想通了，那么这个问题就很好解决了啊，是不是？</p><p>对于当前的根，我们把路径分为两种，一种是过此根的路径，另外一种是不经过根的路径。对于第一种情况，我们先dfs预处理出来到根的距离为$dis$的路径数量。$g[dis][0/1]$表示之前dfs过的子树中，到根的距离为$dis$的路径数目，其中是否出现过前缀和为0的点，$f$数组同理，表示当前正在dfs的子树。</p><p>然后统计一下就好了（具体可以看代码）。</p><h4 id="代码：-5"><a href="#代码：-5" class="headerlink" title="代码："></a>代码：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"> </div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"> </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> LF;</div><div class="line"> </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e5</span> + <span class="number">15</span>;</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span><span class="keyword">int</span> to, nxt, dis;&#125;gg[MAXN &lt;&lt; <span class="number">1</span>];</div><div class="line"><span class="keyword">int</span> size[MAXN], head[MAXN], ff[MAXN], t[MAXN &lt;&lt; <span class="number">1</span>], d[MAXN], dis[MAXN];</div><div class="line"><span class="keyword">int</span> n, con, cnt = <span class="number">0</span>, mxdep, rt;</div><div class="line">LL ans, f[MAXN &lt;&lt; <span class="number">1</span>][<span class="number">2</span>], g[MAXN &lt;&lt; <span class="number">1</span>][<span class="number">2</span>];</div><div class="line"><span class="keyword">bool</span> vis[MAXN];</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> dis)</span></span>&#123;gg[++ cnt] = (Edge)&#123;v, head[u], dis&#125;; head[u] = cnt;&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> dis)</span></span>&#123;add(u, v, dis); add(v, u, dis);&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> r = <span class="number">0</span>, z = <span class="number">1</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line">    <span class="keyword">while</span>(ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch == <span class="string">'-'</span>) z = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">while</span>(ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>)&#123;r = r * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">return</span> r * z;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">getrt</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> fafa)</span></span>&#123;</div><div class="line">    size[u] = <span class="number">1</span>; ff[u] = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; i; i = gg[i].nxt)&#123;</div><div class="line">        <span class="keyword">int</span> v = gg[i].to; <span class="keyword">if</span>(vis[v] || v == fafa) <span class="keyword">continue</span>;</div><div class="line">        getrt(v, u); size[u] += size[v];</div><div class="line">        ff[u] = max(ff[u], size[v]);</div><div class="line">    &#125;</div><div class="line">    ff[u] = max(ff[u], con - size[u]);</div><div class="line">    <span class="keyword">if</span>(ff[u] &lt; ff[rt]) rt = u;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> fafa)</span></span>&#123;</div><div class="line">    size[u] = <span class="number">1</span>; mxdep = max(mxdep, d[u]);</div><div class="line">    <span class="keyword">if</span>(t[dis[u]]) f[dis[u]][<span class="number">1</span>] ++;</div><div class="line">    <span class="keyword">else</span> f[dis[u]][<span class="number">0</span>] ++;</div><div class="line">    t[dis[u]] ++;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; i; i = gg[i].nxt)&#123;</div><div class="line">        <span class="keyword">int</span> v = gg[i].to; <span class="keyword">if</span>(vis[v] || v == fafa) <span class="keyword">continue</span>;</div><div class="line">        d[v] = d[u] + <span class="number">1</span>; dis[v] = dis[u] + gg[i].dis;</div><div class="line">        dfs(v, u); size[u] += size[v];</div><div class="line">    &#125;</div><div class="line">    t[dis[u]] --;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">cal</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> mx = <span class="number">0</span>; g[<span class="number">0</span> + n][<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; i; i = gg[i].nxt)&#123;</div><div class="line">        <span class="keyword">int</span> v = gg[i].to; <span class="keyword">if</span>(vis[v]) <span class="keyword">continue</span>;</div><div class="line">        d[v] = <span class="number">1</span>; dis[v] = gg[i].dis + n;</div><div class="line">        mxdep = <span class="number">1</span>; dfs(v, <span class="number">0</span>); mx = max(mx, mxdep);</div><div class="line">        ans += (g[<span class="number">0</span> + n][<span class="number">0</span>] - <span class="number">1</span>) * f[<span class="number">0</span> + n][<span class="number">0</span>];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = -mxdep; j &lt;= mxdep; j ++)</div><div class="line">            ans += g[-j + n][<span class="number">1</span>] * f[j + n][<span class="number">1</span>] + g[-j + n][<span class="number">0</span>] * f[j + n][<span class="number">1</span>] + g[-j + n][<span class="number">1</span>] * f[j + n][<span class="number">0</span>];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = -mxdep + n; j &lt;= mxdep + n; j ++)&#123;</div><div class="line">            g[j][<span class="number">0</span>] += f[j][<span class="number">0</span>]; g[j][<span class="number">1</span>] += f[j][<span class="number">1</span>];</div><div class="line">            f[j][<span class="number">0</span>] = f[j][<span class="number">1</span>] = <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = -mx + n; i &lt;= mx + n; i ++) g[i][<span class="number">0</span>] = g[i][<span class="number">1</span>] = <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</div><div class="line">    vis[u] = <span class="number">1</span>; cal(u);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; i; i = gg[i].nxt)&#123;</div><div class="line">        <span class="keyword">int</span> v = gg[i].to; <span class="keyword">if</span>(vis[v]) <span class="keyword">continue</span>;</div><div class="line">        rt = <span class="number">0</span>; con = size[v];</div><div class="line">        getrt(v, <span class="number">0</span>); solve(rt);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">    n = read(); ans = <span class="number">0</span>; rt = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i ++)&#123;</div><div class="line">        <span class="keyword">int</span> u = read(), v = read(), dis = read(); <span class="keyword">if</span>(!dis) dis = <span class="number">-1</span>;</div><div class="line">        add_edge(u, v, dis);</div><div class="line">    &#125;</div><div class="line">    ff[<span class="number">0</span>] = con = n;</div><div class="line">    getrt(<span class="number">1</span>, <span class="number">0</span>); solve(rt);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    work();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 知识点 </category>
          
          <category> 讲解与实践 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 点分治 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>平衡树学习</title>
      <link href="/2017/12/02/%E5%B9%B3%E8%A1%A1%E6%A0%91%E5%AD%A6%E4%B9%A0/"/>
      <content type="html"><![CDATA[<p>今天学了一下splay，发现splay还是很强大的。</p><p>先安利几篇本蒟蒻认为好的讲解：<a href="http://blog.csdn.net/skydec/article/details/20151805" target="_blank" rel="external">讲解1</a> <a href="http://blog.csdn.net/changtao381/article/details/8936765" target="_blank" rel="external">讲解2</a> <a href="http://blog.csdn.net/clove_unique/article/details/50630280" target="_blank" rel="external">讲解3</a></p><p>个人比较推荐好好看第三篇博客，主要我不用指针，所以这篇博客特别适合我，而且讲的也很细。</p><p>据一些dalao说，treap和SBT的功能都没有splay强，于是本蒟蒻就先学习了splay</p><p>splay其实很好学，主要你要研究透它其中的原理，如果只被代码的话，我想意义不大，毕竟做题你还不会。</p><p>我学习splay的时候也发现了一些问题，不够这些问题很多都早就有人提出来了，我也说一说比较主要的问题。例如：每次插入（或查询）完为什么要把当前节点旋转到最上面？</p><p>呵呵，毕竟不要太较真，网上有一些dalao给出的答案是期望时间短，确实挺有道理。</p><p>然后我们就来具体的看一下splay吧。</p><hr><h2 id="讲解与模板1"><a href="#讲解与模板1" class="headerlink" title="讲解与模板1"></a>讲解与模板1</h2><p>早上先是看了看这篇博客（讲的真的是太好了！）<a href="http://blog.csdn.net/clove_unique/article/details/50630280" target="_blank" rel="external">传送门</a></p><h3 id="模板："><a href="#模板：" class="headerlink" title="模板："></a>模板：</h3><p>同时我也给一个我的模板（原题洛谷3369，打的十分丑陋）：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> LF;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">Max</span><span class="params">(LL a, LL b)</span></span>&#123;<span class="keyword">return</span> a &gt; b ? a : b;&#125;</div><div class="line"><span class="function">LL <span class="title">Min</span><span class="params">(LL a, LL b)</span></span>&#123;<span class="keyword">return</span> a &lt; b ? a : b;&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">2e5</span> + <span class="number">15</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> sz = <span class="number">0</span>, rt;</div><div class="line"><span class="keyword">int</span> key[MAXN], size[MAXN], son[MAXN][<span class="number">2</span>], fa[MAXN], cnt[MAXN];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">int</span> r = <span class="number">0</span>, z = <span class="number">1</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line"><span class="keyword">while</span>(ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch == <span class="string">'-'</span>) z = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">while</span>(ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>)&#123;r = r * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">return</span> r * z;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">up</span><span class="params">(<span class="keyword">int</span> p)</span></span>&#123;size[p] = cnt[p] + size[son[p][<span class="number">0</span>]] + size[son[p][<span class="number">1</span>]];&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">return</span> son[fa[x]][<span class="number">1</span>] == x;&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line"><span class="keyword">int</span> p = fa[x], g = fa[p], opt = get(x);</div><div class="line">son[p][opt] = son[x][opt ^ <span class="number">1</span>]; fa[son[x][opt ^ <span class="number">1</span>]] = p;</div><div class="line">son[x][opt ^ <span class="number">1</span>] = p; fa[p] = x; fa[x] = g;</div><div class="line"><span class="keyword">if</span>(g) son[g][son[g][<span class="number">1</span>] == p] = x;</div><div class="line">up(p); up(x);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">splay</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> p = fa[x]; p; rotate(x), p = fa[x])</div><div class="line"><span class="keyword">if</span>(fa[p]) rotate((get(p) == get(x)) ? p : x);</div><div class="line">rt = x;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line"><span class="keyword">if</span>(!rt)&#123;</div><div class="line">++ sz; rt = sz; key[sz] = x; size[sz] = cnt[sz] = <span class="number">1</span>;</div><div class="line">son[sz][<span class="number">0</span>] = son[sz][<span class="number">1</span>] = fa[sz] = <span class="number">0</span>;</div><div class="line"><span class="keyword">return</span> ;</div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> now = rt, p = <span class="number">0</span>;</div><div class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</div><div class="line"><span class="keyword">if</span>(key[now] == x)&#123;</div><div class="line">cnt[now] ++;</div><div class="line">up(now); up(p);</div><div class="line">splay(now);</div><div class="line"><span class="keyword">return</span> ;</div><div class="line">&#125;</div><div class="line">p = now;</div><div class="line">now = son[now][x &gt; key[now]];</div><div class="line"><span class="keyword">if</span>(!now)&#123;</div><div class="line">sz ++; key[sz] = x; size[sz] = cnt[sz] = <span class="number">1</span>;</div><div class="line">son[sz][<span class="number">0</span>] = son[sz][<span class="number">1</span>] = <span class="number">0</span>;</div><div class="line">son[p][x &gt; key[p]] = sz; fa[sz] = p;</div><div class="line">up(p); splay(sz);</div><div class="line"><span class="keyword">return</span> ;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line"><span class="keyword">int</span> now = rt, ans = <span class="number">0</span>;</div><div class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</div><div class="line"><span class="keyword">if</span>(x == key[now])&#123;ans += size[son[now][<span class="number">0</span>]]; splay(now); <span class="keyword">return</span> ans + <span class="number">1</span>;&#125;</div><div class="line"><span class="keyword">if</span>(x &lt; key[now]) now = son[now][<span class="number">0</span>];</div><div class="line"><span class="keyword">else</span> &#123;</div><div class="line">ans += size[son[now][<span class="number">0</span>]] + cnt[now];</div><div class="line">now = son[now][<span class="number">1</span>];</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">find_rnk</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line"><span class="keyword">int</span> now = rt;</div><div class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</div><div class="line"><span class="keyword">if</span>(x == <span class="number">-1</span>) <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line"><span class="keyword">if</span>(x &gt;= size[son[now][<span class="number">0</span>]] + <span class="number">1</span> &amp;&amp; x &lt;= size[son[now][<span class="number">0</span>]] + cnt[now]) <span class="keyword">return</span> key[now];</div><div class="line"><span class="keyword">if</span>(x &lt;= size[son[now][<span class="number">0</span>]]) now = son[now][<span class="number">0</span>];</div><div class="line"><span class="keyword">else</span> &#123;</div><div class="line">x = x - size[son[now][<span class="number">0</span>]] - cnt[now];</div><div class="line">now = son[now][<span class="number">1</span>];</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">pre</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">int</span> x = son[rt][<span class="number">0</span>];</div><div class="line"><span class="keyword">while</span>(son[x][<span class="number">1</span>]) x = son[x][<span class="number">1</span>];</div><div class="line"><span class="keyword">return</span> x;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">sub</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">int</span> x = son[rt][<span class="number">1</span>];</div><div class="line"><span class="keyword">while</span>(son[x][<span class="number">0</span>]) x = son[x][<span class="number">0</span>];</div><div class="line"><span class="keyword">return</span> x;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line"><span class="keyword">int</span> cfzsb = find(x);</div><div class="line"><span class="keyword">if</span>(cnt[rt] &gt; <span class="number">1</span>)&#123;cnt[rt] --; up(rt); <span class="keyword">return</span> ;&#125;</div><div class="line"><span class="keyword">if</span>(!son[rt][<span class="number">0</span>] &amp;&amp; !son[rt][<span class="number">1</span>]) <span class="keyword">return</span> ;</div><div class="line"><span class="keyword">if</span>(!son[rt][<span class="number">0</span>] || !son[rt][<span class="number">1</span>])&#123;</div><div class="line">rt = son[rt][<span class="number">0</span>] + son[rt][<span class="number">1</span>];</div><div class="line">fa[rt] = <span class="number">0</span>;</div><div class="line"><span class="keyword">return</span> ;</div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> oldrt = rt, leftbig = pre();</div><div class="line">splay(leftbig);</div><div class="line">fa[son[oldrt][<span class="number">1</span>]] = rt; son[rt][<span class="number">1</span>] = son[oldrt][<span class="number">1</span>];</div><div class="line">up(rt);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">int</span> n = read();</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)&#123;</div><div class="line"><span class="keyword">int</span> opt = read(), x = read();</div><div class="line"><span class="keyword">if</span>(opt == <span class="number">1</span>) ins(x);</div><div class="line"><span class="keyword">else</span> <span class="keyword">if</span>(opt == <span class="number">2</span>) del(x);</div><div class="line"><span class="keyword">else</span> <span class="keyword">if</span>(opt == <span class="number">3</span>) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, find(x));</div><div class="line"><span class="keyword">else</span> <span class="keyword">if</span>(opt == <span class="number">4</span>) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, find_rnk(x));</div><div class="line"><span class="keyword">else</span> <span class="keyword">if</span>(opt == <span class="number">5</span>)&#123;</div><div class="line">ins(x); <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, key[pre()]);</div><div class="line">del(x);</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> <span class="keyword">if</span>(opt == <span class="number">6</span>)&#123;</div><div class="line">ins(x); <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, key[sub()]);</div><div class="line">del(x);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">init();</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="题目与练习"><a href="#题目与练习" class="headerlink" title="题目与练习"></a>题目与练习</h2><p>然后接下来我们可以看一些题：</p><h3 id="BZOJ1588（洛谷2234）"><a href="#BZOJ1588（洛谷2234）" class="headerlink" title="BZOJ1588（洛谷2234）"></a>BZOJ1588（洛谷2234）</h3><h4 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h4><p>一共n个数，对于当前输入的数x，我们找到之前已经输入进来的b个数中的一个数，使得其与x的差的绝对值最小，将这个最小的绝对值加进答案中。特殊的，第一个输入的数的数值直接加入答案中。</p><h4 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h4><p>这道题十分的模板，对于当前输入的点x，把它insert进去后，找到其前驱与后继，然后在insert的时候判断一下是否已经出现过此数，用几个bool变量就能解决。</p><h4 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> LF;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">Max</span><span class="params">(LL a, LL b)</span></span>&#123;<span class="keyword">return</span> a &gt; b ? a : b;&#125;</div><div class="line"><span class="function">LL <span class="title">Min</span><span class="params">(LL a, LL b)</span></span>&#123;<span class="keyword">return</span> a &lt; b ? a : b;&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">2e5</span> + <span class="number">15</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> sz = <span class="number">0</span>, rt;</div><div class="line"><span class="keyword">int</span> key[MAXN], size[MAXN], son[MAXN][<span class="number">2</span>], fa[MAXN], cnt[MAXN];</div><div class="line"><span class="keyword">bool</span> fl, fr, ff, hh;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">int</span> r = <span class="number">0</span>, z = <span class="number">1</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line"><span class="keyword">while</span>(ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch == <span class="string">'-'</span>) z = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">while</span>(ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>)&#123;r = r * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">return</span> r * z;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">up</span><span class="params">(<span class="keyword">int</span> p)</span></span>&#123;size[p] = cnt[p] + size[son[p][<span class="number">0</span>]] + size[son[p][<span class="number">1</span>]];&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">return</span> son[fa[x]][<span class="number">1</span>] == x;&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line"><span class="keyword">int</span> p = fa[x], g = fa[p], opt = get(x);</div><div class="line">son[p][opt] = son[x][opt ^ <span class="number">1</span>]; fa[son[x][opt ^ <span class="number">1</span>]] = p;</div><div class="line">son[x][opt ^ <span class="number">1</span>] = p; fa[p] = x; fa[x] = g;</div><div class="line"><span class="keyword">if</span>(g) son[g][son[g][<span class="number">1</span>] == p] = x;</div><div class="line">up(p); up(x);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">splay</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> p = fa[x]; p; rotate(x), p = fa[x])</div><div class="line"><span class="keyword">if</span>(fa[p]) rotate((get(p) == get(x)) ? p : x);</div><div class="line">rt = x;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line"><span class="keyword">if</span>(!rt)&#123;</div><div class="line">++ sz; rt = sz; key[sz] = x; size[sz] = cnt[sz] = <span class="number">1</span>;</div><div class="line">son[sz][<span class="number">0</span>] = son[sz][<span class="number">1</span>] = fa[sz] = <span class="number">0</span>;</div><div class="line"><span class="keyword">return</span> ;</div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> now = rt, p = <span class="number">0</span>;</div><div class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</div><div class="line"><span class="keyword">if</span>(key[now] == x)&#123;</div><div class="line">cnt[now] ++; hh = <span class="number">1</span>;</div><div class="line">up(now); up(p);</div><div class="line">splay(now);</div><div class="line"><span class="keyword">return</span> ;</div><div class="line">&#125;</div><div class="line">p = now;</div><div class="line">now = son[now][x &gt; key[now]];</div><div class="line"><span class="keyword">if</span>(!now)&#123;</div><div class="line">sz ++; key[sz] = x; size[sz] = cnt[sz] = <span class="number">1</span>;</div><div class="line">son[sz][<span class="number">0</span>] = son[sz][<span class="number">1</span>] = <span class="number">0</span>;</div><div class="line">son[p][x &gt; key[p]] = sz; fa[sz] = p;</div><div class="line">up(p); splay(sz);</div><div class="line"><span class="keyword">return</span> ;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line"><span class="keyword">int</span> now = rt, ans = <span class="number">0</span>;</div><div class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</div><div class="line"><span class="keyword">if</span>(x == key[now])&#123;ans += size[son[now][<span class="number">0</span>]]; splay(now); <span class="keyword">return</span> ans + <span class="number">1</span>;&#125;</div><div class="line"><span class="keyword">if</span>(x &lt; key[now]) now = son[now][<span class="number">0</span>];</div><div class="line"><span class="keyword">else</span> &#123;</div><div class="line">ans += size[son[now][<span class="number">0</span>]] + cnt[now];</div><div class="line">now = son[now][<span class="number">1</span>];</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">find_rnk</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line"><span class="keyword">int</span> now = rt;</div><div class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</div><div class="line"><span class="keyword">if</span>(x == <span class="number">-1</span>) <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line"><span class="keyword">if</span>(x &gt;= size[son[now][<span class="number">0</span>]] + <span class="number">1</span> &amp;&amp; x &lt;= size[son[now][<span class="number">0</span>]] + cnt[now]) <span class="keyword">return</span> key[now];</div><div class="line"><span class="keyword">if</span>(x &lt;= size[son[now][<span class="number">0</span>]]) now = son[now][<span class="number">0</span>];</div><div class="line"><span class="keyword">else</span> &#123;</div><div class="line">x = x - size[son[now][<span class="number">0</span>]] - cnt[now];</div><div class="line">now = son[now][<span class="number">1</span>];</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">pre</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">int</span> x = son[rt][<span class="number">0</span>];</div><div class="line"><span class="keyword">if</span>(!x) fl = <span class="number">0</span>;</div><div class="line"><span class="keyword">while</span>(son[x][<span class="number">1</span>]) x = son[x][<span class="number">1</span>];</div><div class="line"><span class="keyword">return</span> x;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">sub</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">int</span> x = son[rt][<span class="number">1</span>];</div><div class="line"><span class="keyword">if</span>(!x) fr = <span class="number">0</span>;</div><div class="line"><span class="keyword">while</span>(son[x][<span class="number">0</span>]) x = son[x][<span class="number">0</span>];</div><div class="line"><span class="keyword">return</span> x;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line"><span class="keyword">int</span> cfzsb = find(x);</div><div class="line"><span class="keyword">if</span>(cnt[rt] &gt; <span class="number">1</span>)&#123;cnt[rt] --; up(rt); <span class="keyword">return</span> ;&#125;</div><div class="line"><span class="keyword">if</span>(!son[rt][<span class="number">0</span>] &amp;&amp; !son[rt][<span class="number">1</span>]) <span class="keyword">return</span> ;</div><div class="line"><span class="keyword">if</span>(!son[rt][<span class="number">0</span>] || !son[rt][<span class="number">1</span>])&#123;</div><div class="line">rt = son[rt][<span class="number">0</span>] + son[rt][<span class="number">1</span>];</div><div class="line">fa[rt] = <span class="number">0</span>;</div><div class="line"><span class="keyword">return</span> ;</div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> oldrt = rt, leftbig = pre();</div><div class="line">splay(leftbig);</div><div class="line">fa[son[oldrt][<span class="number">1</span>]] = rt; son[rt][<span class="number">1</span>] = son[oldrt][<span class="number">1</span>];</div><div class="line">up(rt);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">int</span> n = read(), ans;</div><div class="line"><span class="keyword">int</span> x = read(); ins(x); ans += x;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i ++)&#123;</div><div class="line">fl = <span class="number">1</span>, fr = <span class="number">1</span>, hh = <span class="number">0</span>;</div><div class="line">x = read(); ins(x);</div><div class="line"><span class="keyword">int</span> a = key[pre()], b = key[sub()];</div><div class="line"><span class="comment">//printf("%d %d\n", a, b);</span></div><div class="line"><span class="comment">//printf("%d %d\n", fl, fr);</span></div><div class="line"><span class="keyword">if</span>(hh) <span class="keyword">continue</span>;</div><div class="line"><span class="keyword">int</span> tot = (<span class="number">1</span> &lt;&lt; <span class="number">31</span>) - <span class="number">1</span>;</div><div class="line"><span class="keyword">if</span>(fl) tot = min(tot, <span class="built_in">abs</span>(x - a));</div><div class="line"><span class="keyword">if</span>(fr) tot = min(tot, <span class="built_in">abs</span>(x - b));</div><div class="line"><span class="comment">//printf("%d\n", tot);</span></div><div class="line">ans += tot;</div><div class="line">&#125;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">init();</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="洛谷2286"><a href="#洛谷2286" class="headerlink" title="洛谷2286"></a>洛谷2286</h3><h4 id="题意：-1"><a href="#题意：-1" class="headerlink" title="题意："></a>题意：</h4><p>给出宠物和人出现的序列，宠物和人都会选择<br>①现在存在的<br>②和自己特征值之差的绝对值最小的<br>③特征值最小的<br>非同类【即宠物选择人，人选择宠物】，选择成功时将会累计一个特征值差的绝对值作为不满意度，当序列结束时输出不满意度的和对1000000取模的值<br>显而易见选择的方案是唯一的。</p><h4 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h4><p>这道题跟上一道差不多啊，只不过特判的东西不太一样，然后可能需要一个Delete操作，然后也就没什么了。</p><h4 id="代码：-1"><a href="#代码：-1" class="headerlink" title="代码："></a>代码：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> LF;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">Max</span><span class="params">(LL a, LL b)</span></span>&#123;<span class="keyword">return</span> a &gt; b ? a : b;&#125;</div><div class="line"><span class="function">LL <span class="title">Min</span><span class="params">(LL a, LL b)</span></span>&#123;<span class="keyword">return</span> a &lt; b ? a : b;&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> LL MAXN = <span class="number">2e5</span> + <span class="number">15</span>;</div><div class="line"><span class="keyword">const</span> LL MOD = <span class="number">1e6</span>;</div><div class="line"></div><div class="line">LL key[MAXN], son[MAXN][<span class="number">2</span>], fa[MAXN], size[MAXN], cnt[MAXN];</div><div class="line">LL sz = <span class="number">0</span>, rt;</div><div class="line"><span class="keyword">bool</span> fl, fr, ff;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">    LL r = <span class="number">0</span>, z = <span class="number">1</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line">    <span class="keyword">while</span>(ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch == <span class="string">'-'</span>) z = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">while</span>(ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>)&#123;r = r * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">return</span> r * z;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">up</span><span class="params">(LL p)</span></span>&#123;size[p] = cnt[p] + size[son[p][<span class="number">0</span>]] + size[son[p][<span class="number">1</span>]];&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">get</span><span class="params">(LL x)</span></span>&#123;<span class="keyword">return</span> son[fa[x]][<span class="number">1</span>] == x;&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">rotate</span><span class="params">(LL x)</span></span>&#123;</div><div class="line">    LL p = fa[x], g = fa[p], opt = get(x);</div><div class="line">    son[p][opt] = son[x][opt ^ <span class="number">1</span>]; fa[son[x][opt ^ <span class="number">1</span>]] = p;</div><div class="line">    son[x][opt ^ <span class="number">1</span>] = p; fa[p] = x; fa[x] = g;</div><div class="line">    <span class="keyword">if</span>(g) son[g][son[g][<span class="number">1</span>] == p] = x;</div><div class="line">    up(p); up(x);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">splay</span><span class="params">(LL x)</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(LL p = fa[x]; p; rotate(x), p = fa[x])</div><div class="line">        <span class="keyword">if</span>(fa[p]) rotate((get(p) == get(x)) ? p : x);</div><div class="line">    rt = x;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">ins</span><span class="params">(LL x)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(!rt)&#123;</div><div class="line">        ++ sz; rt = sz; key[sz] = x; size[sz] = cnt[sz] = <span class="number">1</span>;</div><div class="line">        son[sz][<span class="number">0</span>] = son[sz][<span class="number">1</span>] = fa[sz] = <span class="number">0</span>;</div><div class="line">        <span class="keyword">return</span> ;</div><div class="line">    &#125;</div><div class="line">    LL now = rt, p = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</div><div class="line">        <span class="keyword">if</span>(key[now] == x)&#123;</div><div class="line">            cnt[now] ++; ff = <span class="number">1</span>;</div><div class="line">            up(now); up(p);</div><div class="line">            splay(now);</div><div class="line">            <span class="keyword">return</span> ;</div><div class="line">        &#125;</div><div class="line">        p = now;</div><div class="line">        now = son[now][x &gt; key[now]];</div><div class="line">        <span class="keyword">if</span>(!now)&#123;</div><div class="line">            sz ++; key[sz] = x; size[sz] = cnt[sz] = <span class="number">1</span>;</div><div class="line">            son[sz][<span class="number">0</span>] = son[sz][<span class="number">1</span>] = <span class="number">0</span>;</div><div class="line">            son[p][x &gt; key[p]] = sz; fa[sz] = p;</div><div class="line">            up(p); splay(sz);</div><div class="line">            <span class="keyword">return</span> ;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">find</span><span class="params">(LL x)</span></span>&#123;</div><div class="line">    LL now = rt, ans = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</div><div class="line">        <span class="keyword">if</span>(x == key[now])&#123;ans += size[son[now][<span class="number">0</span>]]; splay(now); <span class="keyword">return</span> ans + <span class="number">1</span>;&#125;</div><div class="line">        <span class="keyword">if</span>(x &lt; key[now]) now = son[now][<span class="number">0</span>];</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            ans += size[son[now][<span class="number">0</span>]] + cnt[now];</div><div class="line">            now = son[now][<span class="number">1</span>];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">find_rnk</span><span class="params">(LL x)</span></span>&#123;</div><div class="line">    LL now = rt;</div><div class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</div><div class="line">        <span class="keyword">if</span>(x == <span class="number">-1</span>) <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">        <span class="keyword">if</span>(x &gt;= size[son[now][<span class="number">0</span>]] + <span class="number">1</span> &amp;&amp; x &lt;= size[son[now][<span class="number">0</span>]] + cnt[now]) <span class="keyword">return</span> key[now];</div><div class="line">        <span class="keyword">if</span>(x &lt;= size[son[now][<span class="number">0</span>]]) now = son[now][<span class="number">0</span>];</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            x = x - size[son[now][<span class="number">0</span>]] - cnt[now];</div><div class="line">            now = son[now][<span class="number">1</span>];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">pre</span><span class="params">()</span></span>&#123;</div><div class="line">    LL x = son[rt][<span class="number">0</span>];</div><div class="line">    <span class="keyword">if</span>(!x) fl = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span>(son[x][<span class="number">1</span>]) x = son[x][<span class="number">1</span>];</div><div class="line">    <span class="keyword">return</span> x;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">sub</span><span class="params">()</span></span>&#123;</div><div class="line">    LL x = son[rt][<span class="number">1</span>];</div><div class="line">    <span class="keyword">if</span>(!x) fr = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span>(son[x][<span class="number">0</span>]) x = son[x][<span class="number">0</span>];</div><div class="line">    <span class="keyword">return</span> x;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">del</span><span class="params">(LL x)</span></span>&#123;</div><div class="line">    LL cfzsb = find(x);</div><div class="line">    <span class="keyword">if</span>(cnt[rt] &gt; <span class="number">1</span>)&#123;cnt[rt] --; up(rt); <span class="keyword">return</span> ;&#125;</div><div class="line">    <span class="keyword">if</span>(!son[rt][<span class="number">0</span>] &amp;&amp; !son[rt][<span class="number">1</span>])&#123;key[rt] = fa[rt] = cnt[rt] = size[rt] = <span class="number">0</span>; rt = <span class="number">0</span>;&#125;</div><div class="line">    <span class="keyword">if</span>(!son[rt][<span class="number">0</span>] || !son[rt][<span class="number">1</span>])&#123;</div><div class="line">        rt = son[rt][<span class="number">0</span>] + son[rt][<span class="number">1</span>];</div><div class="line">        fa[rt] = <span class="number">0</span>;</div><div class="line">        <span class="keyword">return</span> ;</div><div class="line">    &#125;</div><div class="line">    LL oldrt = rt, leftbig = pre();</div><div class="line">    splay(leftbig);</div><div class="line">    fa[son[oldrt][<span class="number">1</span>]] = rt; son[rt][<span class="number">1</span>] = son[oldrt][<span class="number">1</span>];</div><div class="line">    up(rt);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    LL n = read(), tot = <span class="number">0</span>;</div><div class="line">    LL ans = <span class="number">0</span>; LL flag;</div><div class="line">    <span class="keyword">for</span>(LL i = <span class="number">1</span>; i &lt;= n; i ++)&#123;</div><div class="line">        LL opt = read(), x = read();</div><div class="line">        <span class="keyword">if</span>(i == <span class="number">1</span>)&#123;flag = opt; ins(x); tot ++;&#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(flag == opt || !tot)&#123;ins(x); tot ++; flag = opt;&#125;</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">    tot --;</div><div class="line">            fl = <span class="number">1</span>, fr = <span class="number">1</span>, ff = <span class="number">0</span>;</div><div class="line">            LL mark, tot = <span class="number">21474836478</span>;</div><div class="line">            ins(x);</div><div class="line">            <span class="keyword">if</span>(ff)&#123;del(x); del(x); <span class="keyword">continue</span>;&#125;</div><div class="line">            LL a = key[pre()], b = key[sub()];</div><div class="line">            <span class="keyword">if</span>(fl &amp;&amp; tot &gt; <span class="built_in">abs</span>(x - a))&#123;tot = <span class="built_in">abs</span>(x - a); mark = a;&#125;</div><div class="line">            <span class="keyword">if</span>(fr &amp;&amp; tot &gt; <span class="built_in">abs</span>(x - b))&#123;tot = <span class="built_in">abs</span>(x - b); mark = b;&#125;</div><div class="line">            del(x); del(mark); ans = (ans + <span class="number">1l</span>l * tot) % MOD;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    init();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="BZOJ1503"><a href="#BZOJ1503" class="headerlink" title="BZOJ1503"></a>BZOJ1503</h3><h4 id="题意：-2"><a href="#题意：-2" class="headerlink" title="题意："></a>题意：</h4><p>OIER公司是一家大型专业化软件公司，有着数以万计的员工。作为一名出纳员，我的任务之一便是统计每位员工的工资。这本来是一份不错的工作，但是令人郁闷的是，我们的老板反复无常，经常调整员工的工资。如果他心情好，就可能把每位员工的工资加上一个相同的量。反之，如果心情不好，就可能把他们的工资扣除一个相同的量。我真不知道除了调工资他还做什么其它事情。工资的频繁调整很让员工反感，尤其是集体扣除工资的时候，一旦某位员工发现自己的工资已经低于了合同规定的工资下界，他就会立刻气愤地离开公司，并且再也不会回来了。每位员工的工资下界都是统一规定的。每当一个人离开公司，我就要从电脑中把他的工资档案删去，同样，每当公司招聘了一位新员工，我就得为他新建一个工资档案。老板经常到我这边来询问工资情况，他并不问具体某位员工的工资情况，而是问现在工资第k多的员工拿多少工资。每当这时，我就不得不对数万个员工进行一次漫长的排序，然后告诉他答案。好了，现在你已经对我的工作了解不少了。正如你猜的那样，我想请你编一个工资统计程序。怎么样，不是很困难吧？</p><p>I命令 I_k 新建一个工资档案，初始工资为k。如果某员工的初始工资低于工资下界，他将立刻离开公司。</p><p>A命令 A_k 把每位员工的工资加上k</p><p>S命令 S_k 把每位员工的工资扣除k</p><p>F命令 F_k 查询第k多的工资</p><h4 id="题解：-1"><a href="#题解：-1" class="headerlink" title="题解："></a>题解：</h4><p>我们可以单独开一个tot记扣的钱（或涨的钱）的总数。对于新建档案，我们就用一般的ins就可以了。</p><p>难点就在于踢掉&lt;min的人。那么我们找到最小的要被踢掉的人，给他旋转至根，然后删掉其左子树即可。</p><h4 id="代码：-2"><a href="#代码：-2" class="headerlink" title="代码："></a>代码：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> LF;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(x, y) memset(x, y, sizeof(x));</span></div><div class="line"></div><div class="line"><span class="function">LL <span class="title">Max</span><span class="params">(LL a, LL b)</span></span>&#123;<span class="keyword">return</span> a &gt; b ? a : b;&#125;</div><div class="line"><span class="function">LL <span class="title">Min</span><span class="params">(LL a, LL b)</span></span>&#123;<span class="keyword">return</span> a &lt; b ? a : b;&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">2e5</span> + <span class="number">15</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> key[MAXN], size[MAXN], cnt[MAXN], fa[MAXN], son[MAXN][<span class="number">2</span>]; </div><div class="line"><span class="keyword">int</span> sz, rt, pos = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> r = <span class="number">0</span>, z = <span class="number">1</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line">    <span class="keyword">while</span>(ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch == <span class="string">'-'</span>) z = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">while</span>(ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>)&#123;r = r * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">return</span> r * z;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">return</span> son[fa[x]][<span class="number">1</span>] == x;&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">up</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;size[x] = size[son[x][<span class="number">0</span>]] + size[son[x][<span class="number">1</span>]] + cnt[x];&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>&#123;</div><div class="line">    rt = sz = <span class="number">0</span>;</div><div class="line">    clr(key, <span class="number">0</span>); clr(size, <span class="number">0</span>); clr(son, <span class="number">0</span>); clr(fa, <span class="number">0</span>); clr(cnt, <span class="number">0</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> p = fa[x], g = fa[p], opt = get(x);</div><div class="line">    son[p][opt] = son[x][opt ^ <span class="number">1</span>]; fa[son[x][opt ^ <span class="number">1</span>]] = p;</div><div class="line">    son[x][opt ^ <span class="number">1</span>] = p; fa[p] = x;</div><div class="line">    fa[x] = g;</div><div class="line">    <span class="keyword">if</span>(g) son[g][son[g][<span class="number">1</span>] == p] = x;</div><div class="line">    up(p); up(x);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">splay</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> p = fa[x]; p; rotate(x), p = fa[x])</div><div class="line">        <span class="keyword">if</span>(fa[p]) rotate((get(x) == get(p)) ? p : x);</div><div class="line">    rt = x;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(!rt)&#123;</div><div class="line">        ++ sz; rt = sz; key[sz] = x;</div><div class="line">        son[sz][<span class="number">0</span>] = son[sz][<span class="number">1</span>] = fa[sz] = <span class="number">0</span>;</div><div class="line">        cnt[sz] = size[sz] = <span class="number">1</span>;</div><div class="line">        <span class="keyword">return</span> ;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> now = rt, p = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</div><div class="line">        <span class="keyword">if</span>(key[now] == x)&#123;</div><div class="line">            cnt[now] ++; up(now); up(p); splay(now);</div><div class="line">            <span class="keyword">return</span> ;</div><div class="line">        &#125;</div><div class="line">        p = now;</div><div class="line">        now = son[now][x &gt; key[now]];</div><div class="line">        <span class="keyword">if</span>(!now)&#123;</div><div class="line">            ++ sz; key[sz] = x;</div><div class="line">            son[sz][<span class="number">0</span>] = son[sz][<span class="number">1</span>] = <span class="number">0</span>; fa[sz] = p;</div><div class="line">            son[p][x &gt; key[p]] = sz;</div><div class="line">            size[sz] = cnt[sz] = <span class="number">1</span>;</div><div class="line">            up(sz); up(p); splay(sz);</div><div class="line">            <span class="keyword">return</span> ;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> now = rt, ans = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</div><div class="line">        <span class="keyword">if</span>(key[now] == x)&#123;ans += size[son[now][<span class="number">0</span>]]; splay(now); <span class="keyword">return</span> ans + <span class="number">1</span>;&#125;</div><div class="line">        <span class="keyword">if</span>(key[now] &gt; x) now = son[now][<span class="number">0</span>];</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            ans += size[son[now][<span class="number">0</span>]] + cnt[now];</div><div class="line">            now = son[now][<span class="number">1</span>];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">find_rnk</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> now = rt;</div><div class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</div><div class="line">        <span class="keyword">if</span>(!now) <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">        <span class="keyword">if</span>(x &gt;= size[son[now][<span class="number">1</span>]] + <span class="number">1</span> &amp;&amp; x &lt;= size[son[now][<span class="number">1</span>]] + cnt[now])&#123;splay(now); <span class="keyword">return</span> key[now] + pos;&#125;</div><div class="line">        <span class="keyword">if</span>(x &lt;= size[son[now][<span class="number">1</span>]]) now = son[now][<span class="number">1</span>];</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            x = x - size[son[now][<span class="number">1</span>]] - cnt[now];</div><div class="line">            now = son[now][<span class="number">0</span>];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">pre</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> now = son[rt][<span class="number">0</span>];</div><div class="line">    <span class="keyword">while</span>(son[rt][<span class="number">1</span>]) now = son[rt][<span class="number">1</span>];</div><div class="line">    <span class="keyword">return</span> now;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">sub</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> now = son[rt][<span class="number">1</span>];</div><div class="line">    <span class="keyword">while</span>(son[rt][<span class="number">0</span>]) now = son[rt][<span class="number">0</span>];</div><div class="line">    <span class="keyword">return</span> now;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> whatever = find(x);</div><div class="line">    <span class="keyword">if</span>(cnt[rt] &gt; <span class="number">1</span>)&#123;cnt[rt] --; up(rt); <span class="keyword">return</span> ;&#125;</div><div class="line">    <span class="keyword">if</span>(!son[rt][<span class="number">0</span>] &amp;&amp; !son[rt][<span class="number">1</span>])&#123;clear(); <span class="keyword">return</span> ;&#125;</div><div class="line">    <span class="keyword">if</span>(!son[rt][<span class="number">0</span>] || !son[rt][<span class="number">1</span>])&#123;</div><div class="line">        rt = son[rt][<span class="number">0</span>] + son[rt][<span class="number">1</span>];</div><div class="line">        fa[rt] = <span class="number">0</span>;</div><div class="line">        <span class="keyword">return</span> ;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> leftbig = pre(), ort = rt;</div><div class="line">    splay(leftbig);</div><div class="line">    son[rt][<span class="number">1</span>] = son[ort][<span class="number">1</span>];</div><div class="line">    fa[son[ort][<span class="number">1</span>]] = rt;</div><div class="line">    up(rt);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> n = read(), minn = read(), ans = <span class="number">0</span>;</div><div class="line">    clear();</div><div class="line">    <span class="keyword">while</span>(n --)&#123;</div><div class="line">        <span class="keyword">char</span> ch[<span class="number">5</span>]; <span class="built_in">scanf</span>(<span class="string">"%s"</span>, ch); <span class="keyword">int</span> x = read();</div><div class="line">        <span class="keyword">if</span>(ch[<span class="number">0</span>] == <span class="string">'I'</span> &amp;&amp; x &gt;= minn) ins(x - pos);</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(ch[<span class="number">0</span>] == <span class="string">'A'</span>)&#123;pos += x;&#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(ch[<span class="number">0</span>] == <span class="string">'S'</span>)&#123;</div><div class="line">            pos -= x;</div><div class="line">            ins(minn - pos);</div><div class="line">            ans += size[son[rt][<span class="number">0</span>]]; son[rt][<span class="number">0</span>] = <span class="number">0</span>;</div><div class="line">            up(rt);</div><div class="line">            del(minn - pos);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(ch[<span class="number">0</span>] == <span class="string">'F'</span>) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, find_rnk(x));</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    init();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="讲解与模板2"><a href="#讲解与模板2" class="headerlink" title="讲解与模板2"></a>讲解与模板2</h2><p>splay有很多应用。</p><p>接下来我们就先来谈谈splay的<strong>区间应用</strong>。</p><p>好，我们以洛谷的3391【模板】文艺平衡树举例 <a href="https://www.luogu.org/problemnew/show/3391" target="_blank" rel="external">传送门</a></p><p>这道题就是反转一个子序列，好，那么我们该怎么办呢？</p><p>首先，我们建一个a数组，a[i] = i（最开始序列的状态）。</p><p>然后我们根据a数组建树（满足左儿子小于父亲，右儿子大于父亲）。</p><p>我们很容易发现，这棵树的中序遍历便是原序列，并且我们在splay旋转的过程中，这一性质不变。相信很多人看过关于这方面的blog，说是这次操作只需将l-1移到根，r+1移到根的右儿子，那么l~r就在root的rson的lson里，画个图大家就知道了。</p><p><img src="/2017/12/02/平衡树学习/splay区间.png" alt="旋转过程"></p><p>既然都在一棵子树中了，我们就交换左右儿子即可。</p><h3 id="模板：-1"><a href="#模板：-1" class="headerlink" title="模板："></a>模板：</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i, a, b) for(int i = a; i &lt;= b; i ++)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REPG(i, x) for(int i = head[x]; i; i = g[i].nxt)</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(x, y) memset(x, y, sizeof(x));</span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> LF;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">Max</span><span class="params">(LL a, LL b)</span></span>&#123;<span class="keyword">return</span> a &gt; b ? a : b;&#125;</div><div class="line"><span class="function">LL <span class="title">Min</span><span class="params">(LL a, LL b)</span></span>&#123;<span class="keyword">return</span> a &lt; b ? a : b;&#125;</div><div class="line"><span class="function">LL <span class="title">abs</span><span class="params">(LL x)</span></span>&#123;<span class="keyword">return</span> x &gt; <span class="number">0</span> ? x : -x;&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">2e5</span> + <span class="number">15</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> a[MAXN], rt, sz, head, tail, n, m;</div><div class="line"><span class="keyword">int</span> fa[MAXN], key[MAXN], son[MAXN][<span class="number">2</span>], size[MAXN], opt[MAXN];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">int</span> r = <span class="number">0</span>, z = <span class="number">1</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line"><span class="keyword">while</span>(ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch == <span class="string">'-'</span>) z = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">while</span>(ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>)&#123;r = r * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">return</span> r * z;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>&#123;</div><div class="line">rt = <span class="number">0</span>, sz = <span class="number">0</span>;</div><div class="line">head = n + <span class="number">1</span>; tail = n + <span class="number">2</span>;</div><div class="line">clr(fa, <span class="number">0</span>); clr(son, <span class="number">0</span>); clr(key, <span class="number">0</span>); clr(size, <span class="number">0</span>); clr(opt, <span class="number">0</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">return</span> son[fa[x]][<span class="number">1</span>] == x;&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">up</span><span class="params">(<span class="keyword">int</span> o)</span></span>&#123;size[o] = size[son[o][<span class="number">0</span>]] + size[son[o][<span class="number">1</span>]] + <span class="number">1</span>;&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">down</span><span class="params">(<span class="keyword">int</span> o)</span></span>&#123;</div><div class="line"><span class="keyword">if</span>(!opt[o]) <span class="keyword">return</span> ;</div><div class="line">swap(son[o][<span class="number">0</span>], son[o][<span class="number">1</span>]);</div><div class="line"><span class="keyword">if</span>(son[o][<span class="number">0</span>]) opt[son[o][<span class="number">0</span>]] ^= <span class="number">1</span>;</div><div class="line"><span class="keyword">if</span>(son[o][<span class="number">1</span>]) opt[son[o][<span class="number">1</span>]] ^= <span class="number">1</span>;</div><div class="line">opt[o] = <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> &amp;o, <span class="keyword">int</span> p, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</div><div class="line"><span class="keyword">if</span>(l == r)&#123;o = ++ sz; key[o] = a[l]; size[o] = <span class="number">1</span>; fa[o] = p; <span class="keyword">return</span> ;&#125;</div><div class="line"><span class="keyword">if</span>(l + <span class="number">1</span> == r)&#123;</div><div class="line">o = ++ sz; <span class="keyword">int</span> rson = ++ sz;</div><div class="line">key[o] = a[l]; key[rson] = a[r];</div><div class="line">fa[o] = p; fa[rson] = o; son[o][<span class="number">1</span>] = rson;</div><div class="line">size[o] = <span class="number">2</span>; size[rson] = <span class="number">1</span>;</div><div class="line"><span class="keyword">return</span> ;</div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</div><div class="line">o = ++ sz; key[o] = a[mid]; size[o] = <span class="number">1</span>; fa[o] = p;</div><div class="line">build(son[o][<span class="number">0</span>], o, l, mid - <span class="number">1</span>);</div><div class="line">build(son[o][<span class="number">1</span>], o, mid + <span class="number">1</span>, r);</div><div class="line">up(o);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line"><span class="keyword">int</span> now = rt; x ++;</div><div class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</div><div class="line">down(now);</div><div class="line"><span class="keyword">if</span>(size[son[now][<span class="number">0</span>]] + <span class="number">1</span> == x) <span class="keyword">return</span> now;</div><div class="line"><span class="keyword">if</span>(size[son[now][<span class="number">0</span>]] + <span class="number">1</span> &gt; x) now = son[now][<span class="number">0</span>];</div><div class="line"><span class="keyword">else</span> &#123;</div><div class="line">x = x - size[son[now][<span class="number">0</span>]] - <span class="number">1</span>;</div><div class="line">now = son[now][<span class="number">1</span>];</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line"><span class="keyword">int</span> p = fa[x], g = fa[p], typ = get(x);</div><div class="line">son[p][typ] = son[x][typ ^ <span class="number">1</span>]; fa[son[x][typ ^ <span class="number">1</span>]] = p;</div><div class="line">son[x][typ ^ <span class="number">1</span>] = p; fa[p] = x;</div><div class="line">fa[x] = g;</div><div class="line"><span class="keyword">if</span>(g) son[g][son[g][<span class="number">1</span>] == p] = x;</div><div class="line">up(p); up(x);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">splay</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> dtn)</span></span>&#123;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> p = fa[x]; p != dtn &amp;&amp; p; rotate(x), p = fa[x])</div><div class="line"><span class="keyword">if</span>(fa[p] != dtn &amp;&amp; fa[p]) rotate((get(x) == get(p)) ? p : x);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">rever</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</div><div class="line">l = find(l - <span class="number">1</span>), r = find(r + <span class="number">1</span>);</div><div class="line">splay(l, <span class="number">0</span>); rt = l; splay(r, rt);</div><div class="line">opt[son[son[rt][<span class="number">1</span>]][<span class="number">0</span>]] ^= <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">output</span><span class="params">(<span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">down(o);</div><div class="line"><span class="keyword">if</span>(son[o][<span class="number">0</span>]) output(son[o][<span class="number">0</span>]);</div><div class="line"><span class="keyword">if</span>(key[o] != head &amp;&amp; key[o] != tail) <span class="built_in">printf</span>(<span class="string">"%d "</span>, key[o]);</div><div class="line"><span class="keyword">if</span>(son[o][<span class="number">1</span>]) output(son[o][<span class="number">1</span>]);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">n = read(), m = read();</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) a[i] = i;</div><div class="line">a[<span class="number">0</span>] = n + <span class="number">1</span>, a[n + <span class="number">1</span>] = n + <span class="number">2</span>;</div><div class="line">clear(); build(rt, <span class="number">0</span>, <span class="number">0</span>, n + <span class="number">1</span>);</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i ++)&#123;</div><div class="line"><span class="keyword">int</span> l = read(), r = read();</div><div class="line">rever(l, r);</div><div class="line">&#125;</div><div class="line">output(rt); <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">init();</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="题目与练习-1"><a href="#题目与练习-1" class="headerlink" title="题目与练习"></a>题目与练习</h2><h3 id="BZOJ1861"><a href="#BZOJ1861" class="headerlink" title="BZOJ1861"></a>BZOJ1861</h3><h4 id="题意：-3"><a href="#题意：-3" class="headerlink" title="题意："></a>题意：</h4><p>小T有一个很大的书柜。这个书柜的构造有些独特，即书柜里的书是从上至下堆放成一列。她用1到n的正整数给每本书都编了号。</p><p>小T在看书的时候，每次取出一本书，看完后放回书柜然后再拿下一本。由于这些书太有吸引力了，所以她看完后常常会忘记原来是放在书柜的什么位置。不过小T的记忆力是非常好的，所以每次放书的时候至少能够将那本书放在拿出来时的位置附近，比如说她拿的时候这本书上面有X本书，那么放回去时这本书上面就只可能有X-1、X或X+1本书。</p><p>当然也有特殊情况，比如在看书的时候突然电话响了或者有朋友来访。这时候粗心的小T会随手把书放在书柜里所有书的最上面或者最下面，然后转身离开。</p><p>久而久之，小T的书柜里的书的顺序就会越来越乱，找到特定的编号的书就变得越来越困难。于是她想请你帮她编写一个图书管理程序，处理她看书时的一些操作，以及回答她的两个提问：(1)编号为X的书在书柜的什么位置；(2)从上到下第i本书的编号是多少。</p><p>第一行有两个数n，m，分别表示书的个数以及命令的条数；第二行为n个正整数：第i个数表示初始时从上至下第i个位置放置的书的编号；第三行到m+2行，每行一条命令。命令有5种形式：</p><p>1． Top S——表示把编号为S的书房在最上面。</p><p>2． Bottom S——表示把编号为S的书房在最下面。</p><p>3． Insert S T——T∈{-1，0，1}，若编号为S的书上面有X本书，则这条命令表示把这本书放回去后它的上面有X+T本书；</p><p>4． Ask S——询问编号为S的书的上面目前有多少本书。</p><p>5． Query S——询问从上面数起的第S本书的编号。</p><h4 id="题解：-2"><a href="#题解：-2" class="headerlink" title="题解："></a>题解：</h4><p>对于本题有5个操作，我将一一说明对于每种操作的具体做法。</p><p>1.Top            将元素旋到根，然后将左子树合并到该元素的后继</p><p>2.Bottom        将元素旋到根，然后将右子树合并到该元素的前驱</p><p>3.Insert            直接与该元素的前驱/后继交换位置及信息</p><p>4.Ask            将元素旋到根，输出size-1</p><p>5.Query            在树上find_rnk即可</p><h4 id="代码：-3"><a href="#代码：-3" class="headerlink" title="代码："></a>代码：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> LF;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">Max</span><span class="params">(LL a, LL b)</span></span>&#123;<span class="keyword">return</span> a &gt; b ? a : b;&#125;</div><div class="line"><span class="function">LL <span class="title">Min</span><span class="params">(LL a, LL b)</span></span>&#123;<span class="keyword">return</span> a &lt; b ? a : b;&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">2e5</span> + <span class="number">15</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> key[MAXN], son[MAXN][<span class="number">2</span>], fa[MAXN], opt[MAXN], size[MAXN], loc[MAXN];</div><div class="line"><span class="keyword">int</span> n, m, a[MAXN], sz, rt;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">up</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;size[x] = size[son[x][<span class="number">0</span>]] + size[son[x][<span class="number">1</span>]] + <span class="number">1</span>;&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">return</span> son[fa[x]][<span class="number">1</span>] == x;&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>&#123;</div><div class="line">    rt = sz = <span class="number">0</span>;</div><div class="line">    <span class="built_in">memset</span>(fa, <span class="number">0</span>, <span class="keyword">sizeof</span>(fa)); <span class="built_in">memset</span>(son, <span class="number">0</span>, <span class="keyword">sizeof</span>(son));</div><div class="line">    <span class="built_in">memset</span>(key, <span class="number">0</span>, <span class="keyword">sizeof</span>(key)); <span class="built_in">memset</span>(size, <span class="number">0</span>, <span class="keyword">sizeof</span>(size));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> p = fa[x], g = fa[p], opt = get(x);</div><div class="line">    son[p][opt] = son[x][opt ^ <span class="number">1</span>]; fa[son[x][opt ^ <span class="number">1</span>]] = p;</div><div class="line">    son[x][opt ^ <span class="number">1</span>] = p; fa[p] = x;</div><div class="line">    fa[x] = g;</div><div class="line">    <span class="keyword">if</span>(g) son[g][son[g][<span class="number">1</span>] == p] = x;</div><div class="line">    up(p); up(x);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">splay</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> dtn)</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> p = fa[x]; p != dtn &amp;&amp; p; rotate(x), p = fa[x])</div><div class="line">        <span class="keyword">if</span>(fa[p] != dtn &amp;&amp; fa[p]) rotate((get(x) == get(p)) ? p : x);</div><div class="line">    <span class="keyword">if</span>(!dtn) rt = x;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> &amp;o, <span class="keyword">int</span> p, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(l == r)&#123;</div><div class="line">        o = ++ sz; key[o] = a[l];</div><div class="line">        size[o] = <span class="number">1</span>; loc[a[l]] = o;</div><div class="line">        son[o][<span class="number">0</span>] = son[o][<span class="number">1</span>] = <span class="number">0</span>; fa[o] = p;</div><div class="line">        <span class="keyword">return</span> ;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(l + <span class="number">1</span> == r)&#123;</div><div class="line">        o = ++ sz; <span class="keyword">int</span> rson = ++ sz;</div><div class="line">        son[o][<span class="number">1</span>] = rson;</div><div class="line">        size[o] = <span class="number">2</span>; size[son[o][<span class="number">1</span>]] = <span class="number">1</span>;</div><div class="line">        fa[o] = p; fa[son[o][<span class="number">1</span>]] = o;</div><div class="line">        key[o] = a[l]; key[son[o][<span class="number">1</span>]] = a[l + <span class="number">1</span>];</div><div class="line">        loc[a[l]] = o; loc[a[l + <span class="number">1</span>]] = son[o][<span class="number">1</span>];</div><div class="line">        <span class="keyword">return</span> ;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</div><div class="line">    o = ++ sz;</div><div class="line">    size[o] = <span class="number">1</span>; fa[o] = p; key[o] = a[mid]; loc[a[mid]] = o;</div><div class="line">    build(son[o][<span class="number">0</span>], o, l, mid - <span class="number">1</span>);</div><div class="line">    build(son[o][<span class="number">1</span>], o, mid + <span class="number">1</span>, r);</div><div class="line">    up(o);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">pre</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> now = son[rt][<span class="number">0</span>]; <span class="keyword">if</span>(!now) <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    <span class="keyword">while</span>(son[now][<span class="number">1</span>]) now = son[now][<span class="number">1</span>];</div><div class="line">    <span class="keyword">return</span> now;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">sub</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> now = son[rt][<span class="number">1</span>]; <span class="keyword">if</span>(!now) <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    <span class="keyword">while</span>(son[now][<span class="number">0</span>]) now = son[now][<span class="number">0</span>];</div><div class="line">    <span class="keyword">return</span> now;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">top</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    splay(loc[x], <span class="number">0</span>);</div><div class="line">    <span class="keyword">int</span> rightmin = sub();</div><div class="line">    <span class="keyword">if</span>(!son[rt][<span class="number">0</span>]) <span class="keyword">return</span> ;</div><div class="line">    <span class="keyword">if</span>(rightmin == <span class="number">-1</span>)&#123;swap(son[rt][<span class="number">0</span>], son[rt][<span class="number">1</span>]); <span class="keyword">return</span> ;&#125;</div><div class="line">    splay(rightmin, rt);</div><div class="line">    son[son[rt][<span class="number">1</span>]][<span class="number">0</span>] = son[rt][<span class="number">0</span>];</div><div class="line">    fa[son[son[rt][<span class="number">1</span>]][<span class="number">0</span>]] = son[rt][<span class="number">1</span>];</div><div class="line">    son[rt][<span class="number">0</span>] = <span class="number">0</span>;</div><div class="line">    up(son[rt][<span class="number">1</span>]);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">bottom</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    splay(loc[x], <span class="number">0</span>);</div><div class="line">    <span class="keyword">int</span> leftmax = pre();</div><div class="line">    <span class="keyword">if</span>(!son[rt][<span class="number">1</span>]) <span class="keyword">return</span> ;</div><div class="line">    <span class="keyword">if</span>(leftmax == <span class="number">-1</span>)&#123;swap(son[rt][<span class="number">0</span>], son[rt][<span class="number">1</span>]); <span class="keyword">return</span> ;&#125;</div><div class="line">    splay(leftmax, rt);</div><div class="line">    son[son[rt][<span class="number">0</span>]][<span class="number">1</span>] = son[rt][<span class="number">1</span>];</div><div class="line">    fa[son[son[rt][<span class="number">0</span>]][<span class="number">1</span>]] = son[rt][<span class="number">0</span>];</div><div class="line">    son[rt][<span class="number">1</span>] = <span class="number">0</span>;</div><div class="line">    up(son[rt][<span class="number">0</span>]);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">rever_front</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    splay(loc[x], <span class="number">0</span>);</div><div class="line">    <span class="keyword">int</span> leftmax = pre();</div><div class="line">    <span class="keyword">if</span>(leftmax == <span class="number">-1</span>) <span class="keyword">return</span> ;</div><div class="line">    splay(leftmax, rt);</div><div class="line">    swap(key[son[rt][<span class="number">0</span>]], key[rt]);</div><div class="line">    swap(loc[key[son[rt][<span class="number">0</span>]]], loc[key[rt]]);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">rever_back</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    splay(loc[x], <span class="number">0</span>);</div><div class="line">    <span class="keyword">int</span> rightmin = sub();</div><div class="line">    <span class="keyword">if</span>(rightmin == <span class="number">-1</span>) <span class="keyword">return</span> ;</div><div class="line">    splay(rightmin, rt);</div><div class="line">    swap(key[son[rt][<span class="number">1</span>]], key[rt]);</div><div class="line">    swap(loc[key[son[rt][<span class="number">1</span>]]], loc[key[rt]]);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;splay(loc[x], <span class="number">0</span>); <span class="keyword">return</span> size[son[rt][<span class="number">0</span>]];&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">find_rnk</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> now = rt;</div><div class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</div><div class="line">        <span class="keyword">if</span>(size[son[now][<span class="number">0</span>]] + <span class="number">1</span> == x) <span class="keyword">return</span> key[now];</div><div class="line">        <span class="keyword">if</span>(size[son[now][<span class="number">0</span>]] + <span class="number">1</span> &gt; x) now = son[now][<span class="number">0</span>];</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            x = x - size[son[now][<span class="number">0</span>]] - <span class="number">1</span>;</div><div class="line">            now = son[now][<span class="number">1</span>];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">output</span><span class="params">(<span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(son[o][<span class="number">0</span>]) output(son[o][<span class="number">0</span>]);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d "</span>, key[o]);</div><div class="line">    <span class="keyword">if</span>(son[o][<span class="number">1</span>]) output(son[o][<span class="number">1</span>]);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> r = <span class="number">0</span>, z = <span class="number">1</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line">    <span class="keyword">while</span>(ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch == <span class="string">'-'</span>) z = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">while</span>(ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>)&#123;r = r * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">return</span> r * z;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    n = read(), m = read();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) a[i] = read();</div><div class="line">    clear(); build(rt, <span class="number">0</span>, <span class="number">1</span>, n);</div><div class="line">    <span class="keyword">while</span>(m --)&#123;</div><div class="line">        <span class="keyword">char</span> ch[<span class="number">11</span>]; <span class="built_in">scanf</span>(<span class="string">"%s"</span>, ch + <span class="number">1</span>); <span class="keyword">int</span> x = read();</div><div class="line">        <span class="keyword">if</span>(ch[<span class="number">1</span>] == <span class="string">'T'</span>) top(x);</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(ch[<span class="number">1</span>] == <span class="string">'B'</span>) bottom(x);</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(ch[<span class="number">1</span>] == <span class="string">'I'</span>)&#123;<span class="keyword">int</span> y = read(); <span class="keyword">if</span>(y == <span class="number">1</span>) rever_back(x); <span class="keyword">else</span> <span class="keyword">if</span>(y == <span class="number">-1</span>) rever_front(x);&#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(ch[<span class="number">1</span>] == <span class="string">'A'</span>) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, find(x));</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(ch[<span class="number">1</span>] == <span class="string">'Q'</span>)&#123;<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, find_rnk(x));&#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 知识点 </category>
          
          <category> 讲解与实践 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 平衡树 </tag>
            
            <tag> splay </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>线性基题目练习</title>
      <link href="/2017/11/28/%E7%BA%BF%E6%80%A7%E5%9F%BA%E9%A2%98%E7%9B%AE%E7%BB%83%E4%B9%A0/"/>
      <content type="html"><![CDATA[<p>原来没听说过什么是线性基（估计是本juruo太菜了），但是学懂以后感觉用处真的挺多的，这段时间里做题都想着用线性基。。。<del>估计是黔驴技穷了吧</del>，我还是刷题太少了，这次刷题我感觉线性基的一些基本用法、套路我都过了一遍，还是很开心很激动的，不过当时何神讲的题还是有好多都没有做，接下来还是抓紧时间多做一些线性基的难题吧！</p><hr><p>知道线性基是什么之后，本蒟蒻就刷了刷题。</p><h3 id="洛谷3812"><a href="#洛谷3812" class="headerlink" title="洛谷3812"></a>洛谷3812</h3><p>模板的不能再模板</p><p><strong>代码：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> LF;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">Max</span><span class="params">(LL a, LL b)</span></span>&#123;<span class="keyword">return</span> a &gt; b ? a : b;&#125;</div><div class="line"><span class="function">LL <span class="title">Min</span><span class="params">(LL a, LL b)</span></span>&#123;<span class="keyword">return</span> a &lt; b ? a : b;&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">65</span>;</div><div class="line">LL b[MAXN];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">int</span> r = <span class="number">0</span>, z = <span class="number">1</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line"><span class="keyword">while</span>(ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch == <span class="string">'-'</span>) z = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">while</span>(ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>)&#123;r = r * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">return</span> r * z;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">int</span> n = read();</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)&#123;</div><div class="line">LL x; <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;x);</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">55</span>; j &gt;= <span class="number">0</span>; j --)</div><div class="line"><span class="keyword">if</span>((<span class="number">1L</span>L &lt;&lt; j) &amp; x)&#123;</div><div class="line"><span class="keyword">if</span>(!b[j])&#123;b[j] = x; <span class="keyword">break</span>;&#125;</div><div class="line"><span class="keyword">else</span> x ^= b[j];</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">LL ans = <span class="number">0</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">55</span>; i &gt;= <span class="number">0</span>; i --)</div><div class="line"><span class="keyword">if</span>((ans ^ b[i]) &gt; ans) ans ^= b[i];</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">init();</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="BZOJ-2460"><a href="#BZOJ-2460" class="headerlink" title="BZOJ 2460"></a>BZOJ 2460</h3><p><strong>题意：</strong></p><p>$n$个数，每个数有两个属性：a和b，从中选出一些数，使得在这些数的a异或起来不为0的情况下，b之和最大。</p><p><strong>题解：</strong></p><p>这题十分的水嘛。</p><p>贪心+线性基</p><p>我们每加入一个数时，ans再加上其法力值就完了。</p><p><strong>代码：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> LF;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">Max</span><span class="params">(LL a, LL b)</span></span>&#123;<span class="keyword">return</span> a &gt; b ? a : b;&#125;</div><div class="line"><span class="function">LL <span class="title">Min</span><span class="params">(LL a, LL b)</span></span>&#123;<span class="keyword">return</span> a &lt; b ? a : b;&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e3</span> + <span class="number">15</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXM = <span class="number">65</span>;</div><div class="line">LL ans = <span class="number">0</span>, a[MAXM];</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span>LL b, w;&#125;t[MAXM];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">int</span> r = <span class="number">0</span>, z = <span class="number">1</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line"><span class="keyword">while</span>(ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch == <span class="string">'-'</span>) z = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">while</span>(ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>)&#123;r = r * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">return</span> r * z;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">doit</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)&#123;</div><div class="line">LL x = t[i].b;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">65</span>; ~j; j --)</div><div class="line"><span class="keyword">if</span>((<span class="number">1L</span>L &lt;&lt; j) &amp; x)&#123;</div><div class="line"><span class="keyword">if</span>(!a[j])&#123;a[j] = x; <span class="keyword">break</span>;&#125;</div><div class="line"><span class="keyword">else</span> x ^= a[j];</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>(x) ans += t[i].w;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(Node x, Node y)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">if</span>(x.w != y.w) <span class="keyword">return</span> x.w &gt; y.w;</div><div class="line"><span class="keyword">return</span> x.b &lt; y.b;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">int</span> n = read();</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) <span class="built_in">scanf</span>(<span class="string">"%lld %lld"</span>, &amp;t[i].b, &amp;t[i].w);</div><div class="line">sort(t + <span class="number">1</span>, t + n + <span class="number">1</span>, cmp);</div><div class="line">doit(n);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">init();</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="BZOJ2115"><a href="#BZOJ2115" class="headerlink" title="BZOJ2115"></a>BZOJ2115</h3><p><strong>题意：</strong></p><p>给你一张无相连通图，带边权，然后让你求从点1到点n所经过的边的边权异或和最大是多少。</p><p>（注意：一条边可以重复走多次）</p><p><strong>题解：</strong></p><p>显然，我们考虑这样一件事，对于我们当前所在的点u，准备到v，如果我们在u到v的这条路上走多次，最终到达v，那么异或出来的结果和u直接走到v的值一样（a^b^b=a），所以说，我们直接考虑从1到n不走重复路线的情况下的异或和。</p><p>既然是一个无相连通图，它就有可能有很多简单环，对于能够使ans变大的环的异或和，我们显然是要把它加进1到n的这条路径中去。</p><p>所以说，做法已经明了了。1.dfs预处理出图上所有简单环，并且处理出每个环的异或和，还要找到一条1到n的路径，算出其异或和now。2.我们把这些简单环的异或和放在一个数组中，问题就转换成了模板题“异或和最大”的问题，然后再^now，这显然就是答案了。</p><p>那么，我们可能会想，为什么刚开始我们随机找一条1到n的不走重复边的路径一定就能保证最优性的？很显然，我们通过dfs寻找简单环的时候一定有（我们刚开始随机找到的1到n的路径pass1+另外一条与其不相交的1到n的路径pass2）这种环如果我们把now^这个环的异或和，那么就相当于我们最开始找的就是pass2。</p><p>还有一个疑问，肯定就是如果某一个被我们异或进答案的环的异或和，这个环上面的点与我们找到的1到n的路径没有共同点怎么办？其实不用担心那么多，我们从最开始找的这条路走，走到某一个点后开始像那个环前进，绕了一圈后，我们再原路返回，这样“多出来的”这段路就抵消了。</p><p><strong>代码：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> LF;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">Max</span><span class="params">(LL a, LL b)</span></span>&#123;<span class="keyword">return</span> a &gt; b ? a : b;&#125;</div><div class="line"><span class="function">LL <span class="title">Min</span><span class="params">(LL a, LL b)</span></span>&#123;<span class="keyword">return</span> a &lt; b ? a : b;&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">5e4</span> + <span class="number">15</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXM = <span class="number">1e5</span> + <span class="number">15</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span><span class="keyword">int</span> to, nxt; LL dis;&#125;g[MAXM &lt;&lt; <span class="number">2</span>];</div><div class="line"><span class="keyword">int</span> head[MAXN], cnt = <span class="number">0</span>, tot = <span class="number">0</span>;</div><div class="line">LL crcl[MAXM &lt;&lt; <span class="number">2</span>], dist[MAXN], b[<span class="number">70</span>];</div><div class="line"><span class="keyword">bool</span> vis[MAXN];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, LL dis)</span></span>&#123;g[++ cnt] = (Edge)&#123;v, head[u], dis&#125;; head[u] = cnt;&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, LL dis)</span></span>&#123;add(u, v, dis); add(v, u, dis);&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</div><div class="line">vis[u] = <span class="number">1</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; i; i = g[i].nxt)&#123;</div><div class="line"><span class="keyword">int</span> v = g[i].to;</div><div class="line"><span class="keyword">if</span>(!vis[v])&#123;dist[v] = dist[u] ^ g[i].dis; dfs(v);&#125;</div><div class="line"><span class="keyword">else</span> crcl[++ tot] = dist[u] ^ dist[v] ^ g[i].dis;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">int</span> r = <span class="number">0</span>, z = <span class="number">1</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line"><span class="keyword">while</span>(ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch == <span class="string">'-'</span>) z = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">while</span>(ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>)&#123;r = r * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">return</span> r * z;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">L_basis</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= tot; i ++)&#123;</div><div class="line">LL x = crcl[i];</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">62</span>; ~j; j --)</div><div class="line"><span class="keyword">if</span>((<span class="number">1L</span>L &lt;&lt; j) &amp; x)&#123;</div><div class="line"><span class="keyword">if</span>(!b[j])&#123;b[j] = x; <span class="keyword">break</span>;&#125;</div><div class="line">x ^= b[j]; </div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">int</span> n = read(), m = read();</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i ++)&#123;</div><div class="line"><span class="keyword">int</span> u = read(), v = read(); LL dis; <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;dis);</div><div class="line">add_edge(u, v, dis);</div><div class="line">&#125;</div><div class="line">dfs(<span class="number">1</span>);</div><div class="line">LL ans = dist[n];</div><div class="line">L_basis();</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">62</span>; ~i; i --) ans = Max(ans, ans ^ b[i]);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">init();</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="HDOJ3949"><a href="#HDOJ3949" class="headerlink" title="HDOJ3949"></a>HDOJ3949</h3><p><strong>题意：</strong></p><p>给定 $n(n≤10000)$ 个数 $a_1, a_2, …,a_n$，以及 $Q(Q≤10000)$ 个询问，每次询问这些数（至少一个，不能不选）能够组成的异或和中第 $k$ 小的数是什么（去掉重复的异或和）。</p><p><strong>题解：</strong></p><p>这道题我们分两种考虑：1.线性基中的基向量的数量cnt=n的时候，异或值不可能出0（因为B是V的线性无关的极大集合，所以说V此时也是线性无关的），我们求出线性基后，把k在二进制下进行拆分，对于第0位至第max_base位，如果k的这位为1，那么我们就异或上对应的基向量值。2.线性基中的基向量的数量cnt&lt;n的时候，异或值可能出现0（B为线性无关，|B|&lt;n，所以V为线性相关），所以我们先把k-1然后再按照上述做法解决问题。</p><p><strong>代码：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i, a, b) for(int i = a; i &lt;= b; i ++)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REPG(i, x) for(int i = head[x]; i; i = g[i].nxt)</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> mem(x, y) memset(x, y, sizeof(x));</span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> LF;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">Max</span><span class="params">(LL a, LL b)</span></span>&#123;<span class="keyword">return</span> a &gt; b ? a : b;&#125;</div><div class="line"><span class="function">LL <span class="title">Min</span><span class="params">(LL a, LL b)</span></span>&#123;<span class="keyword">return</span> a &lt; b ? a : b;&#125;</div><div class="line"><span class="function">LL <span class="title">abs</span><span class="params">(LL x)</span></span>&#123;<span class="keyword">return</span> x &gt; <span class="number">0</span> ? x : -x;&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_BASE = <span class="number">63</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e5</span> + <span class="number">15</span>;</div><div class="line"></div><div class="line">LL a[MAXN], b[MAX_BASE];</div><div class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>; <span class="keyword">bool</span> flag = <span class="number">0</span>;</div><div class="line"><span class="built_in">vector</span>&lt;LL&gt; v;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">int</span> r = <span class="number">0</span>, z = <span class="number">1</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line"><span class="keyword">while</span>(ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch == <span class="string">'-'</span>) z = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">while</span>(ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>)&#123;r = r * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">return</span> r * z;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">L_Basis</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)&#123;</div><div class="line">LL x = a[i];</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">60</span>; ~j; j --)</div><div class="line"><span class="keyword">if</span>((<span class="number">1L</span>L &lt;&lt; j) &amp; x)&#123;</div><div class="line"><span class="keyword">if</span>(!b[j])&#123;</div><div class="line">b[j] = x; cnt ++;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k = j - <span class="number">1</span>; k &gt;= <span class="number">0</span>; k --) <span class="keyword">if</span>(b[k] &amp;&amp; ((b[j] &gt;&gt; k) &amp; <span class="number">1</span>)) b[j] ^= b[k];</div><div class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> k = j + <span class="number">1</span>; k &lt;= <span class="number">60</span>; k ++) <span class="keyword">if</span>((b[k] &gt;&gt; j) &amp; <span class="number">1</span>) b[k] ^= b[j];</div><div class="line"><span class="keyword">break</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> x ^= b[j];</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>(cnt != n) flag = <span class="number">1</span>;</div><div class="line">v.clear();</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">60</span>; i ++)</div><div class="line"><span class="keyword">if</span>(b[i]) v.push_back(b[i]);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">query</span><span class="params">(LL k)</span></span>&#123;</div><div class="line">LL num = (<span class="number">1L</span>L &lt;&lt; cnt) - <span class="number">1</span>, ans = <span class="number">0</span>;</div><div class="line"><span class="keyword">if</span>(flag) k --;</div><div class="line"><span class="keyword">if</span>(k &gt; num) <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cnt; i ++) <span class="keyword">if</span>((k &gt;&gt; i) &amp; <span class="number">1</span>)</div><div class="line">ans ^= v[i];</div><div class="line"><span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">int</span> T = read();</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> ca = <span class="number">1</span>; ca &lt;= T; ca ++)&#123;</div><div class="line"><span class="built_in">memset</span>(b, <span class="number">0</span>, <span class="keyword">sizeof</span>(b)); cnt = <span class="number">0</span>; flag = <span class="number">0</span>;</div><div class="line"><span class="keyword">int</span> n = read();</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;a[i]);</div><div class="line">L_Basis(n);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"Case #%d:\n"</span>, ca);</div><div class="line"><span class="keyword">int</span> m = read();</div><div class="line"><span class="keyword">while</span>(m --)&#123;</div><div class="line">LL k; <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;k);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, query(k));</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">init();</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结:"></a>总结:</h3><p>线性基的套路题：</p><p>1.第k个异或和</p><p>2.求所有异或值的和</p><p>同时，我们还可发现</p><ul><li>任意一条 $1$ 到 $n$ 的路径的异或和，都可以由任意一条 $1$ 到 $n$ 路径的异或和与图中的一些环的异或和来组合得到。</li></ul>]]></content>
      
      <categories>
          
          <category> 总结 </category>
          
          <category> 刷题总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线性基 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>线性基学习</title>
      <link href="/2017/11/28/%E7%BA%BF%E6%80%A7%E5%9F%BA%E5%AD%A6%E4%B9%A0/"/>
      <content type="html"><![CDATA[<p>本篇文章很多内容选自</p><p><a href="https://blog.sengxian.com/algorithms/linear-basis" target="_blank" rel="external">线性基1</a></p><p><a href="https://www.cnblogs.com/ljh2000-jump/p/5869991.html" target="_blank" rel="external">线性基2</a></p><p>先说明一点，$a_i$表示一个标量，而加粗的<strong>$a_i$</strong>表示一个向量，以便于区分。</p><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p><strong>基（basis）</strong>是线性代数中的一个概念，它是描述、刻画向量空间的基本工具。而在现行的OI题目中，通常利用基在异或空间中的一些特殊性质来解决题目，而这一类题目所涉及的知识点被称作$ \lceil$线性基$\rfloor$。</p><h2 id="预备知识"><a href="#预备知识" class="headerlink" title="预备知识"></a>预备知识</h2><h3 id="向量空间（vector-space）"><a href="#向量空间（vector-space）" class="headerlink" title="向量空间（vector space）"></a>向量空间（vector space）</h3><p>定义$(F,V,+,•)$为<strong>向量空间（vector space）</strong>，其中$F$为域，$V$为集合，$V$中元素称为向量，$+$为向量加法，$•$为标量乘法，且运算满足8条公理。</p><h3 id="线性无关（linearly-independent）"><a href="#线性无关（linearly-independent）" class="headerlink" title="线性无关（linearly independent）"></a>线性无关（linearly independent）</h3><p>对于向量空间中 $V$ 上 $n$ 个元素的向量组 $(v_1, v_2,…,v_n)$，若存在不全为 $0$ 的数 $a_i\in F$，满足</p><p>$a_1 v_1+a_2 v_2 + … + a_n v_n = 0$</p><p>则称这 $n$ 个向量<strong>线性相关（linearly dependent）</strong>，否则称为<strong>线性无关（linearly independent）</strong>。</p><h3 id="线性组合（linear-combination）"><a href="#线性组合（linear-combination）" class="headerlink" title="线性组合（linear combination）"></a>线性组合（linear combination）</h3><p>对于向量空间中 $V$ 上 $n$ 个元素的向量组$(v_1, v_2,..,v_n)$，其<strong>线性组合（linear combination）</strong>是如下形式的向量</p><p>$a_1 v_1+a_2 v_2 + … + a_n v_n$</p><p>其中 $a_1, …,a_n∈F$。</p><p>一组向量线性无关⇔ 没有向量可用有限个其他向量的线性组合所表示</p><h3 id="张成（span）"><a href="#张成（span）" class="headerlink" title="张成（span）"></a>张成（span）</h3><p>对于向量空间中 $V$ 上 $n$ 个元素的向量组$(v_1, v_2,..,v_n)$ ，其所有线性组合所构成的集合称为 $(v_1, v_2,..,v_n)$的<strong>张成（span）</strong>，记为$span(v_1, v_2,..,v_n)$。</p><h3 id="基（basis）"><a href="#基（basis）" class="headerlink" title="基（basis）"></a>基（basis）</h3><p>若向量空间 $V$ 中向量组$B$既是线性无关的又可以张成 $V$，则称其为 $V$ 的<strong>基（basis）</strong>。</p><p>$B$中的元素称为基向量。如果基中元素个数有限，就称向量空间为有限维向量空间，将元素的个数称作向量空间的维数。</p><h4 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h4><p>设 $B$ 是向量空间 $V$ 的基。则 $B$ 具有以下性质：</p><ol><li><p>$V$ 是 $B$  的极小生成集，就是说只有 $B$ 能张成 $V$，而它的任何真子集都不张成全部的向量空间。</p></li><li><p>$B$ 是 $V$ 中线性无关向量的极大集合，就是说 $B$ 在 $V$ 中是线性无关集合，而且 $V$ 中没有其他线性无关集合包含它作为真子集。</p></li><li><p>$V$ 中所有的向量都可以按唯一的方式表达为 $B$ 中向量的线性组合。</p><p>第三点尤其重要，感性的理解，基就是向量空间中的一个子集，它可以通过唯一的线性组合，来张成向量空间中所有的向量，这样就可以大大的缩小我们向量空间的大小。</p></li></ol><h3 id="线性相关性引理（Linear-Dependent-Lemma）"><a href="#线性相关性引理（Linear-Dependent-Lemma）" class="headerlink" title="线性相关性引理（Linear Dependent Lemma）"></a>线性相关性引理（Linear Dependent Lemma）</h3><p>如果 $(v_1, v_2,..,v_n)$ 在 $V$ 中是线性相关的，并且 $v_1\not= 0$，则有至少一个 $j\in {2,…,m} $ 使得下列成立：</p><ol><li>$v<em>j\in span(v_1, v_2,..,v</em>{j-1})$</li><li>如果从 $(v_1, v_2,..,v_n)$ 去掉第 $j$ 项，则剩余向量组的张成仍然等于 $span(v_1, v_2,..,v_n)$ 。</li></ol><p><strong>证明：</strong>设 $(v_1, v_2,..,v_n)$ 在 $V$ 中是线性相关的，并且 $v_1\not=0$，则有不全为 $0$ 的 $a_1,a_2,…,a_n\in F$，使得$a_1 v_1+…+a_m v_m=0$</p><p>$a_2,a_3,…,a_n​$ 不会全为 $0​$（因为 $v_1\not=0​$）。设 $j​$ 是 $2,…,m​$ 中使得 $a_j\not=0​$ 的最大者，那么</p><script type="math/tex; mode=display">v_j=-\frac{a_1}{a_j}v_1-...-\frac{a_{j-1}}{a_j}v_{j-1}</script><p>这就有 $(1)$ 成立。</p><p>为了证明 $(2)$，设 $u\in span(v_1,…,v_n)$则存在 $c_1,…,c_n\in F$，使得</p><p>$u=c_1 v_1+…+c_n v_n$</p><p>在上面的等式中，可以用之前的等式右边来代替$v_j$。这样 $u$ 包含于从$(v_1, v_2,..,v_n)$ 去掉第 $j$ 项的张成，因而 $(2)$ 成立。</p>]]></content>
      
      <categories>
          
          <category> 知识点 </category>
          
          <category> 讲解与实践 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线性基 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2017.10.27刷题总结</title>
      <link href="/2017/10/27/2017-10-27%E5%88%B7%E9%A2%98%E6%80%BB%E7%BB%93/"/>
      <content type="html"><![CDATA[<p>好像已经一周没有写刷题总结了，那么今天就稍微总结一下这段时间刷的一些题。</p><p>最近主要是在洛谷刷题，刷一些提高-省选难度的题。</p><p><strong>洛谷3388：</strong></p><p><a href="https://www.luogu.org/problem/show?pid=3388" target="_blank" rel="external">【模板】割点（割顶）</a></p><p><strong>分析：</strong></p><p>这道题就是一个模板，所以我就大概说一下tarjan怎么求个点吧。</p><p>当一个点是割点时，我们考虑这样两种情况：</p><ol><li><p>这个点没有father（即为根节点），且它的son的数量&gt;1，那么显然删掉这个点后这个图就不连通了。</p></li><li><p>对于一个比u后tarjan到的点v，且u有father，保证low[v] &gt;= dfn[u]，那么u点就是割点（因为如果low[v]&lt;dfn[u]，那么说明v能翻到u的上面，那么这样就会形成一个环，所以此时删不删u到无法影响这个图的连通性）</p><p><strong>注意：</strong>向上翻的时候不能把dfn[v]写成low[v]，这样容易翻过，那么肯定就WA了。</p><p><strong>代码：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i, n) for(int i = 1; i &lt;= n; i ++)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REPG(i, x) for(int i = head[x]; i; i = g[i].nxt)</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> mem(x, y) memset(x, y, sizeof(x));</span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> DB;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">Max</span><span class="params">(LL a, LL b)</span></span>&#123;<span class="keyword">return</span> a &gt; b ? a : b;&#125;</div><div class="line"><span class="function">LL <span class="title">Min</span><span class="params">(LL a, LL b)</span></span>&#123;<span class="keyword">return</span> a &lt; b ? a : b;&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e5</span> + <span class="number">15</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"><span class="keyword">int</span> head[MAXN], cnt = <span class="number">0</span>, fa[MAXN];</div><div class="line"><span class="keyword">int</span> dfn[MAXN], low[MAXN], tot = <span class="number">0</span>;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span><span class="keyword">int</span> to, nxt;&#125;g[MAXN &lt;&lt; <span class="number">1</span>];</div><div class="line"><span class="keyword">int</span> ans[MAXN], tmp = <span class="number">0</span>;</div><div class="line"><span class="keyword">bool</span> isg[MAXN], vis[MAXN];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span>&#123;g[++ cnt] = (Edge)&#123;v, head[u]&#125;; head[u] = cnt;&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span>&#123;add(u, v); add(v, u);&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> r = <span class="number">0</span>, z = <span class="number">1</span>;</div><div class="line">    <span class="keyword">char</span> ch = getchar();</div><div class="line">    <span class="keyword">while</span>(ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch == <span class="string">'-'</span>) z = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">while</span>(ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>)&#123;r = r * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">return</span> r * z;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> rootson = <span class="number">0</span>;</div><div class="line">    dfn[u] = low[u] = ++ tot;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; i; i = g[i].nxt)&#123;</div><div class="line">        <span class="keyword">int</span> v = g[i].to;</div><div class="line">        <span class="keyword">if</span>(!dfn[v])&#123;</div><div class="line">            fa[v] = u; rootson ++; tarjan(v);</div><div class="line">            low[u] = min(low[u], low[v]);</div><div class="line">            <span class="keyword">if</span>(low[v] &gt;= dfn[u] &amp;&amp; fa[u]) vis[u] = <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(v != fa[u]) low[u] = min(low[u], dfn[v]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(rootson &gt; <span class="number">1</span> &amp;&amp; !fa[u]) vis[u] = <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)&#123;</div><div class="line">        <span class="keyword">if</span>(!dfn[i]) tarjan(i);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) <span class="keyword">if</span>(vis[i]) ans ++;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) <span class="keyword">if</span>(vis[i]) <span class="built_in">printf</span>(<span class="string">"%d "</span>, i);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    n = read(), m = read();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i ++)&#123;</div><div class="line">        <span class="keyword">int</span> u = read(), v = read();</div><div class="line">        add_edge(u, v);</div><div class="line">    &#125;</div><div class="line">    solve();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    init();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>​</p><p>​</p></li></ol><p><strong>洛谷3807:</strong></p><p><a href="https://www.luogu.org/problem/show?pid=3807" target="_blank" rel="external">【模板】卢卡斯定理</a></p><p><strong>分析：</strong></p><p>又是一道模板题，此处证明略，若想看证明，可以到我的csdn blog去看。</p><p>这道题就是用lucas定理：$Lucas^m<em>n\ \ mod\ \ p = C^{m\ \ mod\ \ p}</em>{n\ \ mod\ \ p} \times Lucas^{m/p}_{n/p}$</p><p>所以这题也没什么可说的了。</p><p><strong>代码：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i, n) for(int i = 1; i &lt;= n; i ++)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REPG(i, x) for(int i = head[x]; i; i = g[i].nxt)</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> mem(x, y) memset(x, y, sizeof(x));</span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> DB;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">Max</span><span class="params">(LL a, LL b)</span></span>&#123;<span class="keyword">return</span> a &gt; b ? a : b;&#125;</div><div class="line"><span class="function">LL <span class="title">Min</span><span class="params">(LL a, LL b)</span></span>&#123;<span class="keyword">return</span> a &lt; b ? a : b;&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">2e5</span> + <span class="number">15</span>;</div><div class="line"></div><div class="line">LL frac[MAXN];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">    LL r = <span class="number">0</span>, z = <span class="number">1</span>;</div><div class="line">    <span class="keyword">char</span> ch = getchar();</div><div class="line">    <span class="keyword">while</span>(ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch == <span class="string">'-'</span>) z = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">while</span>(ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>)&#123;r = r * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">return</span> r * z;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">fre</span><span class="params">()</span></span>&#123;</div><div class="line">    freopen(<span class="string">".in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line">    freopen(<span class="string">".out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">qpow</span><span class="params">(LL a, LL b, LL p)</span></span>&#123;</div><div class="line">    LL base = a, ret = <span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span>(b)&#123;</div><div class="line">        <span class="keyword">if</span>(b &amp; <span class="number">1</span>) ret = ret * base % p;</div><div class="line">        base = base * base % p;</div><div class="line">        b &gt;&gt;= <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">C</span><span class="params">(LL n, LL m, LL p)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(m &gt; n) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    <span class="keyword">return</span> ((frac[n] * (qpow(frac[n - m], p - <span class="number">2</span>, p)) % p) % p * (qpow(frac[m], p - <span class="number">2</span>, p)) % p) % p;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">Lucas</span><span class="params">(LL n, LL m, LL p)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(m == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    <span class="keyword">return</span> ((C(n % p, m % p, p) % p) * (Lucas(n / p, m / p, p)) % p) % p;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> T = read();</div><div class="line">    <span class="keyword">while</span>(T --)&#123;</div><div class="line">        LL n = read(), m = read(), p = read();</div><div class="line">        frac[<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span>(LL i = <span class="number">1</span>; i &lt;= p; i ++)&#123;frac[i] = (frac[i - <span class="number">1</span>] * i) % p;&#125;</div><div class="line">        <span class="comment">//for(LL i = 2; i &lt;= n + m; i ++) printf("%lld ", frac[i]);</span></div><div class="line">        <span class="comment">//printf("\n");</span></div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, Lucas(n + m, m, p));</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="comment">//fre();</span></div><div class="line">    init();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>洛谷3811：</strong></p><p><a href="https://www.luogu.org/problem/show?pid=3811" target="_blank" rel="external">【模板】乘法逆元</a></p><p><strong>分析：</strong></p><p>公式，不解释。</p><p><strong>代码：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i, n) for(int i = 1; i &lt;= n; i ++)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REPG(i, x) for(int i = head[x]; i; i = g[i].nxt)</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> mem(x, y) memset(x, y, sizeof(x));</span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> DB;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">Max</span><span class="params">(LL a, LL b)</span></span>&#123;<span class="keyword">return</span> a &gt; b ? a : b;&#125;</div><div class="line"><span class="function">LL <span class="title">Min</span><span class="params">(LL a, LL b)</span></span>&#123;<span class="keyword">return</span> a &lt; b ? a : b;&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">3e6</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> inv[MAXN];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> r = <span class="number">0</span>, z = <span class="number">1</span>;</div><div class="line">    <span class="keyword">char</span> ch = getchar();</div><div class="line">    <span class="keyword">while</span>(ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch == <span class="string">'-'</span>) z = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">while</span>(ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>)&#123;r = r * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">return</span> r * z;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//83分做法：费马小定理 </span></div><div class="line"><span class="function">LL <span class="title">qpow</span><span class="params">(LL a, LL b, LL p)</span></span>&#123;</div><div class="line">    LL base = a, ret = <span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span>(b)&#123;</div><div class="line">        <span class="keyword">if</span>(b &amp; <span class="number">1</span>) ret = ret * base % p;</div><div class="line">        base = base * base % p;</div><div class="line">        b &gt;&gt;= <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ret % p;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//100分做法：线性求逆元 </span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> p)</span></span>&#123;</div><div class="line">    inv[<span class="number">1</span>] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i ++) inv[i] = (<span class="number">1l</span>l * (p - p / i) * inv[p % i]) % (<span class="number">1l</span>l * p);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> n = read(), p = read();</div><div class="line">    solve(n, p);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, inv[i] % p);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="comment">//fre();</span></div><div class="line">    init();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>洛谷2002：</strong></p><p><a href="https://www.luogu.org/problem/show?pid=2002" target="_blank" rel="external">消息扩散</a></p><p><strong>分析：</strong></p><p>tarjan缩点，然后找缩点后的入度为零的点的个数即为答案。</p><p><strong>代码：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i, n) for(int i = 1; i &lt;= n; i ++)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REPG(i, x) for(int i = head[x]; i; i = g[i].nxt)</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> mem(x, y) memset(x, y, sizeof(x));</span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> DB;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">Max</span><span class="params">(LL a, LL b)</span></span>&#123;<span class="keyword">return</span> a &gt; b ? a : b;&#125;</div><div class="line"><span class="function">LL <span class="title">Min</span><span class="params">(LL a, LL b)</span></span>&#123;<span class="keyword">return</span> a &lt; b ? a : b;&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e6</span> + <span class="number">15</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span><span class="keyword">int</span> to, nxt;&#125;g[MAXN], e[MAXN];</div><div class="line"><span class="keyword">int</span> head[MAXN], cnt = <span class="number">0</span>, tot = <span class="number">0</span>, ans = <span class="number">0</span>, n, m;</div><div class="line"><span class="keyword">int</span> head_sd[MAXN], cnt_sd = <span class="number">0</span>, in_sd[MAXN], belong[MAXN];</div><div class="line"><span class="keyword">int</span> sta[MAXN], dfn[MAXN], low[MAXN], tmp = <span class="number">0</span>;</div><div class="line"><span class="keyword">bool</span> instack[MAXN];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span>&#123;g[++ cnt] = (Edge)&#123;v, head[u]&#125;; head[u] = cnt;&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_sd</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span>&#123;e[++ cnt_sd] = (Edge)&#123;v, head_sd[u]&#125;; head_sd[u] = cnt_sd;&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> r = <span class="number">0</span>, z = <span class="number">1</span>;</div><div class="line">    <span class="keyword">char</span> ch = getchar();</div><div class="line">    <span class="keyword">while</span>(ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch == <span class="string">'-'</span>) z = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">while</span>(ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>)&#123;r = r * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">return</span> r * z;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</div><div class="line">    sta[++ tmp] = u, instack[u] = <span class="number">1</span>, dfn[u] = low[u] = ++ tot;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; i; i = g[i].nxt)&#123;</div><div class="line">        <span class="keyword">int</span> v = g[i].to;</div><div class="line">        <span class="keyword">if</span>(!dfn[v])&#123;</div><div class="line">            tarjan(v);</div><div class="line">            low[u] = min(low[u], low[v]);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(instack[v]) low[u] = min(low[u], dfn[v]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(dfn[u] == low[u])&#123;</div><div class="line">        ans ++;</div><div class="line">        <span class="keyword">while</span>(sta[tmp] != u)&#123;</div><div class="line">            <span class="keyword">int</span> gg = sta[tmp];</div><div class="line">            belong[gg] = ans;</div><div class="line">            instack[gg] = <span class="number">0</span>; tmp --;</div><div class="line">        &#125;</div><div class="line">        instack[u] = <span class="number">0</span>; tmp --; belong[u] = ans;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> anss = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= ans; i ++) <span class="keyword">if</span>(!in_sd[i]) anss ++;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, anss);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">suodian</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) <span class="keyword">if</span>(!belong[i]) belong[i] = ++ ans;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)&#123;</div><div class="line">        <span class="keyword">int</span> u1 = belong[i];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = head[i]; j; j = g[j].nxt)&#123;</div><div class="line">            <span class="keyword">int</span> v1 = belong[g[j].to];</div><div class="line">            <span class="keyword">if</span>(u1 != v1)&#123;add_sd(u1, v1); in_sd[v1] ++;&#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    query();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)&#123;</div><div class="line">        <span class="keyword">if</span>(!dfn[i]) tarjan(i);</div><div class="line">    &#125;</div><div class="line">    suodian(); </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    n = read(), m = read();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i ++)&#123;</div><div class="line">        <span class="keyword">int</span> u = read(), v = read();</div><div class="line">        add(u, v);</div><div class="line">    &#125;</div><div class="line">    solve();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    init();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>洛谷3373：</strong></p><p><a href="https://www.luogu.org/problem/show?pid=3373" target="_blank" rel="external">【模板】线段树 2</a></p><p><strong>分析：</strong></p><p>这道线段树其实也就是个模板，但是个人感觉比较容易错，尤其是什么<strong>先乘后加，加的懒标记也要乘</strong>之类的，这个自己画画图都能明白。</p><p><strong>代码：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i, n) for(LL i = 1; i &lt;= n; i ++)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REPG(i, x) for(LL i = head[x]; i; i = g[i].nxt)</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> mem(x, y) memset(x, y, sizeof(x));</span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> DB;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">Max</span><span class="params">(LL a, LL b)</span></span>&#123;<span class="keyword">return</span> a &gt; b ? a : b;&#125;</div><div class="line"><span class="function">LL <span class="title">Min</span><span class="params">(LL a, LL b)</span></span>&#123;<span class="keyword">return</span> a &lt; b ? a : b;&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> LL MAXN = <span class="number">1e5</span> + <span class="number">15</span>;</div><div class="line"></div><div class="line">LL a[MAXN], s[MAXN &lt;&lt; <span class="number">2</span>], col[MAXN &lt;&lt; <span class="number">2</span>], mul[MAXN &lt;&lt; <span class="number">2</span>], MOD;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">up</span><span class="params">(LL p)</span></span>&#123;s[p] = (s[p &lt;&lt; <span class="number">1</span>] + s[p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>]) % MOD;&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(LL p, LL l, LL r)</span></span>&#123;</div><div class="line">    mul[p] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">if</span>(l == r)&#123;s[p] = a[l]; <span class="keyword">return</span> ;&#125;</div><div class="line">    LL mid = (l + r) &gt;&gt; <span class="number">1</span>;</div><div class="line">    build(p &lt;&lt; <span class="number">1</span>, l, mid);</div><div class="line">    build(p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);</div><div class="line">    up(p);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">down</span><span class="params">(LL p, LL l, LL r)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(mul[p] != <span class="number">1</span>)&#123;</div><div class="line">        (col[p &lt;&lt; <span class="number">1</span>] *= mul[p]) %= MOD; (s[p &lt;&lt; <span class="number">1</span>] *= mul[p]) %= MOD; (mul[p &lt;&lt; <span class="number">1</span>] *= mul[p]) %= MOD;</div><div class="line">        (col[p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] *= mul[p]) %= MOD; (s[p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] *= mul[p]) %= MOD; (mul[p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] *= mul[p]) %= MOD;</div><div class="line">        mul[p] = <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(col[p])&#123;</div><div class="line">        <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</div><div class="line">        (col[p &lt;&lt; <span class="number">1</span>] += col[p]) %= MOD; (s[p &lt;&lt; <span class="number">1</span>] += (mid - l + <span class="number">1</span>) * col[p]) %= MOD;</div><div class="line">        (col[p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] += col[p]) %= MOD; (s[p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] += (r - mid) * col[p]) %= MOD;</div><div class="line">        col[p] = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(LL p, LL l, LL r, LL x, LL y, LL c, <span class="keyword">int</span> gg)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(x &lt;= l &amp;&amp; r &lt;= y)&#123;</div><div class="line">        <span class="keyword">if</span>(gg == <span class="number">2</span>)&#123;(s[p] += (r - l + <span class="number">1</span>) * c) %= MOD; (col[p] += c) %= MOD;&#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(gg == <span class="number">1</span>)&#123;(col[p] *= c) %= MOD; (mul[p] *= c) %= MOD; (s[p] *= c) %= MOD;&#125;</div><div class="line">        <span class="keyword">return</span> ;</div><div class="line">    &#125;</div><div class="line">    down(p, l, r);</div><div class="line">    LL mid = (l + r) &gt;&gt; <span class="number">1</span>;</div><div class="line">    <span class="keyword">if</span>(x &lt;= mid) modify(p &lt;&lt; <span class="number">1</span>, l, mid, x, y, c, gg);</div><div class="line">    <span class="keyword">if</span>(y &gt; mid) modify(p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r, x, y, c, gg);</div><div class="line">    up(p);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">query</span><span class="params">(LL p, LL l, LL r, LL x, LL y)</span></span>&#123;</div><div class="line">    LL ret = <span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span>(x &lt;= l &amp;&amp; r &lt;= y) <span class="keyword">return</span> s[p];</div><div class="line">    down(p, l, r);</div><div class="line">    LL mid = (l + r) &gt;&gt; <span class="number">1</span>;</div><div class="line">    <span class="keyword">if</span>(x &lt;= mid) (ret += query(p &lt;&lt; <span class="number">1</span>, l, mid, x, y)) %= MOD;</div><div class="line">    <span class="keyword">if</span>(y &gt; mid) (ret += query(p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r, x, y)) %= MOD;</div><div class="line">    up(p);</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">    LL r = <span class="number">0</span>, z = <span class="number">1</span>;</div><div class="line">    <span class="keyword">char</span> ch = getchar();</div><div class="line">    <span class="keyword">while</span>(ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch == <span class="string">'-'</span>) z = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">while</span>(ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>)&#123;r = r * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">return</span> r * z;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    LL n = read(), q = read();</div><div class="line">    MOD = read();</div><div class="line">    <span class="keyword">for</span>(LL i = <span class="number">1</span>; i &lt;= n; i ++) a[i] = read();</div><div class="line">    <span class="comment">//for(LL i = 1; i &lt;= MAXN; i ++) mul[i] = 1;</span></div><div class="line">    build(<span class="number">1</span>, <span class="number">1</span>, n);</div><div class="line">    <span class="keyword">while</span>(q --)&#123;</div><div class="line">        LL gg = read();</div><div class="line">        <span class="keyword">if</span>(gg == <span class="number">2</span>)&#123;</div><div class="line">            LL x = read(), y = read(), k = read();</div><div class="line">            modify(<span class="number">1</span>, <span class="number">1</span>, n, x, y, k, <span class="number">2</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(gg == <span class="number">3</span>)&#123;</div><div class="line">            LL x = read(), y = read();</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, query(<span class="number">1</span>, <span class="number">1</span>, n, x, y) % MOD);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(gg == <span class="number">1</span>)&#123;</div><div class="line">            LL x = read(), y = read(), k = read();</div><div class="line">            modify(<span class="number">1</span>, <span class="number">1</span>, n, x, y, k, <span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="comment">//fre();</span></div><div class="line">    init();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>洛谷2574：</strong></p><p><a href="https://www.luogu.org/problem/show?pid=2574" target="_blank" rel="external">XOR的艺术</a></p><p><strong>分析：</strong></p><p>这道题由于它xor的是1，那么也就意味着0变1，1变0.所以说我们记录区间内1的个数就可以了。</p><p><strong>代码：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> lson (o &lt;&lt; 1)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rson (o &lt;&lt; 1 | 1)</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">2e5</span> + <span class="number">15</span>;</div><div class="line"></div><div class="line"><span class="keyword">char</span> str[MAXN];</div><div class="line"><span class="keyword">int</span> n, m, a[MAXN &lt;&lt; <span class="number">2</span>];</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Segment_Tree</span></span></div><div class="line"><span class="class">&#123;</span></div><div class="line">    <span class="keyword">int</span> sumv[MAXN &lt;&lt; <span class="number">2</span>], optv[MAXN &lt;&lt; <span class="number">2</span>];</div><div class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> o)</span> </span>&#123; sumv[o]=sumv[lson]+sumv[rson]; <span class="keyword">return</span>; &#125;</div><div class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">if</span>(optv[o])&#123;</div><div class="line">        <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</div><div class="line">            optv[lson]^= <span class="number">1</span>; optv[rson] ^= <span class="number">1</span>;</div><div class="line">            sumv[lson]=(mid - l + <span class="number">1</span>)-sumv[lson];</div><div class="line">            sumv[rson]=(r - mid)-sumv[rson];</div><div class="line">            optv[o]=<span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        optv[o]=<span class="number">0</span>;</div><div class="line">        <span class="keyword">if</span>(l==r) &#123; sumv[o]= a[l]; <span class="keyword">return</span>; &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">int</span> mid = (l+r)&gt;&gt;<span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span>(l &lt;= mid) build(lson, l, mid);</div><div class="line">        <span class="keyword">if</span>(r &gt; mid) build(rson, mid+<span class="number">1</span>, r); </div><div class="line">        pushup(o);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">querysum</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> ql, <span class="keyword">int</span> qr)</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        </div><div class="line">        <span class="keyword">if</span>(ql&lt;=l &amp;&amp; qr&gt;=r) <span class="keyword">return</span> sumv[o];</div><div class="line">        pushdown(o, l, r);</div><div class="line">        <span class="keyword">int</span> mid = (l+r)&gt;&gt;<span class="number">1</span>, ans=<span class="number">0</span>;</div><div class="line">        <span class="keyword">if</span>(ql &lt;= mid) ans+= querysum(lson, l, mid, ql, qr);</div><div class="line">        <span class="keyword">if</span>(qr &gt; mid) ans+= querysum(rson, mid+<span class="number">1</span>, r, ql, qr);</div><div class="line">        <span class="keyword">return</span> ans;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">optadd</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> ql, <span class="keyword">int</span> qr)</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">if</span>(ql&lt;=l &amp;&amp; qr&gt;=r) &#123; optv[o] ^= <span class="number">1</span>; sumv[o]=(r - l + <span class="number">1</span>) - sumv[o]; <span class="keyword">return</span>;&#125;</div><div class="line">        </div><div class="line">        pushdown(o, l, r);</div><div class="line">        <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span>(ql &lt;= mid) optadd(lson, l, mid, ql, qr);</div><div class="line">        <span class="keyword">if</span>(qr &gt; mid) optadd(rson, mid+<span class="number">1</span>, r, ql, qr);</div><div class="line">        pushup(o); </div><div class="line">    &#125;</div><div class="line">&#125; st;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</div><div class="line">    <span class="built_in">cin</span>&gt;&gt; str;    </div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++) a[i]=str[i<span class="number">-1</span>]-<span class="string">'0'</span>;</div><div class="line">    </div><div class="line">    st.build(<span class="number">1</span>, <span class="number">1</span>, n);</div><div class="line">    </div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=m; i++)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> tmp1, l, r;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;tmp1, &amp;l, &amp;r);</div><div class="line">        <span class="keyword">if</span>(tmp1==<span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, st.querysum(<span class="number">1</span>, <span class="number">1</span>, n, l, r));</div><div class="line">        <span class="keyword">if</span>(tmp1==<span class="number">0</span>) st.optadd(<span class="number">1</span>, <span class="number">1</span>, n, l, r);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>洛谷1099：</strong></p><p><a href="https://www.luogu.org/problem/show?pid=1099" target="_blank" rel="external">树网的核</a></p><p><strong>分析：</strong></p><p>首先我们得明确一件事：对于多条树的直径，不管最后的路径F在那一条上，都有偏心距最优解，<strong>因为它们的直径中心是确定的</strong></p><p>这样就简单了，我先dfs一遍，找到其中一条树的直径，然后在这条直径上枚举小于等于s的路径，然后跑SPFA，最后取个点的dist最大的值再和ans取一个min即可。</p><p><strong>代码：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i, n) for(int i = 1; i &lt;= n; i ++)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REPG(i, x) for(int i = head[x]; i; i = g[i].nxt)</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> mem(x, y) memset(x, y, sizeof(x));</span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> DB;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">Max</span><span class="params">(LL a, LL b)</span></span>&#123;<span class="keyword">return</span> a &gt; b ? a : b;&#125;</div><div class="line"><span class="function">LL <span class="title">Min</span><span class="params">(LL a, LL b)</span></span>&#123;<span class="keyword">return</span> a &lt; b ? a : b;&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e3</span> + <span class="number">15</span>;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span><span class="keyword">int</span> to, nxt, dis;&#125;g[MAXN];</div><div class="line"><span class="keyword">int</span> e[MAXN][MAXN];</div><div class="line"><span class="keyword">int</span> head[MAXN], cnt = <span class="number">0</span>, dist[MAXN], tmp = <span class="number">-1</span>, tot, pat[MAXN];</div><div class="line"><span class="keyword">int</span> pre[MAXN], cost[MAXN], ss[MAXN], dd[MAXN];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> dis)</span></span>&#123;g[++ cnt] = (Edge)&#123;v, head[u], dis&#125;; head[u] = cnt;&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> dis)</span></span>&#123;add(u, v, dis); add(v, u, dis);&#125;</div><div class="line"><span class="built_in">queue</span> &lt;<span class="keyword">int</span>&gt; q;</div><div class="line"><span class="keyword">bool</span> vis[MAXN];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> r = <span class="number">0</span>, z = <span class="number">1</span>;</div><div class="line">    <span class="keyword">char</span> ch = getchar();</div><div class="line">    <span class="keyword">while</span>(ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch == <span class="string">'-'</span>) z = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">while</span>(ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>)&#123;r = r * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">return</span> r * z;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> fafa)</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; i; i = g[i].nxt)&#123;</div><div class="line">        <span class="keyword">int</span> v = g[i].to;</div><div class="line">        <span class="keyword">if</span>(v != fafa)&#123;</div><div class="line">            <span class="keyword">if</span>(dist[v] &lt; dist[u] + g[i].dis)&#123;</div><div class="line">                dist[v] = dist[u] + g[i].dis;</div><div class="line">                pre[v] = u;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(dist[v] &gt; tmp)&#123;tmp = dist[v]; tot = v;&#125;</div><div class="line">            dfs(v, u);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">SPFA</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">while</span>(!q.empty())&#123;</div><div class="line">        <span class="keyword">int</span> u = q.front(); q.pop(); vis[u] = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; i; i = g[i].nxt)&#123;</div><div class="line">            <span class="keyword">int</span> v = g[i].to;</div><div class="line">            <span class="keyword">if</span>(dd[v] &gt; dd[u] + g[i].dis)&#123;</div><div class="line">                dd[v] = dd[u] + g[i].dis;</div><div class="line">                <span class="keyword">if</span>(!vis[v])&#123;</div><div class="line">                    vis[v] = <span class="number">1</span>;</div><div class="line">                    q.push(v);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> n = read(), s = read(), cnt_ld = <span class="number">0</span>, ans = <span class="number">2e9</span>;</div><div class="line">    <span class="keyword">int</span> gg = <span class="number">-1</span>, st, en;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i ++)&#123;</div><div class="line">        <span class="keyword">int</span> u = read(), v = read(), dis = read();</div><div class="line">        add_edge(u, v, dis); e[u][v] = e[v][u] = dis;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)&#123;</div><div class="line">        dfs(i, <span class="number">0</span>);</div><div class="line">        <span class="keyword">if</span>(dist[tot] &gt; gg)&#123;</div><div class="line">            cnt_ld = <span class="number">0</span>; gg = dist[tot]; st = i; en = tot;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = en; ; j = pre[j])&#123;</div><div class="line">                pat[++ cnt_ld] = j;</div><div class="line">                <span class="keyword">if</span>(j == st) <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        tot = <span class="number">-1</span>;</div><div class="line">        <span class="built_in">memset</span>(dist, <span class="number">0</span>, <span class="keyword">sizeof</span>(dist));</div><div class="line">        <span class="built_in">memset</span>(pre, <span class="number">0</span>, <span class="keyword">sizeof</span>(pre));</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= (cnt_ld &gt;&gt; <span class="number">1</span>); i ++) swap(pat[cnt_ld - i + <span class="number">1</span>], pat[i]);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cnt_ld; i ++)&#123;vis[pat[i]] = <span class="number">1</span>; <span class="keyword">if</span>(i != <span class="number">1</span>) ss[i] = ss[i - <span class="number">1</span>] + e[pat[i - <span class="number">1</span>]][pat[i]];&#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cnt_ld; i ++)&#123;</div><div class="line">        <span class="built_in">memset</span>(dd, <span class="number">0x3f</span>, <span class="keyword">sizeof</span>(dd)); <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span>(vis));</div><div class="line">        <span class="keyword">while</span>(!q.empty()) q.pop();</div><div class="line">        <span class="keyword">int</span> j;</div><div class="line">        <span class="keyword">for</span>(j = i; j &lt;= cnt_ld; j ++)&#123;</div><div class="line">            <span class="keyword">if</span>(ss[j] - ss[i] &gt; s)&#123;j --; <span class="keyword">break</span>;&#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k = i; k &lt;= j; k ++)&#123;dd[pat[k]] = <span class="number">0</span>; q.push(pat[k]); vis[pat[k]] = <span class="number">1</span>;&#125;</div><div class="line">        SPFA();</div><div class="line">        <span class="keyword">int</span> orzcfz = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= n; k ++) orzcfz = max(orzcfz, dd[k]);</div><div class="line">        ans = min(ans, orzcfz);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    init();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 总结 </category>
          
          <category> 刷题总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图论 </tag>
            
            <tag> 数论 </tag>
            
            <tag> 最短路 </tag>
            
            <tag> Tarjan </tag>
            
            <tag> 线段树 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2017.10.21刷题总结</title>
      <link href="/2017/10/22/2017-10-21%E5%88%B7%E9%A2%98%E6%80%BB%E7%BB%93/"/>
      <content type="html"><![CDATA[<p>最近一直都在刷一些有关tarjan（缩点）的题。</p><p><strong>洛谷1262：</strong></p><p>由于外国间谍的大量渗入，国家安全正处于高度的危机之中。如果A间谍手中掌握着关于B间谍的犯罪证据，则称A可以揭发B。有些间谍收受贿赂，只要给他们一定数量的美元，他们就愿意交出手中掌握的全部情报。所以，如果我们能够收买一些间谍的话，我们就可能控制间谍网中的每一分子。因为一旦我们逮捕了一个间谍，他手中掌握的情报都将归我们所有，这样就有可能逮捕新的间谍，掌握新的情报。</p><p>我们的反间谍机关提供了一份资料，色括所有已知的受贿的间谍，以及他们愿意收受的具体数额。同时我们还知道哪些间谍手中具体掌握了哪些间谍的资料。假设总共有n个间谍(n不超过3000)，每个间谍分别用1到3000的整数来标识。</p><p>请根据这份资料，判断我们是否有可能控制全部的间谍，如果可以，求出我们所需要支付的最少资金。否则，输出不能被控制的一个间谍。</p><p><strong>分析：</strong>显然，我们判断no的条件是最开始通过没一个想被收买的人出发dfs，如果有的点没有被dfs到，那么就输出No。编号随着dfs的时候记录一下即可。</p><p>接下来我们再考虑最小费用。</p><p>显然，只要一个强连通分量中只要有一个人愿意被收买，我们就能知道这个强连通分量中所有点的信息。所以说我们先用tarjan缩点，然后记录一下每个强连通分量中想被收买的间谍的最下费用，对于一个缩完的点，如果它的入读为0的话，ans加上它的w_min。ans即为答案。</p><p><strong>代码：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i, n) for(int i = 1; i &lt;= n; i ++)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REPG(i, x) for(int i = head[x]; i; i = g[i].nxt)</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> mem(x, y) memset(x, y, sizeof(x));</span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> DB;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">Max</span><span class="params">(LL a, LL b)</span></span>&#123;<span class="keyword">return</span> a &gt; b ? a : b;&#125;</div><div class="line"><span class="function">LL <span class="title">Min</span><span class="params">(LL a, LL b)</span></span>&#123;<span class="keyword">return</span> a &lt; b ? a : b;&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">2e5</span> + <span class="number">15</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">2e9</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span><span class="keyword">int</span> to, nxt;&#125;g[MAXN], e[MAXN];</div><div class="line"><span class="keyword">int</span> ans1 = <span class="number">0</span>, ans2 = <span class="number">0</span>;</div><div class="line"><span class="keyword">int</span> head[MAXN], head_sd[MAXN], cnt = <span class="number">0</span>, cnt_sd = <span class="number">0</span>;</div><div class="line"><span class="keyword">int</span> in[MAXN], out[MAXN], ans = <span class="number">0</span>, dfns = <span class="number">0</span>, n, tot = <span class="number">0</span>;</div><div class="line"><span class="keyword">int</span> dfn[MAXN], low[MAXN], sta[MAXN], in_sd[MAXN], out_sd[MAXN], belong[MAXN];</div><div class="line"><span class="keyword">int</span> w[MAXN], w_sd[MAXN], num_sd[MAXN], min_num = INF;</div><div class="line"><span class="keyword">bool</span> instack[MAXN], vis[MAXN];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span>&#123;g[++ cnt] = (Edge)&#123;v, head[u]&#125;; head[u] = cnt;&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_sd</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span>&#123;e[++ cnt_sd] = (Edge)&#123;v, head_sd[u]&#125;; head_sd[u] = cnt_sd;&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> r = <span class="number">0</span>, z = <span class="number">1</span>;</div><div class="line">    <span class="keyword">char</span> ch = getchar();</div><div class="line">    <span class="keyword">while</span>(ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch == <span class="string">'-'</span>) z = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">while</span>(ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>)&#123;r = r * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">return</span> r * z;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</div><div class="line">    dfn[u] = low[u] = ++ dfns; instack[u] = <span class="number">1</span>; sta[++ tot] = u;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; i; i = g[i].nxt)&#123;</div><div class="line">        <span class="keyword">int</span> v = g[i].to;</div><div class="line">        <span class="keyword">if</span>(!dfn[v])&#123;tarjan(v); low[u] = min(low[u], low[v]);&#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(instack[v]) low[u] = min(low[u], dfn[v]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(dfn[u] == low[u])&#123;</div><div class="line">        ans ++;</div><div class="line">        <span class="keyword">while</span>(sta[tot] != u)&#123;</div><div class="line">            <span class="keyword">int</span> gg = sta[tot];</div><div class="line">            instack[gg] = <span class="number">0</span>;</div><div class="line">            belong[gg] = ans;</div><div class="line">            tot --;</div><div class="line">        &#125;</div><div class="line">        instack[u] = <span class="number">0</span>; tot --; belong[u] = ans;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">suodian</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)&#123;</div><div class="line">        <span class="keyword">if</span>(!belong[i]) belong[i] = ++ ans;</div><div class="line">        w_sd[belong[i]] = min(w_sd[belong[i]], w[i]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)&#123;</div><div class="line">        <span class="keyword">int</span> u1 = belong[i];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = head[i]; j; j = g[j].nxt)&#123;</div><div class="line">            <span class="keyword">int</span> v1 = belong[g[j].to];</div><div class="line">            <span class="keyword">if</span>(u1 != v1)&#123;add_sd(u1, v1); in_sd[v1] ++; out_sd[u1] ++;&#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</div><div class="line">    <span class="comment">//cout&lt;&lt;u&lt;&lt;endl;</span></div><div class="line">    vis[u] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; i; i = g[i].nxt)&#123;</div><div class="line">        <span class="keyword">int</span> v = g[i].to;</div><div class="line">        <span class="keyword">if</span>(!vis[v]) dfs(v);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">doit</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)&#123;</div><div class="line">        <span class="keyword">if</span>(!dfn[i]) tarjan(i);</div><div class="line">    &#125;</div><div class="line">    suodian();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)&#123;</div><div class="line">        <span class="keyword">if</span>(w[i] != INF &amp;&amp; !vis[i]) dfs(i);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) <span class="keyword">if</span>(!vis[i]) min_num = min(min_num, i);</div><div class="line">    <span class="keyword">if</span>(min_num != INF) <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> anss = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= ans; i ++) <span class="keyword">if</span>(!in_sd[i]) anss += w_sd[i];</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"YES\n%d\n"</span>, anss);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    n = read();</div><div class="line">    <span class="keyword">int</span> p = read();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= (n &lt;&lt; <span class="number">1</span>); i ++) w[i] = w_sd[i] = INF;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= p; i ++)&#123;</div><div class="line">        <span class="keyword">int</span> x = read(), dis = read();</div><div class="line">        w[x] = dis;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> r = read();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= r; i ++)&#123;</div><div class="line">        <span class="keyword">int</span> from = read(), to = read();</div><div class="line">        add(from, to);</div><div class="line">    &#125;</div><div class="line">    min_num = INF;</div><div class="line">    <span class="keyword">if</span>(check())&#123;<span class="built_in">printf</span>(<span class="string">"NO\n%d\n"</span>, min_num); <span class="keyword">return</span> ;&#125;</div><div class="line">    </div><div class="line">    doit();</div><div class="line">    query();</div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="comment">//freopen("testdata (1).in", "r", stdin);</span></div><div class="line">    <span class="comment">//freopen("my.out", "w", stdout);</span></div><div class="line">    init();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>洛谷2341：</strong></p><p>每头奶牛都梦想成为牛棚里的明星。被所有奶牛喜欢的奶牛就是一头明星奶牛。所有奶</p><p>牛都是自恋狂，每头奶牛总是喜欢自己的。奶牛之间的“喜欢”是可以传递的——如果A喜</p><p>欢B，B喜欢C，那么A也喜欢C。牛栏里共有N 头奶牛，给定一些奶牛之间的爱慕关系，请你</p><p>算出有多少头奶牛可以当明星。</p><p><strong>分析：</strong></p><p>题目的要求是求受欢迎的牛的数量，其实就是将题目给出的图经过缩点后求出度为0的强连通分量编号里面点的个数，在这有一些需要特判的情况，即当经缩点后出度为0的点的个数大于1时是不符合条件的（因为如果这样就不是大家都喜欢的牛了），所以这种情况应该输出0。其他地方就没有什么该注意的地方了。</p><p><strong>代码：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i, n) for(int i = 1; i &lt;= n; i ++)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REPG(i, x) for(int i = head[x]; i; i = g[i].nxt)</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> mem(x, y) memset(x, y, sizeof(x));</span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> DB;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">Max</span><span class="params">(LL a, LL b)</span></span>&#123;<span class="keyword">return</span> a &gt; b ? a : b;&#125;</div><div class="line"><span class="function">LL <span class="title">Min</span><span class="params">(LL a, LL b)</span></span>&#123;<span class="keyword">return</span> a &lt; b ? a : b;&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e5</span> + <span class="number">15</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span><span class="keyword">int</span> to, nxt;&#125;g[MAXN], e[MAXN];</div><div class="line"><span class="keyword">int</span> ans1 = <span class="number">0</span>, ans2 = <span class="number">0</span>;</div><div class="line"><span class="keyword">int</span> head[MAXN], head_sd[MAXN], cnt = <span class="number">0</span>, cnt_sd = <span class="number">0</span>;</div><div class="line"><span class="keyword">int</span> in[MAXN], out[MAXN], ans = <span class="number">0</span>, dfns = <span class="number">0</span>, n, m, tot = <span class="number">0</span>;</div><div class="line"><span class="keyword">int</span> dfn[MAXN], low[MAXN], sta[MAXN], in_sd[MAXN], out_sd[MAXN], belong[MAXN];</div><div class="line"><span class="keyword">int</span> orzqyf[MAXN];</div><div class="line"><span class="keyword">bool</span> instack[MAXN];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span>&#123;g[++ cnt] = (Edge)&#123;v, head[u]&#125;; head[u] = cnt;&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_sd</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span>&#123;e[++ cnt_sd] = (Edge)&#123;v, head_sd[u]&#125;; head_sd[u] = cnt_sd;&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> r = <span class="number">0</span>, z = <span class="number">1</span>;</div><div class="line">    <span class="keyword">char</span> ch = getchar();</div><div class="line">    <span class="keyword">while</span>(ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch == <span class="string">'-'</span>) z = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">while</span>(ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>)&#123;r = r * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">return</span> r * z;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</div><div class="line">    dfn[u] = low[u] = ++ dfns; instack[u] = <span class="number">1</span>; sta[++ tot] = u;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; i; i = g[i].nxt)&#123;</div><div class="line">        <span class="keyword">int</span> v = g[i].to;</div><div class="line">        <span class="keyword">if</span>(!dfn[v])&#123;tarjan(v); low[u] = min(low[u], low[v]);&#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(instack[v]) low[u] = min(low[u], dfn[v]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(dfn[u] == low[u])&#123;</div><div class="line">        ans ++;</div><div class="line">        <span class="keyword">while</span>(sta[tot] != u)&#123;</div><div class="line">            <span class="keyword">int</span> gg = sta[tot];</div><div class="line">            instack[gg] = <span class="number">0</span>;</div><div class="line">            belong[gg] = ans;</div><div class="line">            tot --;</div><div class="line">        &#125;</div><div class="line">        instack[u] = <span class="number">0</span>; tot --; belong[u] = ans;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">suodian</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)&#123;</div><div class="line">        <span class="keyword">if</span>(!belong[i]) belong[i] = ++ ans;</div><div class="line">        orzqyf[belong[i]] ++;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)&#123;</div><div class="line">        <span class="keyword">int</span> u1 = belong[i];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = head[i]; j; j = g[j].nxt)&#123;</div><div class="line">            <span class="keyword">int</span> v1 = belong[g[j].to];</div><div class="line">            <span class="keyword">if</span>(u1 != v1)&#123;add_sd(u1, v1); in_sd[v1] ++; out_sd[u1] ++;&#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">doit</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)&#123;</div><div class="line">        <span class="keyword">if</span>(!dfn[i]) tarjan(i);</div><div class="line">    &#125;</div><div class="line">    suodian();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    n = read(), m = read();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i ++)&#123;</div><div class="line">        <span class="keyword">int</span> u = read(), v = read();</div><div class="line">        add(u, v);</div><div class="line">    &#125;</div><div class="line">    doit();</div><div class="line">    <span class="keyword">int</span> orzcjr = <span class="number">0</span>, orzpkl;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= ans; i ++)&#123;</div><div class="line">        <span class="keyword">if</span>(!out_sd[i])&#123;orzcjr ++; orzpkl = i;&#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(orzcjr &gt; <span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">"0\n"</span>);</div><div class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, orzqyf[orzpkl]);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    init();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>洛谷2746&amp;2812：</strong></p><p>一些学校连入一个电脑网络。那些学校已订立了协议：每个学校都会给其它的一些学校分发软件（称作“接受学校”）。注意即使 B 在 A 学校的分发列表中， A 也不一定在 B 学校的列表中。</p><p>你要写一个程序计算，根据协议，为了让网络中所有的学校都用上新软件，必须接受新软件副本的最少学校数目（子任务 A）。更进一步，我们想要确定通过给任意一个学校发送新软件，这个软件就会分发到网络中的所有学校。为了完成这个任务，我们可能必须扩展接收学校列表，使其加入新成员。计算最少需要增加几个扩展，使得不论我们给哪个学校发送新软件，它都会到达其余所有的学校（子任务 B）。一个扩展就是在一个学校的接收学校列表中引入一个新成员。</p><p><strong>分析：</strong></p><p>因为这两道题是一样的，所以我放在一起来说。</p><p>很显然，子任务A就是求缩完点之后，入度为0的点的个数；子任务B就是求缩完点后，入读为0的点的个数和出度为0的点的个数的较大值（因为我们要使它形成一个大环，出入度都必须大于0）。</p><p><strong>代码：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i, n) for(int i = 1; i &lt;= n; i ++)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REPG(i, x) for(int i = head[x]; i; i = g[i].nxt)</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> mem(x, y) memset(x, y, sizeof(x));</span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> DB;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">Max</span><span class="params">(LL a, LL b)</span></span>&#123;<span class="keyword">return</span> a &gt; b ? a : b;&#125;</div><div class="line"><span class="function">LL <span class="title">Min</span><span class="params">(LL a, LL b)</span></span>&#123;<span class="keyword">return</span> a &lt; b ? a : b;&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e5</span> + <span class="number">15</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span><span class="keyword">int</span> to, nxt;&#125;g[MAXN], e[MAXN];</div><div class="line"><span class="keyword">int</span> ans1 = <span class="number">0</span>, ans2 = <span class="number">0</span>;</div><div class="line"><span class="keyword">int</span> head[MAXN], head_sd[MAXN], cnt = <span class="number">0</span>, cnt_sd = <span class="number">0</span>;</div><div class="line"><span class="keyword">int</span> in[MAXN], out[MAXN], ans = <span class="number">0</span>, dfns = <span class="number">0</span>, n, tot = <span class="number">0</span>;</div><div class="line"><span class="keyword">int</span> dfn[MAXN], low[MAXN], sta[MAXN], in_sd[MAXN], out_sd[MAXN], belong[MAXN];</div><div class="line"></div><div class="line"><span class="keyword">bool</span> instack[MAXN];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span>&#123;g[++ cnt] = (Edge)&#123;v, head[u]&#125;; head[u] = cnt;&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_sd</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span>&#123;e[++ cnt_sd] = (Edge)&#123;v, head_sd[u]&#125;; head_sd[u] = cnt_sd;&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> r = <span class="number">0</span>, z = <span class="number">1</span>;</div><div class="line">    <span class="keyword">char</span> ch = getchar();</div><div class="line">    <span class="keyword">while</span>(ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch == <span class="string">'-'</span>) z = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">while</span>(ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>)&#123;r = r * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">return</span> r * z;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</div><div class="line">    dfn[u] = low[u] = ++ dfns; instack[u] = <span class="number">1</span>; sta[++ tot] = u;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; i; i = g[i].nxt)&#123;</div><div class="line">        <span class="keyword">int</span> v = g[i].to;</div><div class="line">        <span class="keyword">if</span>(!dfn[v])&#123;tarjan(v); low[u] = min(low[u], low[v]);&#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(instack[v]) low[u] = min(low[u], dfn[v]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(dfn[u] == low[u])&#123;</div><div class="line">        ans ++;</div><div class="line">        <span class="keyword">while</span>(sta[tot] != u)&#123;</div><div class="line">            <span class="keyword">int</span> gg = sta[tot];</div><div class="line">            instack[gg] = <span class="number">0</span>;</div><div class="line">            belong[gg] = ans;</div><div class="line">            tot --;</div><div class="line">        &#125;</div><div class="line">        instack[u] = <span class="number">0</span>; tot --; belong[u] = ans;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">suodian</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) <span class="keyword">if</span>(!belong[i]) belong[i] = ++ ans;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)&#123;</div><div class="line">        <span class="keyword">int</span> u1 = belong[i];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = head[i]; j; j = g[j].nxt)&#123;</div><div class="line">            <span class="keyword">int</span> v1 = belong[g[j].to];</div><div class="line">            <span class="keyword">if</span>(u1 != v1)&#123;add_sd(u1, v1); in_sd[v1] ++; out_sd[u1] ++;&#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">doit</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)&#123;</div><div class="line">        <span class="keyword">if</span>(!dfn[i]) tarjan(i);</div><div class="line">    &#125;</div><div class="line">    suodian();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">query2</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> tmp1 = <span class="number">0</span>, tmp2 = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= ans; i ++)&#123;</div><div class="line">        <span class="keyword">if</span>(!in_sd[i]) tmp1 ++;</div><div class="line">        <span class="keyword">if</span>(!out_sd[i]) tmp2 ++;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(ans == <span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">"0\n"</span>);</div><div class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, max(tmp1, tmp2));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">query1</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= ans; i ++) <span class="keyword">if</span>(!in_sd[i]) ans1 ++;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans1);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    n = read();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)&#123;</div><div class="line">        <span class="keyword">int</span> v = read();</div><div class="line">        <span class="keyword">while</span>(v)&#123;add(i, v); in[v] ++, out[i] ++; v = read();&#125;</div><div class="line">    &#125;</div><div class="line">    doit();</div><div class="line">    query1();</div><div class="line">    query2();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    init();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>洛谷3387：</strong></p><p>给定一个n个点m条边有向图，每个点有一个权值，求一条路径，使路径经过的点权值之和最大。你只需要求出这个权值和。</p><p>允许多次经过一条边或者一个点，但是，重复经过的点，权值只计算一次。</p><p><strong>分析：</strong></p><p>洛谷给的是tarjan+dp，然而我不太懂怎么dp，所以我就用了SPFA。</p><p>缩完点后对于入度为0的点跑一遍SPFA，最后取最大值即可。</p><p><strong>代码：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i, n) for(int i = 1; i &lt;= n; i ++)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REPG(i, x) for(int i = head[x]; i; i = g[i].nxt)</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> mem(x, y) memset(x, y, sizeof(x));</span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> DB;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">Max</span><span class="params">(LL a, LL b)</span></span>&#123;<span class="keyword">return</span> a &gt; b ? a : b;&#125;</div><div class="line"><span class="function">LL <span class="title">Min</span><span class="params">(LL a, LL b)</span></span>&#123;<span class="keyword">return</span> a &lt; b ? a : b;&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e5</span> + <span class="number">15</span>; </div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span><span class="keyword">int</span> to, nxt;&#125;g[MAXN];</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge_sd</span>&#123;</span><span class="keyword">int</span> to, nxt;&#125;e[MAXN];</div><div class="line"><span class="keyword">int</span> head[MAXN], cnt = <span class="number">0</span>, sta[MAXN], belong[MAXN], w[MAXN], in[MAXN];</div><div class="line"><span class="keyword">int</span> dist[MAXN], dw[MAXN], dfn[MAXN], low[MAXN];</div><div class="line"><span class="keyword">int</span> head_sd[MAXN], cnt_sd = <span class="number">0</span>;</div><div class="line"><span class="keyword">int</span> dfsn = <span class="number">0</span>, tot = <span class="number">0</span>, ans = <span class="number">0</span>;</div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"><span class="keyword">bool</span> instack[MAXN], vis[MAXN];</div><div class="line"></div><div class="line"><span class="built_in">queue</span> &lt;<span class="keyword">int</span>&gt; q;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> r = <span class="number">0</span>, z = <span class="number">1</span>;</div><div class="line">    <span class="keyword">char</span> ch = getchar();</div><div class="line">    <span class="keyword">while</span>(ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch == <span class="string">'-'</span>) z = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">while</span>(ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>)&#123;r = r * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">return</span> r * z;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span>&#123;g[++ cnt] = (Edge)&#123;v, head[u]&#125;; head[u] = cnt;&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_sd</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span>&#123;e[++ cnt_sd] = (Edge_sd)&#123;v, head_sd[u]&#125;; head_sd[u] = cnt_sd;&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</div><div class="line">    dfn[u] = low[u] = ++ dfsn;</div><div class="line">    sta[++ tot] = u; instack[u] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; i; i = g[i].nxt)&#123;</div><div class="line">        <span class="keyword">int</span> v = g[i].to;</div><div class="line">        <span class="keyword">if</span>(!dfn[v])&#123;tarjan(v); low[u] = min(low[u], low[v]);&#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(instack[v]) low[u] = min(dfn[v], low[u]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(dfn[u] == low[u])&#123;</div><div class="line">        ans ++;</div><div class="line">        <span class="keyword">while</span>(sta[tot] != u)&#123;</div><div class="line">            <span class="keyword">int</span> gg = sta[tot];</div><div class="line">            instack[gg] = <span class="number">0</span>;</div><div class="line">            belong[gg] = ans;</div><div class="line">            tot --;</div><div class="line">        &#125;</div><div class="line">        tot --;</div><div class="line">        instack[u] = <span class="number">0</span>;</div><div class="line">        belong[u] = ans;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">SPFA</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">int</span> ret;</div><div class="line">    ret = dist[x] = dw[x];</div><div class="line">    q.push(x); vis[x] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span>(!q.empty())&#123;</div><div class="line">        <span class="keyword">int</span> u = q.front();</div><div class="line">        q.pop(); vis[u] = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = head_sd[u]; i; i = e[i].nxt)&#123;</div><div class="line">            <span class="keyword">int</span> v = e[i].to;</div><div class="line">            <span class="keyword">if</span>(dist[v] &lt; dist[u] + dw[v])&#123;</div><div class="line">                dist[v] = dist[u] + dw[v];</div><div class="line">                ret = max(ret, dist[v]);</div><div class="line">                <span class="keyword">if</span>(!vis[v])&#123;q.push(v); vis[v] = <span class="number">1</span>;&#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">doit</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)&#123;</div><div class="line">        <span class="keyword">if</span>(!dfn[i]) tarjan(i);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">pre</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) <span class="keyword">if</span>(!belong[i]) belong[i] = ++ ans;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)&#123;</div><div class="line">        <span class="keyword">int</span> u1 = belong[i];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = head[i]; j; j = g[j].nxt)&#123;</div><div class="line">            <span class="keyword">int</span> v1 = belong[g[j].to];</div><div class="line">            <span class="keyword">if</span>(u1 != v1 &amp;&amp; u1 &amp;&amp; v1)&#123;add_sd(u1, v1); in[v1] ++;&#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) dw[belong[i]] += w[i];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">memset</span>(dist, <span class="number">0xc0</span>, <span class="keyword">sizeof</span>(dist));</div><div class="line">    n = read(), m = read();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) w[i] = read();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i ++)&#123;</div><div class="line">        <span class="keyword">int</span> u = read(), v = read();</div><div class="line">        add(u, v);</div><div class="line">    &#125;</div><div class="line">    doit();</div><div class="line">    pre();</div><div class="line">    <span class="keyword">int</span> anss = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= ans; i ++)&#123;</div><div class="line">        <span class="keyword">if</span>(!in[i]) anss = max(anss, SPFA(i));</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//for(int i = 1; i &lt;= n; i ++) printf("%d ", belong[i]);</span></div><div class="line">    <span class="comment">//printf("\n");</span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, anss);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    init();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 总结 </category>
          
          <category> 刷题总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图论 </tag>
            
            <tag> Tarjan </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2017.10.18刷题总结</title>
      <link href="/2017/10/18/2017-10-18%E5%88%B7%E9%A2%98%E6%80%BB%E7%BB%93/"/>
      <content type="html"><![CDATA[<p>其实今天也没有做多少道题，毕竟也只有一个晚上。</p><p><strong>总结：</strong>首先，不得不承认，我之前一直不太会Dijsktra和Prim，然后今天在自习课上稍微学习了一下，然后晚上打了两个模板，然后休息的时候又打了一个LCA模板。之后呢，做了做一些水题，调了调之前比赛的题，然后一个晚上就这么过去了。</p><p><strong>明日计划：</strong></p><p>明天中午呢，时间不多，调调之前的题，然后打一下tarjan算法的模板。</p><p>明天下午肯定是要打模拟赛的，一定要拼全力！难也要打暴力，简单就要拿住分，不要用模拟赛都很难来吓唬自己。</p><p>明天晚上还有3h。明天的晚上肯定是要调下午的题，看情况，如果调完之后还有时间，那么我计划晚上（或中午）打一下tarjan算法的模板（毕竟有一段时间没打了，熟悉一下），然后在洛谷上做一做有关tarjan算法的题（<strong>目标：</strong>3-4道）供选题：洛谷1262，洛谷2002，洛谷2746，洛谷2863，bzoj1051，codevs1332。</p><p><strong>2017.10.18题解</strong></p><p><strong>洛谷1078</strong></p><p><strong>题意：</strong>有一位使者要游历各国，他每到一个国家，都能学到一种文化，但他不愿意学习任何一种文化超过一次（即如果他学习了某种文化，则他就不能到达其他有这种文化的国家）。不同的国家可能有相同的文化。不同文化的国家对其他文化的看法不同，有些文化会排斥外来</p><p>文化（即如果他学习了某种文化，则他不能到达排斥这种文化的其他国家）。</p><p>现给定各个国家间的地理关系，各个国家的文化，每种文化对其他文化的看法，以及这位使者游历的起点和终点（在起点和终点也会学习当地的文化），国家间的道路距离，试求从起点到终点最少需走多少路。</p><p><strong>分析：</strong>这道题它的n最大只到100，而且它求的是一个s到t的最短路，所以说，我们很容易，而且很显然的就能想到这道题我们可以用floyd来解决，只不过它有一些限制条件，即排斥关系，这个用二维数组记一下，然后floyd的时候特判一下就好。</p><p><strong>代码：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i, n) for(int i = 1; i &lt;= n; i ++)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REPG(i, x) for(int i = head[x]; i; i = g[i].nxt)</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> mem(x, y) memset(x, y, sizeof(x));</span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> DB;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">Max</span><span class="params">(LL a, LL b)</span></span>&#123;<span class="keyword">return</span> a &gt; b ? a : b;&#125;</div><div class="line"><span class="function">LL <span class="title">Min</span><span class="params">(LL a, LL b)</span></span>&#123;<span class="keyword">return</span> a &lt; b ? a : b;&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e3</span> + <span class="number">15</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXX = <span class="number">2e9</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> civ[MAXN], f[MAXN][MAXN];</div><div class="line"><span class="keyword">bool</span> vis[MAXN][MAXN];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">int</span> r = <span class="number">0</span>, z = <span class="number">1</span>;</div><div class="line"><span class="keyword">char</span> ch = getchar();</div><div class="line"><span class="keyword">while</span>(ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch == <span class="string">'-'</span>) z = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">while</span>(ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>)&#123;r = r * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">return</span> r * z;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">fre</span><span class="params">()</span></span>&#123;</div><div class="line">freopen(<span class="string">".in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line">freopen(<span class="string">".out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">int</span> n = read(), k = read(), m = read(), s = read(), t = read();</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j ++) f[i][j] = MAXX;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) civ[i] = read();</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; i ++)&#123;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= k; j ++) vis[i][j] = read();</div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i ++)&#123;</div><div class="line"><span class="keyword">int</span> u = read(), v = read(), dis = read();</div><div class="line"><span class="keyword">if</span>(!vis[civ[u]][civ[v]]) f[v][u] = dis;</div><div class="line"><span class="keyword">if</span>(!vis[civ[v]][civ[u]]) f[u][v] = dis;</div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= n; k ++)&#123;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)&#123;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j ++)&#123;</div><div class="line"><span class="keyword">if</span>(vis[civ[i]][civ[j]]) <span class="keyword">continue</span>;</div><div class="line"><span class="keyword">if</span>(!vis[civ[k]][civ[i]] &amp;&amp; !vis[civ[j]][civ[k]] &amp;&amp; f[i][k] != MAXX &amp;&amp; f[k][j] != MAXX) f[i][j] = min(f[i][k] + f[k][j], f[i][j]);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>(f[s][t] == MAXX) <span class="built_in">printf</span>(<span class="string">"-1\n"</span>);</div><div class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, f[s][t]);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="comment">//fre();</span></div><div class="line">init();</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>注意：</strong>这道题的排斥关系很容易搞混，i排斥j不代表j就一定排斥i。更。。。的是，$a_{i,j}$表示的是i排斥<strong>外来文化</strong>j，也就是说，你到了j之后就不能到i了，而不是表示你到i之后不能到j了。所以说，二维数组的记录把常人所理解的i，j颠倒一下就好了。</p><p><strong>洛谷1265</strong></p><p><strong>题意：</strong></p><p>某国有n个城市，它们互相之间没有公路相通，因此交通十分不便。为解决这一“行路难”的问题，政府决定修建公路。修建公路的任务由各城市共同完成。</p><p>修建工程分若干轮完成。在每一轮中，每个城市选择一个与它最近的城市，申请修建通往该城市的公路。政府负责审批这些申请以决定是否同意修建。</p><p>政府审批的规则如下：</p><p>（1）如果两个或以上城市申请修建同一条公路，则让它们共同修建；</p><p>（2）如果三个或以上的城市申请修建的公路成环。如下图，A申请修建公路AB，B申请修建公路BC，C申请修建公路CA。则政府将否决其中最短的一条公路的修建申请；</p><p><img src="https://cdn.luogu.org/upload/pic/80.png" alt="img"></p><p>（3）其他情况的申请一律同意。</p><p>一轮修建结束后，可能会有若干城市可以通过公路直接或间接相连。这些可以互相：连通的城市即组成“城市联盟”。在下一轮修建中，每个“城市联盟”将被看作一个城市，发挥一个城市的作用。</p><p>当所有城市被组合成一个“城市联盟”时，修建工程也就完成了。</p><p>你的任务是根据城市的分布和前面讲到的规则，计算出将要修建的公路总长度。</p><p><strong>分析：</strong>根据它的描述，我们就不难看出它的这个模拟过程就近似于一个prim算法的模拟过程，所以我们这道题的实质就是就最小生成树，由于这是一个稠密图，所以用prim显然更合适，据说kruskal会被卡掉5个点。</p><p><strong>代码：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i, n) for(int i = 1; i &lt;= n; i ++)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REPG(i, x) for(int i = head[x]; i; i = g[i].nxt)</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> mem(x, y) memset(x, y, sizeof(x));</span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> LF;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">Max</span><span class="params">(LL a, LL b)</span></span>&#123;<span class="keyword">return</span> a &gt; b ? a : b;&#125;</div><div class="line"><span class="function">LL <span class="title">Min</span><span class="params">(LL a, LL b)</span></span>&#123;<span class="keyword">return</span> a &lt; b ? a : b;&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">5e3</span> + <span class="number">15</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span><span class="keyword">int</span> x, y;&#125;a[MAXN];</div><div class="line"><span class="keyword">int</span> n;</div><div class="line">LF dist[MAXN];</div><div class="line"><span class="keyword">bool</span> vis[MAXN];</div><div class="line">LF ans = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="function">LF <span class="title">cal</span><span class="params">(<span class="keyword">int</span> x1, <span class="keyword">int</span> y1, <span class="keyword">int</span> x2, <span class="keyword">int</span> y2)</span></span>&#123;</div><div class="line">LF a1 = <span class="built_in">abs</span>(x2 - x1), b1 = <span class="built_in">abs</span>(y2 - y1);</div><div class="line"><span class="keyword">return</span> <span class="built_in">sqrt</span>(a1 * a1 + b1 * b1);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">prim</span><span class="params">()</span></span>&#123;</div><div class="line">vis[<span class="number">1</span>] = <span class="number">1</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i ++)&#123;</div><div class="line">LF dd = cal(a[<span class="number">1</span>].x, a[<span class="number">1</span>].y, a[i].x, a[i].y);</div><div class="line">dist[i] = dd;</div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; n; j ++)&#123;</div><div class="line"><span class="keyword">int</span> u = j, v = <span class="number">-1</span>;</div><div class="line">LF gg = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)&#123;</div><div class="line"><span class="keyword">if</span>(!vis[i] &amp;&amp; dist[i] &lt; gg)&#123;gg = dist[i]; v = i;&#125;</div><div class="line">&#125;</div><div class="line">vis[v] = <span class="number">1</span>; ans += gg;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)&#123;</div><div class="line"><span class="keyword">if</span>(vis[i]) <span class="keyword">continue</span>;</div><div class="line">LF dd = cal(a[v].x, a[v].y, a[i].x, a[i].y);</div><div class="line"><span class="keyword">if</span>(dd &lt; dist[i]) dist[i] = dd;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">int</span> r = <span class="number">0</span>, z = <span class="number">1</span>;</div><div class="line"><span class="keyword">char</span> ch = getchar();</div><div class="line"><span class="keyword">while</span>(ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch == <span class="string">'-'</span>) z = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">while</span>(ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>)&#123;r = r * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">return</span> r * z;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">fre</span><span class="params">()</span></span>&#123;</div><div class="line">freopen(<span class="string">".in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line">freopen(<span class="string">".out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">n = read();</div><div class="line">REP(i, n) a[i].x = read(), a[i].y = read();</div><div class="line">prim();</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%.2lf\n"</span>, ans);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="comment">//fre();</span></div><div class="line">init();</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>洛谷2420</strong></p><p><strong>题意：</strong></p><p>异或是一种神奇的运算,大部分人把它总结成不进位加法.</p><p>在生活中…xor运算也很常见。比如，对于一个问题的回答，是为1，否为0.那么：</p><p>（A是否是男生 ）xor（ B是否是男生）＝A和B是否能够成为情侣</p><p>好了，现在我们来制造和处理一些复杂的情况。比如我们将给出一颗树，它很高兴自己有N个结点。树的每条边上有一个权值。我们要进行M次询问，对于每次询问，我们想知道某两点之间的路径上所有边权的异或值。</p><p><strong>分析：</strong></p><p>很显然，这是一道裸的LCA，不懂的看<a href="http://www.cnblogs.com/yyf0309/p/5972701.html" target="_blank" rel="external">http://www.cnblogs.com/yyf0309/p/5972701.html</a></p><p>这道题只不过是需要加一维数组$px_{i,j}$表示i到i的$2^j$倍祖先的路径权值异或值。</p><p>求LCA的时候ans异或一下就好了。</p><p><strong>代码：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i, n) for(int i = 1; i &lt;= n; i ++)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REPG(i, x) for(int i = head[x]; i; i = g[i].nxt)</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> mem(x, y) memset(x, y, sizeof(x));</span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> DB;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">Max</span><span class="params">(LL a, LL b)</span></span>&#123;<span class="keyword">return</span> a &gt; b ? a : b;&#125;</div><div class="line"><span class="function">LL <span class="title">Min</span><span class="params">(LL a, LL b)</span></span>&#123;<span class="keyword">return</span> a &lt; b ? a : b;&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">int</span> r = <span class="number">0</span>, z = <span class="number">1</span>;</div><div class="line"><span class="keyword">char</span> ch = getchar();</div><div class="line"><span class="keyword">while</span>(ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch == <span class="string">'-'</span>) z = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">while</span>(ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>)&#123;r = r * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">return</span> r * z;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">5e5</span> + <span class="number">15</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span><span class="keyword">int</span> to, nxt, dis;&#125;g[MAXN &lt;&lt; <span class="number">1</span>];</div><div class="line"><span class="keyword">int</span> head[MAXN], cnt = <span class="number">0</span>, p[MAXN][<span class="number">25</span>], d[MAXN], xp[MAXN][<span class="number">25</span>];</div><div class="line"><span class="keyword">int</span> n, m, ans = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> dis)</span></span>&#123;g[++ cnt] = (Edge)&#123;v, head[u], dis&#125;; head[u] = cnt;&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> dis)</span></span>&#123;add(u, v, dis); add(v, u, dis);&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> now)</span></span>&#123;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = head[now]; i; i = g[i].nxt)&#123;</div><div class="line"><span class="keyword">int</span> v = g[i].to;</div><div class="line"><span class="keyword">if</span>(v != p[now][<span class="number">0</span>] &amp;&amp; !d[v])&#123;</div><div class="line">d[v] = d[now] + <span class="number">1</span>;</div><div class="line">p[v][<span class="number">0</span>] = now;</div><div class="line">xp[v][<span class="number">0</span>] = g[i].dis;</div><div class="line">dfs(v);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">lca</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</div><div class="line"><span class="keyword">if</span>(d[x] &lt; d[y]) swap(x, y);</div><div class="line"><span class="keyword">int</span> t = d[x] - d[y];</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">21</span>; i ++)&#123;</div><div class="line"><span class="keyword">if</span>(t &amp; (<span class="number">1</span> &lt;&lt; i))&#123;</div><div class="line">ans ^= xp[x][i];</div><div class="line">x = p[x][i];</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">21</span>; i &gt;= <span class="number">0</span>; i --)&#123;</div><div class="line"><span class="keyword">if</span>(p[x][i] != p[y][i])&#123;</div><div class="line">ans = ans ^ xp[x][i] ^ xp[y][i];</div><div class="line">x = p[x][i]; y = p[y][i];</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>(x == y) <span class="keyword">return</span> ans;</div><div class="line">ans = ans ^ xp[x][<span class="number">0</span>] ^ xp[y][<span class="number">0</span>];</div><div class="line"><span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">doit</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">21</span>; j ++)&#123;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)&#123;</div><div class="line"><span class="keyword">if</span>(p[i][j - <span class="number">1</span>])&#123;</div><div class="line">p[i][j] = p[p[i][j - <span class="number">1</span>]][j - <span class="number">1</span>];</div><div class="line">xp[i][j] = xp[i][j - <span class="number">1</span>] ^ xp[p[i][j - <span class="number">1</span>]][j - <span class="number">1</span>];</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">fre</span><span class="params">()</span></span>&#123;</div><div class="line">freopen(<span class="string">".in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line">freopen(<span class="string">".out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">n = read();</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i ++)&#123;<span class="keyword">int</span> u = read(), v = read(), dis = read(); add_edge(u, v, dis);&#125;</div><div class="line">dfs(<span class="number">1</span>);</div><div class="line">doit();</div><div class="line">m = read();</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i ++)&#123;</div><div class="line">ans = <span class="number">0</span>;</div><div class="line"><span class="keyword">int</span> x = read(), y = read();</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, lca(x, y));</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="comment">//fre();</span></div><div class="line">init();</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 总结 </category>
          
          <category> 刷题总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图论 </tag>
            
            <tag> 最短路 </tag>
            
            <tag> 最近公共祖先 </tag>
            
            <tag> 最小生成树 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>洛谷2835 刻录光盘 题解</title>
      <link href="/2017/10/17/%E6%B4%9B%E8%B0%B72835-%E5%88%BB%E5%BD%95%E5%85%89%E7%9B%98-%E9%A2%98%E8%A7%A3/"/>
      <content type="html"><![CDATA[<p>这道题比较有（简）趣（单）。</p><p><strong>题意：</strong></p><p>给你一个图，求最大连通块的个数。</p><p><strong>分析：</strong></p><p>这道题也没什么好分析的吧。就是你记一下每个点的入度，然后看看有多少个点的入度为0，入度为0的点的个数即为ans。（注意：如果所有点的入度均大于0，那么ans=1）</p><p><strong>代码：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> DB;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">Max</span><span class="params">(LL a, LL b)</span></span>&#123;<span class="keyword">return</span> a &gt; b ? a : b;&#125;</div><div class="line"><span class="function">LL <span class="title">Min</span><span class="params">(LL a, LL b)</span></span>&#123;<span class="keyword">return</span> a &lt; b ? a : b;&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e3</span> + <span class="number">15</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> in[MAXN];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> r = <span class="number">0</span>, z = <span class="number">1</span>;</div><div class="line">    <span class="keyword">char</span> ch = getchar();</div><div class="line">    <span class="keyword">while</span>(ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch == <span class="string">'-'</span>) z = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">while</span>(ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>)&#123;r = r * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">return</span> r * z;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">fre</span><span class="params">()</span></span>&#123;</div><div class="line">    freopen(<span class="string">".in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line">    freopen(<span class="string">".out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> n = read(), ans = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)&#123;</div><div class="line">        <span class="keyword">int</span> x;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</div><div class="line">        <span class="keyword">while</span>(x != <span class="number">0</span>)&#123;</div><div class="line">            in[x] ++;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);<span class="comment">//一定要用scanf！！！别用快读！！！</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) <span class="keyword">if</span>(!in[i]) ans ++;</div><div class="line">    <span class="keyword">if</span>(!ans) ans = <span class="number">1</span>;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="comment">//fre();</span></div><div class="line">    init();</div><div class="line">    <span class="keyword">return</span>  <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>注意事项：</strong></p><p>这道题有一点比较坑。第6个点我开始TLE了，然后发现是快读的问题，改成scanf就好了，莫名其妙，其实我也不知道这是怎么回事。知道的同学可以在评论或者某些地方跟我说一下，谢谢！</p>]]></content>
      
      <categories>
          
          <category> 知识点 </category>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图论 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>bzoj1977 次小生成树 题解</title>
      <link href="/2017/10/16/bzoj1977-%E6%AC%A1%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91-%E9%A2%98%E8%A7%A3/"/>
      <content type="html"><![CDATA[<p>额。。。</p><p>这道题调了我两天，还用了别人的权限号，真的特别抱歉，主要是没跟他说，然后交了20多次才对。。。</p><p><strong>题意：</strong></p><p>这道题是说：让你求n个点的严格次小生成树，即所有权值和大于MST的权值和中最小的。</p><p><strong>分析：</strong></p><p>很显然，这道题就是一道次小生成树的问题。</p><p>首先次小生成树的求法就是先跑一边MST，然后暴力枚举每条不在MST上的边，然后更新。我们每次暴力枚举的是这条边，然后求这条边所连接的两个端点u,v在MST上的路径中的边权最大值，如果这个值等于当前的这条边的边权值w，那么很显然我们需要找到这条路径上的严格次大值，我们可以通过树上倍增的方式来求出路径上的边权最大值以及次大值，然后就没有然后了。</p><p><strong>代码：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"> </div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"> </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> DB;</div><div class="line"> </div><div class="line"><span class="function">LL <span class="title">Max</span><span class="params">(LL a, LL b)</span></span>&#123;<span class="keyword">return</span> a &gt; b ? a : b;&#125;</div><div class="line"><span class="function">LL <span class="title">Min</span><span class="params">(LL a, LL b)</span></span>&#123;<span class="keyword">return</span> a &lt; b ? a : b;&#125;</div><div class="line"> </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e5</span> + <span class="number">15</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXM = <span class="number">3e5</span> + <span class="number">15</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x7fffffff</span>;</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span><span class="keyword">int</span> a, b, c; <span class="keyword">bool</span> vis;&#125;e[MAXM];</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span><span class="keyword">int</span> to, nxt, dis;&#125;g[MAXN &lt;&lt; <span class="number">1</span>];</div><div class="line"> </div><div class="line"><span class="keyword">int</span> head[MAXN], cnt = <span class="number">0</span>, tot = <span class="number">0</span>, gg = INF;</div><div class="line">LL ans = <span class="number">0</span>;</div><div class="line"><span class="keyword">int</span> fa[MAXN], p[MAXN][<span class="number">20</span>], d1[MAXN][<span class="number">20</span>], d2[MAXN][<span class="number">20</span>], dep[MAXN];</div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> d)</span></span>&#123;</div><div class="line">    g[++ cnt].to = v;</div><div class="line">    g[cnt].nxt = head[u];</div><div class="line">    g[cnt].dis = d;</div><div class="line">    head[u] = cnt;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> dis)</span></span>&#123;add(u, v, dis); add(v, u, dis);&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">return</span> (fa[x] == x) ? x : fa[x] = get(fa[x]);&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(Node x, Node y)</span></span>&#123;<span class="keyword">return</span> x.c &lt; y.c;&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> fafa)</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">16</span>; i ++)&#123;</div><div class="line">        <span class="keyword">if</span>(dep[x] &lt; (<span class="number">1</span> &lt;&lt; i)) <span class="keyword">break</span>;</div><div class="line">        p[x][i] = p[p[x][i - <span class="number">1</span>]][i - <span class="number">1</span>];</div><div class="line">        d1[x][i] = max(d1[x][i - <span class="number">1</span>], d1[p[x][i - <span class="number">1</span>]][i - <span class="number">1</span>]);</div><div class="line">        <span class="keyword">if</span>(d1[x][i - <span class="number">1</span>] == d1[p[x][i - <span class="number">1</span>]][i - <span class="number">1</span>])</div><div class="line">            d2[x][i] = max(d2[x][i - <span class="number">1</span>], d2[p[x][i - <span class="number">1</span>]][i - <span class="number">1</span>]);</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            d2[x][i] = min(d1[x][i - <span class="number">1</span>], d1[p[x][i - <span class="number">1</span>]][i - <span class="number">1</span>]);</div><div class="line">            d2[x][i] = max(d2[x][i], d2[x][i - <span class="number">1</span>]);</div><div class="line">            d2[x][i] = max(d2[x][i], d2[p[x][i - <span class="number">1</span>]][i - <span class="number">1</span>]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">     </div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = head[x]; i; i = g[i].nxt)&#123;</div><div class="line">        <span class="keyword">int</span> v = g[i].to;</div><div class="line">        <span class="keyword">if</span>(v != fafa)&#123;</div><div class="line">            dep[v] = dep[x] + <span class="number">1</span>;</div><div class="line">            d1[v][<span class="number">0</span>] = g[i].dis;</div><div class="line">            p[v][<span class="number">0</span>] = x;</div><div class="line">            dfs(v, x);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">lca</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(dep[x] &lt; dep[y]) swap(x, y);</div><div class="line">    <span class="keyword">int</span> t = dep[x] - dep[y];</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">16</span>; i ++)</div><div class="line">        <span class="keyword">if</span>(t &amp; (<span class="number">1</span> &lt;&lt; i)) x = p[x][i];</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">16</span>; j &gt;= <span class="number">0</span>; j --)&#123;</div><div class="line">        <span class="keyword">if</span>(p[x][j] != p[y][j])&#123;</div><div class="line">            x = p[x][j];</div><div class="line">            y = p[y][j];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(x == y) <span class="keyword">return</span> x;</div><div class="line">    <span class="keyword">return</span> p[x][<span class="number">0</span>];</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">kruskal</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) fa[i] = i;</div><div class="line">    sort(e + <span class="number">1</span>, e + m + <span class="number">1</span>, cmp);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i ++)&#123;</div><div class="line">        <span class="keyword">int</span> f1 = get(e[i].a), f2 = get(e[i].b);</div><div class="line">        <span class="keyword">if</span>(f1 != f2)&#123;</div><div class="line">            fa[f1] = f2;</div><div class="line">            ans += e[i].c;</div><div class="line">            e[i].vis = <span class="number">1</span>;</div><div class="line">            add_edge(e[i].a, e[i].b, e[i].c);</div><div class="line">            tot ++; <span class="keyword">if</span>(tot == n - <span class="number">1</span>) <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">cal</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> f, <span class="keyword">int</span> v)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> deep = dep[x] - dep[f];</div><div class="line">    <span class="keyword">int</span> mx1 = <span class="number">0</span>, mx2 = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">16</span>; i ++)&#123;</div><div class="line">        <span class="keyword">if</span>(deep &amp; (<span class="number">1</span> &lt;&lt; i))&#123;</div><div class="line">           <span class="keyword">if</span>(d1[x][i] &gt; mx1)&#123;</div><div class="line">               mx2 = mx1;</div><div class="line">               mx1 = d1[x][i];</div><div class="line">           &#125;</div><div class="line">           mx2 = max(mx2, d2[x][i]);</div><div class="line">           x = p[x][i];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(mx1 != v) gg = min(gg, v - mx1);</div><div class="line">    <span class="keyword">else</span> gg = min(gg, v - mx2);</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">doit</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> v)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> f = lca(x, y);</div><div class="line">    cal(x, f, v); cal(y, f, v);</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> r = <span class="number">0</span>, z = <span class="number">1</span>;</div><div class="line">    <span class="keyword">char</span> ch = getchar();</div><div class="line">    <span class="keyword">while</span>(ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch == <span class="string">'-'</span>) z = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">while</span>(ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>)&#123;r = r * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">return</span> r * z;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    n = read(), m = read();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i ++)&#123;e[i].a = read(), e[i].b = read(), e[i].c = read();&#125;</div><div class="line">    kruskal();</div><div class="line">    dfs(<span class="number">1</span>, <span class="number">0</span>);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i ++) <span class="keyword">if</span>(!e[i].vis) doit(i, e[i].a, e[i].b, e[i].c);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans + gg);</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    init();</div><div class="line">    <span class="keyword">return</span>  <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>注意事项：</strong></p><p>这道题我可是被坑了很久的，所以还是有一些大家需要注意的地方：</p><p>1.ans一定要是long long的！要不然你算算就知道ans会爆int，然后就gg了。</p><p>2.数组一定要开够</p><p>3.倍增不要写错了。。。像我好像就是求LCA写错了。。。但是我之前一直这样写啊！！！所以很莫名其妙。。。</p>]]></content>
      
      <categories>
          
          <category> 知识点 </category>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 最小生成树 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>POJ1679 The Unique Tree 题解</title>
      <link href="/2017/10/15/POJ1679-The-Unique-Tree-%E9%A2%98%E8%A7%A3/"/>
      <content type="html"><![CDATA[<p><strong>题意：</strong></p><p>这道题的题意大概就是说给你一个图，求其最小生成树的路径权值和是否唯一。</p><p><strong>分析：</strong></p><p>很显然，n个点的次小生成树的路径权值和是小于等于最小生成树的路径权值和的，所以我们只要求一下这n个点的最小生成树和次小生成树，比较一下它们的路径权值和是否相等即可。</p><p><strong>代码：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> DB;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">Max</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;<span class="keyword">return</span> a &gt; b ? a : b;&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">Min</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;<span class="keyword">return</span> a &lt; b ? a : b;&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">515</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></div><div class="line"><span class="keyword">int</span> l, r, w;</div><div class="line">&#125;e[MAXN * MAXN];</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sec_Edge</span>&#123;</span></div><div class="line"><span class="keyword">int</span> to, dis, nxt;</div><div class="line">&#125;g[MAXN &lt;&lt; <span class="number">1</span>];</div><div class="line"></div><div class="line"><span class="keyword">int</span> head[MAXN], cnt = <span class="number">0</span>, fa[MAXN], f[MAXN][MAXN];</div><div class="line"><span class="keyword">int</span> ans_max = <span class="number">0</span>, ans_maxx = INF, now, n, m;</div><div class="line"><span class="keyword">bool</span> vis[MAXN * MAXN];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">int</span> r = <span class="number">0</span>, z = <span class="number">1</span>;</div><div class="line"><span class="keyword">char</span> ch = getchar();</div><div class="line"><span class="keyword">while</span>(ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch == <span class="string">'-'</span>) z = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">while</span>(ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>)&#123;r = r * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">return</span> r * z;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> dis)</span></span>&#123;</div><div class="line">g[++ cnt].to = v; g[cnt].dis = dis; g[cnt].nxt = head[u];</div><div class="line">head[u] = cnt;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line"><span class="keyword">return</span> fa[x] == x ? x : fa[x] = get(fa[x]);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(Node x, Node y)</span></span>&#123;</div><div class="line"><span class="keyword">return</span> x.w &lt; y.w;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">kruskal</span><span class="params">()</span></span>&#123;</div><div class="line">sort(e + <span class="number">1</span>, e + m + <span class="number">1</span>, cmp);</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) fa[i] = i;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i ++)&#123;</div><div class="line"><span class="keyword">int</span> f1 = get(e[i].l), f2 = get(e[i].r);</div><div class="line"><span class="keyword">if</span>(f1 != f2)&#123;</div><div class="line">vis[i] = <span class="number">1</span>; ans_max += e[i].w;</div><div class="line">fa[f1] = f2;</div><div class="line">add(e[i].l, e[i].r, e[i].w);</div><div class="line">add(e[i].r, e[i].l, e[i].w);</div><div class="line"><span class="keyword">if</span>(n - <span class="number">1</span> == cnt / <span class="number">2</span>) <span class="keyword">return</span> ;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> v, <span class="keyword">int</span> fr, <span class="keyword">int</span> maxe)</span></span>&#123;</div><div class="line">f[now][v] = maxe;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = head[v]; i; i = g[i].nxt)&#123;</div><div class="line"><span class="keyword">int</span> k = g[i].to;</div><div class="line"><span class="keyword">if</span>(k != fr) dfs(k, v, max(maxe, g[i].dis));</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">int</span> T = read();</div><div class="line"><span class="keyword">while</span>(T --)&#123;</div><div class="line"><span class="built_in">memset</span>(head, <span class="number">0</span>, <span class="keyword">sizeof</span>(head));</div><div class="line"><span class="built_in">memset</span>(f, <span class="number">0</span>, <span class="keyword">sizeof</span>(f));</div><div class="line"><span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span>(vis));</div><div class="line"><span class="built_in">memset</span>(fa, <span class="number">0</span>, <span class="keyword">sizeof</span>(fa));</div><div class="line">ans_max = <span class="number">0</span>, ans_maxx = INF, cnt = <span class="number">0</span>;</div><div class="line">n = read(), m = read();</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i ++)&#123;e[i].l = read(), e[i].r = read(), e[i].w = read();&#125;</div><div class="line">kruskal();</div><div class="line"><span class="keyword">for</span>(now = <span class="number">1</span>; now &lt;= n; now ++) dfs(now, <span class="number">0</span>, <span class="number">0</span>);</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i ++)&#123;</div><div class="line"><span class="keyword">if</span>(!vis[i]) ans_maxx = min(ans_maxx, ans_max - f[e[i].l][e[i].r] + e[i].w);</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>(ans_max == ans_maxx) <span class="built_in">printf</span>(<span class="string">"Not Unique!\n"</span>);</div><div class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans_max);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="comment">//fre();</span></div><div class="line">init();</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>注意事项：</strong></p><p>这道题我交了12次才A。。。主要有两个低级错误：</p><p>1.POJ好像不让用bits/stdc++.h，害得我CE了三次。。。</p><p>2.数组一定要开够，我就开小了，然后MLE了8次。。。</p>]]></content>
      
      <categories>
          
          <category> 知识点 </category>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 最小生成树 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>次小生成树</title>
      <link href="/2017/10/15/%E6%AC%A1%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/"/>
      <content type="html"><![CDATA[<p>首先， 我们肯定知道最小生成树的求法， 什么kruskal啊， prim啊， 随随便便就水了很多题不是吗？<br>在面对次小生成树问题的时候， 可以选择枚举原MST中的每一条边进行删除， 然后跑MST的算法（当然， 可能有更好的暴力方法， 这里就不详细描述了）， 这样一来， 复杂度就到了O(nmlogm)的级别， 小一点的数据也是可以的。不过我们要追求更优的话， 就需要用到另一种方法。<br><strong>一个概念：最小瓶颈路</strong><br>在无向图中求一条连接两点的路径， 使路径上权值最大的边尽可能的小， 则这条路径称为最小瓶颈路。<br>求法也很简单， 在原图中构建MST， 则在MST上两点间的路径即为最小瓶颈路了。证明也非常简单， 只要维护最大边最小的话， 可以将先前的所有边进行排序， 然后依次添加， 直到两点连通为止。 再看先前的操作， 不就是kruskal吗？<br><strong>具体过程：</strong><br>在熟悉了上面的概念以后， 接下来的过程就非常简单了。 这次我们枚举要添加哪一条边， 加上这条边的权值， 然后将这条边连接的两点的最小瓶颈路上的最大边权减去， 就得到了一棵新的生成树。 这就是“边交换”的过程， 毕竟次小生成树是由最小生成树删去一条边再添加一条新边得到的嘛， 这一点容易证明。 于是， 我们用O(m)的时间枚举新添加的边， 然后用O(1)的时间更新答案， 最后输出。 之前MST的复杂度为O(mlogm), 求最小瓶颈路上的最大权值为O(n²)， 总复杂度即为O(n²+mlogm)。</p><p>例题：</p><ol><li><a href="https://vijos.org/p/1070/" target="_blank" rel="external">https://vijos.org/p/1070/</a>            “vijos 1070”</li><li><a href="http://poj.org/problem?id=1679/" target="_blank" rel="external">http://poj.org/problem?id=1679/</a>     “POJ 1679”</li></ol><p>模板：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> N 500 + 10</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> M 150000</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 1000000000</span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">line</span></span></div><div class="line"><span class="class">&#123;</span></div><div class="line">    <span class="keyword">int</span> l, r, w;</div><div class="line">&#125;c[M];</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span></span></div><div class="line"><span class="class">&#123;</span></div><div class="line">    <span class="keyword">int</span> fr, to, w, next;</div><div class="line">&#125;e[<span class="number">2</span>*N];</div><div class="line"><span class="keyword">int</span> n, m, num, now, ans1, ans2 = INF;</div><div class="line"><span class="keyword">int</span> fa[N], p[N], d[N][N], used[M];</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(line a, line b)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">return</span> a.w &lt; b.w;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">if</span> (fa[x] == x) <span class="keyword">return</span> x;</div><div class="line">    <span class="keyword">return</span> fa[x] = find(fa[x]);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">char</span> c = getchar();</div><div class="line">    <span class="keyword">while</span>(c &lt; <span class="string">'0'</span> || c &gt; <span class="string">'9'</span>) c = getchar();</div><div class="line">    <span class="keyword">int</span> x = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span>(c &gt;= <span class="string">'0'</span> &amp;&amp; c &lt;= <span class="string">'9'</span>)</div><div class="line">    &#123;</div><div class="line">        x = <span class="number">10</span>*x + c - <span class="string">'0'</span>;</div><div class="line">        c = getchar();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> x;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> z)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    e[++num].fr = x;</div><div class="line">    e[num].to = y;</div><div class="line">    e[num].w = z;</div><div class="line">    e[num].next = p[x];</div><div class="line">    p[x] = num;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    n = read(), m = read();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</div><div class="line">    &#123;</div><div class="line">        c[i].l = read();</div><div class="line">        c[i].r = read();</div><div class="line">        c[i].w = read();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">kruskal</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</div><div class="line">    fa[i] = i;</div><div class="line">    sort(c+<span class="number">1</span>, c+m+<span class="number">1</span>, cmp);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> fl = find(c[i].l), fr = find(c[i].r);</div><div class="line">        <span class="keyword">if</span> (fl != fr)</div><div class="line">        &#123;</div><div class="line">            used[i] = <span class="number">1</span>;</div><div class="line">            fa[fl] = fr;</div><div class="line">            ans1 += c[i].w;</div><div class="line">            add(c[i].l, c[i].r, c[i].w);</div><div class="line">            add(c[i].r, c[i].l, c[i].w);</div><div class="line">            <span class="keyword">if</span> (n - <span class="number">1</span> == num / <span class="number">2</span>) <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;<span class="comment">//克鲁斯卡尔</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs_mini</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> fr, <span class="keyword">int</span> maxs)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    d[now][x] = maxs;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = p[x]; i; i = e[i].next)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> k = e[i].to;</div><div class="line">        <span class="keyword">if</span> (k != fr) dfs_mini(k, x, max(maxs, e[i].w));</div><div class="line">    &#125;</div><div class="line">&#125;<span class="comment">//求最小瓶颈路上最大权值</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">deal</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    kruskal();</div><div class="line">    <span class="keyword">if</span> (n - <span class="number">1</span> == num / <span class="number">2</span>) <span class="built_in">printf</span>(<span class="string">"Cost: %d\n"</span>, ans1);</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Cost: -1\n"</span>);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Cost: -1\n"</span>);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (now = <span class="number">1</span>; now &lt;= n; ++now)</div><div class="line">    dfs_mini(now, <span class="number">0</span>, <span class="number">0</span>);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</div><div class="line">    <span class="keyword">if</span> (!used[i] &amp;&amp; ans1 - d[c[i].l][c[i].r] + c[i].w &lt; ans2)</div><div class="line">    ans2 = ans1 - d[c[i].l][c[i].r] + c[i].w;<span class="comment">//枚举并更新</span></div><div class="line">    <span class="keyword">if</span> (ans2 != INF) <span class="built_in">printf</span>(<span class="string">"Cost: %d\n"</span>, ans2);</div><div class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"Cost: -1\n"</span>);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    init();</div><div class="line">    deal();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 知识点 </category>
          
          <category> 讲解与实践 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 最小生成树 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>洛谷P1941 飞扬的小鸟 题解</title>
      <link href="/2017/10/09/%E6%B4%9B%E8%B0%B7P1941-%E9%A3%9E%E6%89%AC%E7%9A%84%E5%B0%8F%E9%B8%9F-%E9%A2%98%E8%A7%A3/"/>
      <content type="html"><![CDATA[<p>今天本蒟蒻又搞了一道DP题——飞扬的小鸟。<br><strong>题目：</strong><br>题目描述</p><p>Flappy Bird 是一款风靡一时的休闲手机游戏。玩家需要不断控制点击手机屏幕的频率来调节小鸟的飞行高度，让小鸟顺利通过画面右方的管道缝隙。如果小鸟一不小心撞到了水管或者掉在地上的话，便宣告失败。</p><p>为了简化问题，我们对游戏规则进行了简化和改编：</p><p>游戏界面是一个长为n ，高为 m 的二维平面，其中有k 个管道（忽略管道的宽度）。</p><p>小鸟始终在游戏界面内移动。小鸟从游戏界面最左边任意整数高度位置出发，到达游戏界面最右边时，游戏完成。</p><p>小鸟每个单位时间沿横坐标方向右移的距离为1 ，竖直移动的距离由玩家控制。如果点击屏幕，小鸟就会上升一定高度X ，每个单位时间可以点击多次，效果叠加；<br>如果不点击屏幕，小鸟就会下降一定高度Y 。小鸟位于横坐标方向不同位置时，上升的高度X 和下降的高度Y 可能互不相同。</p><p>小鸟高度等于0 或者小鸟碰到管道时，游戏失败。小鸟高度为 m 时，无法再上升。<br>现在，请你判断是否可以完成游戏。如果可以 ，输出最少点击屏幕数；否则，输出小鸟最多可以通过多少个管道缝隙。</p><p>输入输出格式</p><p>输入格式：<br>输入文件名为 bird.in 。</p><p>第1 行有3 个整数n ，m ，k ，分别表示游戏界面的长度，高度和水管的数量，每两个</p><p>整数之间用一个空格隔开；</p><p>接下来的n 行，每行2 个用一个空格隔开的整数X 和Y ，依次表示在横坐标位置0 ~n- 1</p><p>上玩家点击屏幕后，小鸟在下一位置上升的高度X ，以及在这个位置上玩家不点击屏幕时，</p><p>小鸟在下一位置下降的高度Y 。</p><p>接下来k 行，每行3 个整数P ，L ，H ，每两个整数之间用一个空格隔开。每行表示一</p><p>个管道，其中P 表示管道的横坐标，L 表示此管道缝隙的下边沿高度为L ，H 表示管道缝隙</p><p>上边沿的高度（输入数据保证P 各不相同，但不保证按照大小顺序给出）。</p><p>输出格式：<br>输出文件名为bird.out 。</p><p>共两行。</p><p>第一行，包含一个整数，如果可以成功完成游戏，则输出1 ，否则输出0 。</p><p>第二行，包含一个整数，如果第一行为1 ，则输出成功完成游戏需要最少点击屏幕数，否则，输出小鸟最多可以通过多少个管道缝隙。</p><p>输入输出样例</p><p>输入样例#1：<br>10 10 6<br>3 9<br>9 9<br>1 2<br>1 3<br>1 2<br>1 1<br>2 1<br>2 1<br>1 6<br>2 2<br>1 2 7<br>5 1 5<br>6 3 5<br>7 5 8<br>8 7 9<br>9 1 3<br>输出样例#1：<br>1<br>6</p><p>输入样例#2：<br>10 10 4<br>1 2<br>3 1<br>2 2<br>1 8<br>1 8<br>3 2<br>2 1<br>2 1<br>2 2<br>1   2<br>1 0 2<br>6 7 9<br>9 1 4<br>3 8 10<br>输出样例#2：<br>0<br>3<br>说明</p><p>【输入输出样例说明】</p><p>如下图所示，蓝色直线表示小鸟的飞行轨迹，红色直线表示管道。<br><img src="https://cdn.luogu.org/upload/pic/1348.png" alt="输入输出样例说明"></p><p>【数据范围】</p><p>对于30% 的数据：5 ≤ n ≤ 10，5 ≤ m ≤ 10，k = 0 ，保证存在一组最优解使得同一单位时间最多点击屏幕3 次；</p><p>对于50% 的数据：5 ≤ n ≤ 2 0 ，5 ≤ m ≤ 10，保证存在一组最优解使得同一单位时间最多点击屏幕3 次；</p><p>对于70% 的数据：5 ≤ n ≤ 1000，5 ≤ m ≤ 1 0 0 ；</p><p>对于100%的数据：5 ≤ n ≤ 100 0 0 ，5 ≤ m ≤ 1 0 00，0 ≤ k &lt; n ，0&lt;X &lt; m ，0&lt;Y &lt;m，0&lt;P &lt;n，0 ≤ L &lt; H ≤ m ，L +1&lt; H 。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> DB;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">10050</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">1050</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> x[N], y[N];</div><div class="line"><span class="keyword">int</span> n, m, p;</div><div class="line"><span class="keyword">int</span> low[N], high[N];</div><div class="line"><span class="keyword">int</span> f[N][M * <span class="number">2</span>];</div><div class="line"><span class="keyword">bool</span> e[N];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">int</span>  r = <span class="number">0</span>, z = <span class="number">1</span>;</div><div class="line"><span class="keyword">char</span> ch = getchar();</div><div class="line"><span class="keyword">while</span>(ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch == <span class="string">'-'</span>) z = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">while</span>(ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>)&#123;r = r * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">return</span> r * z;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">Min</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;<span class="keyword">return</span> a &lt; b ? a : b;&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">Max</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;<span class="keyword">return</span> a &gt; b ? a : b;&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">fre</span><span class="params">()</span></span>&#123;</div><div class="line">freopen(<span class="string">".in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line">freopen(<span class="string">".out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">GetData</span><span class="params">()</span></span>&#123;</div><div class="line">n = read(), m = read(), p = read();</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) x[i] = read(), y[i] = read();</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)&#123;</div><div class="line">low[i] = <span class="number">1</span>;</div><div class="line">high[i] = m;</div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= p; i ++)&#123;</div><div class="line"><span class="keyword">int</span> a = read(), b = read(), c = read();</div><div class="line">low[a] = b + <span class="number">1</span>, high[a] = c - <span class="number">1</span>;</div><div class="line">e[a] = <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Do</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="built_in">memset</span>(f, <span class="number">0x3f</span>, <span class="keyword">sizeof</span>(f));</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j ++)</div><div class="line">f[<span class="number">0</span>][j] = <span class="number">0</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)&#123;</div><div class="line"></div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = x[i] + <span class="number">1</span>; j &lt;= m + x[i]; j ++)</div><div class="line">f[i][j] = Min(f[i - <span class="number">1</span>][j - x[i]] + <span class="number">1</span>, f[i][j - x[i]] + <span class="number">1</span>);</div><div class="line"><span class="comment">//上升 </span></div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = m + <span class="number">1</span>; j &lt;= m + x[i]; j ++)</div><div class="line">f[i][m] = Min(f[i][m], f[i][j]);</div><div class="line"><span class="comment">//特判 </span></div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j + y[i] &lt;= m; j ++)</div><div class="line">f[i][j] = Min(f[i][j], f[i - <span class="number">1</span>][j + y[i]]);</div><div class="line"><span class="comment">//下降 </span></div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; low[i]; j ++)</div><div class="line">f[i][j] = f[<span class="number">0</span>][<span class="number">0</span>]; <span class="comment">//+oo</span></div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = high[i] + <span class="number">1</span>; j &lt;= m; j ++)</div><div class="line">f[i][j] = f[<span class="number">0</span>][<span class="number">0</span>]; <span class="comment">//+oo</span></div><div class="line"><span class="comment">//管道 </span></div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> ans = f[<span class="number">0</span>][<span class="number">0</span>];</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j ++)</div><div class="line">ans = Min(ans, f[n][j]);</div><div class="line"><span class="keyword">if</span>(ans &lt; f[<span class="number">0</span>][<span class="number">0</span>]) <span class="built_in">printf</span>(<span class="string">"1\n%d\n"</span>, ans);</div><div class="line"><span class="keyword">else</span> &#123;</div><div class="line"><span class="keyword">int</span> i, j;</div><div class="line"><span class="keyword">for</span>(i = n; i &gt;= <span class="number">1</span>; i--)&#123;</div><div class="line"><span class="keyword">for</span>(j = <span class="number">1</span>; j &lt;= m; j ++)&#123;</div><div class="line"><span class="keyword">if</span>(f[i][j] &lt; f[<span class="number">0</span>][<span class="number">0</span>]) <span class="keyword">break</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>(j &lt;= m) <span class="keyword">break</span>;</div><div class="line">&#125;</div><div class="line">ans = <span class="number">0</span>;</div><div class="line"><span class="keyword">for</span>(j = <span class="number">1</span>; j &lt;= i; j ++)</div><div class="line"><span class="keyword">if</span>(e[j]) ans ++;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"0\n%d\n"</span>, ans);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">GetData();</div><div class="line">Do();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="comment">//fre();</span></div><div class="line">init();</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 知识点 </category>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
            <tag> 背包问题 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2017.10.1-2017.10.8总结</title>
      <link href="/2017/10/09/2017-10-1-2017-10-8%E6%80%BB%E7%BB%93/"/>
      <content type="html"><![CDATA[<h3 id="10-1-10-4总结"><a href="#10-1-10-4总结" class="headerlink" title="10.1-10.4总结"></a>10.1-10.4总结</h3><p>显然，这四天是十一，最近过于疲惫的我请了3天的假，<del>在家里好好休息了一番</del> （感觉在家休息也是做题学习啊）</p><h3 id="10-5总结"><a href="#10-5总结" class="headerlink" title="10.5总结"></a>10.5总结</h3><p>时隔多天再做模拟赛。。。然而也没有多少天，也就4天没做模拟赛而已。。。</p><p>今天交晚了，所以没成绩，不过我自己测了一下，应该是40分，尴尬。400分才做这么点分，实在有一点说不过去。</p><p>今天的t1看起来并没有那么难，事实证明我离正确答案已经很近了，但是并没有想到标答那一步，导致我这道题只有20分的暴力分&amp;拖延了交卷时间。t2很显然，它的暴力可以拿到50分，然而zz一般的我竟然选择放弃这道题的暴力，去想t1和t4，真的不知道该说什么好了。t3最开始以为就是一个裸的线段树，然而它的数据范围到了$1e9$，这就比较gg了。t4就比较惨淡，最开始我还想着是不是个dp，然后写了半天没跳出来，只得放弃。</p><p>因此，纵观今天的题与自己的分数，我觉得我的分数低主要是体现在<strong>实力不足</strong>上（咳咳，这貌似是每场都是低分的主要理由了吧），其次，还有很大一部分是<strong>分配时间以及心态上的问题</strong>，就比如t2本来还能拿个50分，却图正解然后正解没想出来，暴力也没打完。不过这一方面是我永远都改不掉的，这就比较gg。这几场比赛最开始都是在发愣，所以说上来先直截了当的打个暴力是坠吼的，然后拿到暴力分后再慢慢想（反正打暴力也花不了多少时间嘛）。题解见下。</p><p>今天下午fsf讲了特（我）别（都）特（听）别（不）难（懂）的图论。到现在（17:00）我在实现了第一道例题。。。</p>]]></content>
      
      <categories>
          
          <category> 总结 </category>
          
          <category> 心得与体会 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图论 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2017.9月总结</title>
      <link href="/2017/10/09/2017-9%E6%9C%88%E6%80%BB%E7%BB%93/"/>
      <content type="html"><![CDATA[<h3 id="9-14总结"><a href="#9-14总结" class="headerlink" title="9.14总结"></a>9.14总结</h3><p>​    今天就比较gg。如果我没有记错的话，我已经有一段时间没有考上过150了。虽然说我这次考了192，但是（是个人都懂）这个成绩很烂。</p><p>​    今天这道题比较简单，比一般的比赛简单（要不然我这种juruo是不可能上100的）。第一题是一道暴力dp，第二题是道大模拟，第三个目测是dp，但本juruo不会做。</p><p>第一题还是很套路的。一看就知道是个二位状态，然后我们枚举最后一次所选的凳子，$f（i，j）$为我们选了i个凳子，最后一次选的第j个凳子的最后方案，那么我们很容易就得到状态转移方程式$f（i，j）=max（f（i，j），f（i-1，s）+sum）$，因为每个凳子只能选一次，所以得保证$s&lt;j$即可，然后找到$f[k]<a href="1\leq i\leq m">i</a>$的最大值就好了。</p><p>​    第二题就更加简单。这道题就是一个分数之间的加法，（可能跟数据水有关系）开个long long就够了，但是切记求lcm的时候先除以最大公约数，然后再乘分母，要不然会爆。其他的按照题意模拟既可。</p><p>​    第三题乍一看是到dp（但它应该就是一道dp），然后想了想没有想出来，于是打算打个大暴力，但是由于我花在前两题的时间过多，于是第三题的暴力没有打完，于是暴0了。</p><p>​    总体的总结一下，我觉得我的时间分配可能还是有一些问题，比赛刚开始应该把题全都看一遍（比如这次t2就比t1简单了一节）；其次，我觉得我本场的最大的失误（灾难性失误）就是t2忘了判断分子为0如何输出的问题了，导致我这道题只拿了92分。这种失误也表现出了我的代码能力偏弱以及思维逻辑不够严谨等特点，所以我还是不能小看模拟题，适当的也要做一做复杂的模拟题。</p><h3 id="9-21总结"><a href="#9-21总结" class="headerlink" title="9.21总结"></a>9.21总结</h3><p>比赛网址：<a href="http://zybuluo.com/Falsyta/note/772691" target="_blank" rel="external">http://zybuluo.com/Falsyta/note/772691</a></p><p><del>（貌似只有我心情好才写总结）</del></p><p>​    今天的题其实我看着觉得很难，其实它就是很难。。。</p><p>​    t1就是求</p><script type="math/tex; mode=display">(\sum_{i=1}^{m}\ \ n\ \ mod\ \ i)\ \ mod\ \ 10^{9}+7</script><p>​    看似很智障，其实就是很智障。</p><p>​    这道题就是将$n\ \ mod\ \ i$ 写成$n-\llcorner \frac{n}{i}\ \lrcorner \times i$</p><p>​    这样我们就可以枚举一下$\llcorner \frac{n}{i}\ \lrcorner$的值的情况。它一共会有$\sqrt{m}$种不同的值，然后显然这道题就做完了。</p><p>​    </p><p>​    下面我们看一下t2。</p><p>​    这道题肯定就是选$\frac{n}{2}+1$个数嘛，这样才能使两个总和尽量大。</p><p>​    因为我们需要使两个总和都尽量大，这时我莫名其妙的想起了国王的游戏（瞎想），然后果断的取了乘积前k大的（$k=\frac{n}{2}+1$），然后顺带就莫名其妙的A了。。。虽说我现在都不知道这个为什么是对的。</p><h3 id="9-23模拟赛总结"><a href="#9-23模拟赛总结" class="headerlink" title="9.23模拟赛总结"></a>9.23模拟赛总结</h3><p>比赛网址：<a href="https://zybuluo.com/Falsyta/note/894732" target="_blank" rel="external">https://zybuluo.com/Falsyta/note/894732</a></p><p>​    今天这套题和21号的是一套题，不过比21号的难了太多了。。。难到随时想弃疗</p><p>​    于是t1我就瞎打了个爆搜（深搜），然后顺理成章的拿了50分。</p><p>​    t2读了半天题，一直没有明白$3\ \ s$是什么鬼。然后恍然大悟，然后就没有然后了。明显是一道AC自动机，然后我并不会写，所以之后我还是需要看一下AC自动机的相关博客，稍微学习一下。</p><p>​    t3听别人都说是智障题，当然结果反映它就是很智障。<del>其实我也觉得很智障</del>，不过我开始做这道题的时候只剩下了10min，于是我不动脑子瞎搞了一个看起来很对的拓扑排序的算法，于是乎它挂掉了，与此同时我发现了它是一道弱智的树形dp，可是为时已晚，就这样gg了。</p><p>​    最终只是拿到了50分。。。</p><p>​    下面我大概论述一下标算（我调出来的）：</p><p>​    t1其实就是一个爆搜，不过我们需要使用bfs，这个其实没什么好说的啊，直接搞就完了，肯定是要比dfs快的啊（也不知道当时我的脑子是怎么瓦特的）！</p><p>​    t2就比较难，我并不会写，但是大概意思我是明白的滴。它是通过二进制建了$logm$ 个AC自动机，然后找size两桶的两个AC自动机合并，然后就没然后了。。。</p><p>​    t3就是树形dp，分别用两个数组$f$和$g$记录一些东西。$f<em>{i}$表示以$i$为根的子树需要有多少条边反向过来。$g</em>{i}$表示以$i$为都城最少需要反向多少条边。然后$O(n)$DP一下应该就可以了。</p><h3 id="9-23-ACM北京赛区网络赛总结"><a href="#9-23-ACM北京赛区网络赛总结" class="headerlink" title="9.23 ACM北京赛区网络赛总结"></a>9.23 ACM北京赛区网络赛总结</h3><p>​    今天的ACM可是说是比上周的整体都要简单（其实也未必，上周都只做出来两道，今天也只做出来了两道，不过今天有一题有了正确的思路，就是没有时间继续往下想了）。</p><p>​    今天的A题十分的水，一看就是签到题。</p><p>​    显然，A题它就是一个大的模拟，没什么好说的，代码：</p><p>​    </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1015</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> p[MAXN];</div><div class="line"><span class="keyword">int</span> ans = <span class="number">2e9</span> + <span class="number">15</span>, ans1, ans2;</div><div class="line"><span class="keyword">bool</span> vis[MAXN];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">int</span> r = <span class="number">0</span>, z = <span class="number">1</span>;</div><div class="line"><span class="keyword">char</span> ch = getchar();</div><div class="line"><span class="keyword">while</span>(ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch == <span class="string">'-'</span>) z = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">while</span>(ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>)&#123;r = r * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">return</span> r * z;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">pd</span><span class="params">(<span class="keyword">int</span> minn, <span class="keyword">int</span> mins, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</div><div class="line"><span class="keyword">if</span>((minn + mins) &lt; ans)&#123;</div><div class="line">ans = minn + mins;</div><div class="line">ans1 = min(x, y);</div><div class="line">ans2 = max(x, y);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m) != EOF)&#123;</div><div class="line">ans = <span class="number">2e9</span> + <span class="number">15</span>;</div><div class="line"><span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span>(vis));</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i ++) p[i] = read();</div><div class="line"><span class="keyword">int</span> q = read(), t;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; q; i ++)&#123;t = read(); vis[t] = <span class="number">1</span>;&#125;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i ++)&#123;</div><div class="line"><span class="keyword">int</span> tmp = <span class="number">1</span>, minn = <span class="number">1e9</span> + <span class="number">7</span>, x = i, y;</div><div class="line"><span class="keyword">if</span>(vis[i]) <span class="keyword">continue</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; n; j ++)&#123;</div><div class="line"><span class="keyword">if</span>(!vis[j])&#123;</div><div class="line">tmp ++;</div><div class="line"><span class="keyword">if</span>(p[j] &lt; minn)&#123;</div><div class="line">minn = p[j];</div><div class="line">y = j;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>(tmp == m)&#123;pd(minn, p[x], x, y); <span class="keyword">break</span>;&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, ans1, ans2);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">init();</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>​    I题一看就知道是线段树，不过我们需要求出最大值和最小值，改动仅此而已（最开始我没看到可以重复，于是还算了次小和最小，于是搞得很乱）不过最终我们还是成功的做出来了这道题，不过这也耗尽了<del>我们队员</del>我的脑细胞。</p><p>​    接来下我们一直在搞G题，可是绞尽脑汁还是没有找到规律，可见我的智商低下啊。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> DB;</div><div class="line"></div><div class="line"><span class="keyword">const</span> ll MAXN = <span class="number">2</span> &lt;&lt; <span class="number">17</span> + <span class="number">1</span>;</div><div class="line"><span class="keyword">const</span> ll INF = <span class="number">2</span> &lt;&lt; <span class="number">31</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></div><div class="line">ll maxx, maxs, minn, mins;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">maxs = maxx = -INF;</div><div class="line">minn = mins = INF;</div><div class="line">&#125;</div><div class="line">&#125;s[MAXN];</div><div class="line"></div><div class="line">ll a[MAXN];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Max</span><span class="params">(ll a, ll b)</span></span>&#123;<span class="keyword">return</span> a &gt; b ? a : b;&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Min</span><span class="params">(ll a, ll b)</span></span>&#123;<span class="keyword">return</span> a &lt; b ? a : b;&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</div><div class="line"><span class="keyword">if</span>(l == r)&#123;s[p].maxs = s[p].maxx = s[p].minn = s[p].mins = a[l]; <span class="keyword">return</span> ;&#125;</div><div class="line"><span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</div><div class="line">build(p * <span class="number">2</span>, l, mid); </div><div class="line">build(p * <span class="number">2</span> + <span class="number">1</span>, mid + <span class="number">1</span>, r);</div><div class="line"><span class="keyword">int</span> ls = p * <span class="number">2</span>, rs = p * <span class="number">2</span> + <span class="number">1</span>;</div><div class="line"><span class="keyword">if</span>(s[ls].maxx &gt; s[rs].maxx)&#123;</div><div class="line">s[p].maxx = s[ls].maxx; s[p].maxs = s[rs].maxx;</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> &#123;</div><div class="line">s[p].maxx = s[rs].maxx; s[p].maxs = s[ls].maxx;</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>(s[ls].minn &lt; s[rs].minn)&#123;</div><div class="line">s[p].minn = s[ls].minn; s[p].mins = s[rs].minn;</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> &#123;</div><div class="line">s[p].minn = s[rs].minn; s[p].mins = s[ls].minn;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">ll r = <span class="number">0</span>, z = <span class="number">1</span>;</div><div class="line"><span class="keyword">char</span> ch = getchar();</div><div class="line"><span class="keyword">while</span>(ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch == <span class="string">'-'</span>) z = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">while</span>(ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>)&#123;r = r * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">return</span> r * z;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> x, <span class="keyword">int</span> v)</span></span>&#123;</div><div class="line"><span class="keyword">if</span>(l == r)&#123;s[p].maxs = s[p].maxx = s[p].minn = s[p].mins = v; <span class="keyword">return</span> ;&#125;</div><div class="line"><span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</div><div class="line"><span class="keyword">if</span>(x &lt;= mid) modify(p * <span class="number">2</span>, l, mid, x, v);</div><div class="line"><span class="keyword">else</span> modify(p * <span class="number">2</span> + <span class="number">1</span>, mid + <span class="number">1</span>, r, x, v);</div><div class="line"><span class="keyword">int</span> ls = p * <span class="number">2</span>, rs = p * <span class="number">2</span> + <span class="number">1</span>;</div><div class="line"><span class="keyword">if</span>(s[ls].maxx &gt; s[rs].maxx)&#123;</div><div class="line">s[p].maxx = s[ls].maxx; s[p].maxs = s[rs].maxx;</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> &#123;</div><div class="line">s[p].maxx = s[rs].maxx; s[p].maxs = s[ls].maxx;</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>(s[ls].minn &lt; s[rs].minn)&#123;</div><div class="line">s[p].minn = s[ls].minn; s[p].mins = s[rs].minn;</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> &#123;</div><div class="line">s[p].minn = s[rs].minn; s[p].mins = s[ls].minn;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">Node <span class="title">query</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</div><div class="line">Node ll, rr, res;</div><div class="line">ll.init(); rr.init(); res.init();</div><div class="line"><span class="keyword">if</span>(x &lt;= l &amp;&amp; r &lt;= y) <span class="keyword">return</span> s[p];</div><div class="line"><span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</div><div class="line"><span class="keyword">if</span>(x &lt;= mid) ll = query(p * <span class="number">2</span>, l, mid, x, y);</div><div class="line"><span class="keyword">if</span>(y &gt; mid) rr = query(p * <span class="number">2</span> + <span class="number">1</span>, mid + <span class="number">1</span>, r, x, y);</div><div class="line"><span class="keyword">if</span>(ll.maxx == -INF)&#123;</div><div class="line">res.maxx = rr.maxx; res.maxs = rr.maxs; res.minn = rr.minn; res.mins = rr.mins;</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> <span class="keyword">if</span>(rr.maxx == -INF)&#123;</div><div class="line">res.maxx = ll.maxx; res.maxs = ll.maxs; res.minn = ll.minn; res.mins = ll.mins;</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> &#123;</div><div class="line"><span class="keyword">if</span>(ll.maxx &gt; rr.maxx)&#123;</div><div class="line">res.maxx = ll.maxx; res.maxs = rr.maxx;</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> &#123;</div><div class="line">res.maxx = rr.maxx; res.maxs = ll.maxx;</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>(ll.minn &lt; rr.minn)&#123;</div><div class="line">res.minn = ll.minn; res.mins = rr.minn;</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> &#123;</div><div class="line">res.minn = rr.minn; res.mins = ll.minn;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> res;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">int</span> T = read();</div><div class="line"><span class="keyword">while</span>(T --)&#123;</div><div class="line"><span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="keyword">sizeof</span>(a));</div><div class="line">ll n = read();</div><div class="line">n = (<span class="number">1</span> &lt;&lt; n);</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">4</span> * n; i ++) s[i].init();</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) a[i] = read();</div><div class="line">build(<span class="number">1</span>, <span class="number">1</span>, n);</div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">for(int i = 1; i &lt; 4 * n ; i ++)&#123;</span></div><div class="line"><span class="comment">cout&lt;&lt;i&lt;&lt;": "&lt;&lt;endl;</span></div><div class="line"><span class="comment">cout&lt;&lt;s[i].maxx&lt;&lt;" "&lt;&lt;s[i].maxs&lt;&lt;" "&lt;&lt;s[i].mins&lt;&lt;" "&lt;&lt;s[i].minn&lt;&lt;endl;</span></div><div class="line"><span class="comment">&#125;</span></div><div class="line"><span class="comment">*/</span></div><div class="line"><span class="keyword">int</span> q = read();</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= q; i ++)&#123;</div><div class="line"><span class="keyword">int</span> e = read();</div><div class="line"><span class="keyword">if</span>(e == <span class="number">1</span>)&#123;</div><div class="line"><span class="keyword">int</span> x = read() + <span class="number">1</span>, y = read() + <span class="number">1</span>;</div><div class="line">Node ans = query(<span class="number">1</span>, <span class="number">1</span>, n, x, y);</div><div class="line"><span class="comment">//cout&lt;&lt;ans.maxs&lt;&lt;" "&lt;&lt;ans.maxx&lt;&lt;" "&lt;&lt;ans.minn&lt;&lt;" "&lt;&lt;ans.mins&lt;&lt;endl;</span></div><div class="line">ll a1 = <span class="number">1l</span>l * ans.maxx * ans.maxs;</div><div class="line">ll a2 = <span class="number">1l</span>l * ans.mins * ans.minn;</div><div class="line">ll a3 = <span class="number">1l</span>l * ans.maxx * ans.minn;</div><div class="line">ll a4 = <span class="number">1l</span>l * ans.maxs * ans.mins;</div><div class="line">ll a5 = <span class="number">1l</span>l * ans.maxx * ans.mins;</div><div class="line">ll a6 = <span class="number">1l</span>l * ans.maxs * ans.minn;</div><div class="line">ll a7 = <span class="number">1l</span>l * ans.maxx * ans.maxx;</div><div class="line">ll a8 = <span class="number">1l</span>l * ans.maxs * ans.maxs;</div><div class="line">ll a9 = <span class="number">1l</span>l * ans.minn * ans.minn;</div><div class="line">ll a10 = <span class="number">1l</span>l * ans.mins * ans.mins;</div><div class="line"><span class="comment">//if(ans.maxx == -INF)&#123;a1 = a3 = a4 = INF;&#125;</span></div><div class="line"><span class="comment">//if(ans.minn == INF)&#123;a2 = a3 = a4 = INF;&#125;</span></div><div class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, Min(a1, Min(a2, Min(a3, Min(a4, Min(a5, Min(a6, Min(a7, Min(a8, Min(a9, a10))))))))));</div><div class="line"></div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> <span class="keyword">if</span>(e == <span class="number">2</span>)&#123;</div><div class="line"><span class="keyword">int</span> x = read() + <span class="number">1</span>, y = read();</div><div class="line">modify(<span class="number">1</span>, <span class="number">1</span>, n, x, y);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="comment">//fre();</span></div><div class="line">init();</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">2</span></div><div class="line"><span class="comment">3</span></div><div class="line"><span class="comment">1 1 2 2 1 1 2 2</span></div><div class="line"><span class="comment">5</span></div><div class="line"><span class="comment">1 0 7</span></div><div class="line"><span class="comment">1 1 2</span></div><div class="line"><span class="comment">2 1 2</span></div><div class="line"><span class="comment">2 2 2</span></div><div class="line"><span class="comment">1 1 2</span></div><div class="line"><span class="comment">3</span></div><div class="line"><span class="comment">1 1 2 2 1 1 2 2</span></div><div class="line"><span class="comment">5</span></div><div class="line"><span class="comment">1 0 7</span></div><div class="line"><span class="comment">1 1 2</span></div><div class="line"><span class="comment">2 1 2</span></div><div class="line"><span class="comment">2 2 2</span></div><div class="line"><span class="comment">1 1 2</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">1</span></div><div class="line"><span class="comment">4</span></div><div class="line"><span class="comment">1 6 3 7 -4 6 4 -6 3 6 6 -4 6 -8 4 6</span></div><div class="line"><span class="comment">6</span></div><div class="line"><span class="comment">1 0 15</span></div><div class="line"><span class="comment">2 5 7</span></div><div class="line"><span class="comment">1 4 7</span></div><div class="line"><span class="comment">2 7 4</span></div><div class="line"><span class="comment">2 12 1</span></div><div class="line"><span class="comment">1 2 14</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">*/</span></div></pre></td></tr></table></figure><p>​    不过比赛结束后通过神犇的cjr的讲解终于是知道了规律是怎么找出来的了。</p><p>​    其实这道题的规律是吧边界上的点与图的中间部分的点分开算，$n$和$m$都先减一，然后我们先求$d=gcd(n,m)$，接着$n = \frac{n}{d}\$ ，$m=\frac{m}{d}$， 于是乎我们可以 用$ans$来表示答案，$ans=n+m+(d-1)\times n \times m$ 这样就算出答案了。</p><p>​    </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">int</span> r = <span class="number">0</span>, z = <span class="number">1</span>;</div><div class="line"><span class="keyword">char</span> ch = getchar();</div><div class="line"><span class="keyword">while</span>(ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch == <span class="string">'-'</span>) z = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">while</span>(ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>)&#123;r = r * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">return</span> r * z;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">gcd</span><span class="params">(LL a, LL b)</span></span>&#123;<span class="keyword">return</span> !b ? a : gcd(b, a % b);&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">LL n, m;</div><div class="line">LL ans;</div><div class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%lld %lld"</span>, &amp;n, &amp;m) != EOF)&#123;</div><div class="line">ans = <span class="number">0</span>;</div><div class="line">n --; m --;</div><div class="line">LL d = gcd(n, m);</div><div class="line">LL gg1 = n / d, gg2 = m / d;</div><div class="line">ans = gg1 + gg2 + (d - <span class="number">1</span>) * gg1 * gg2;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">init();</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>​    总的来说，今天的ACM我们已经尽力了，可能实力差距确实很大，所以我还是需要多加练习啊！</p><h3 id="9-24模拟赛总结"><a href="#9-24模拟赛总结" class="headerlink" title="9.24模拟赛总结"></a>9.24模拟赛总结</h3><p>今日题目链接：<a href="https://zybuluo.com/stevenzheng2002/note/895717" target="_blank" rel="external">https://zybuluo.com/stevenzheng2002/note/895717</a></p><p>​    10分。。。</p><p>​    尴尬的10分，居然t1的40分暴力都打错了，真的是。。。无语了。</p><p>​    据说这套题很难（貌似并不是据说，就是很难），还有国家集训队的作业，所以考不高也很正常，但是暴力都没打过就有些说不过去了啊！</p><h3 id="9-24-ACM南宁赛区网络赛总结"><a href="#9-24-ACM南宁赛区网络赛总结" class="headerlink" title="9.24 ACM南宁赛区网络赛总结"></a>9.24 ACM南宁赛区网络赛总结</h3><p>​    这个。。。</p><p>​    今天出了些小偏差，貌似北京交通大学在跟我们共用一个号。。。然后我们就被别人带着飞了。。。每次刚看完题，那边就把这道题A了，十分interesting，这样导致我们自己A的题目数量只有2道（他们做太快了，若果慢的话，我们也能A）。</p><p>​    总体来说，今天的ACM没有像前两天那样特别智障的签到题，但是中等偏易的题比较多，得有个7道左右，所以今天排在400多都要A个8,9道，竞争十分激烈。</p><p>​    最后我们还是需要调一下这些题，毕竟好多不是自己A的（虽然会写）。</p><h3 id="9-26总结"><a href="#9-26总结" class="headerlink" title="9.26总结"></a>9.26总结</h3><p>​    今天这个生日过得十分糟糕。。。本以为今天这套简单题能让我上200，没想到。。。t1就写挂了。</p><p>​    今天的题相较过去一段时间的题来说，简单多了不少，听其他人说只有t2的10%难拿，其他的都是水题。然而写了2h t2的我表示t3一眼都没看。。。</p><p>​    先说一下今天的题。t1确实很水，就是枚举你需要用多少辆车就行了，先把重量从大到小排个序，对于用$x$辆车，直接用深搜（爆搜）来检验是否合理即可。千万不要忘了剪枝！！！我因为没有剪枝挂了4个点。。。剪枝大概就是先求一个重量总和$sum$，然后车辆数从$sum \div\ w$开始算到n即可！</p><p>​    t2其实也不是特别难，主要是10分的C类型比较难拿。颂芬数据直接跑一遍SPFA即可。30%的A类数据是裸的LCA，不多赘述；50%的B类数据就是环套树，判断一下选不选此边即可。</p><p>​    总的来讲，我的思维训练的还是不到位。t2能写出2h。。。而且做题前一定要计算一下复杂度，看看是不是差不多能过。然后还有就是读题一定要读清楚！！！读不清楚就多读两遍！！！比如我今天t2的B类数据我就理解成$n$个点组成一个大环了。。。</p><h3 id="9-29总结"><a href="#9-29总结" class="headerlink" title="9.29总结"></a>9.29总结</h3><p>​    今天主要就做了LCA和dijsktra方面的题，共6道。感觉我调了很多“灵异”方面的问题。比如cout，printf输出的答案。</p><p>​    其实说是六道，一共也就相当于做了2道，因为有4道题都是模板题。我大概就说一下小z摘玉米和货车运输吧。</p><p>​    小z摘玉米就是一道比较弱的题。题意大概是就说一棵树，$q$次询问，每次询问$u$到$v$，求$u$到$v$的路径上的所有点的最大值与次大值之和（包括$u$和$v$）。</p><p>​    这道题其实几乎就是裸的LCA。只不过我们需要加两个数组$hx$，$hn$。$hx[i][j]$表示的是在$i$到$i$的$2^j$倍的祖先的所有点的点权的最大值（不包括$i$的$2^j$倍祖先），预处理也就不用我说了，然后这要就是在求lca的过程中随着x和y的往上更新，也顺便更新一下目前的最大值与次大值。</p><p>代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> DB;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">Max1</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c, <span class="keyword">int</span> g)</span></span>&#123;</div><div class="line"><span class="keyword">int</span> h[<span class="number">6</span>];</div><div class="line">h[<span class="number">1</span>] = a, h[<span class="number">2</span>] = b, h[<span class="number">3</span>] = c, h[<span class="number">4</span>] = g;</div><div class="line">sort(h + <span class="number">1</span>, h + <span class="number">5</span>);</div><div class="line"><span class="keyword">return</span> h[<span class="number">4</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">Max2</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c, <span class="keyword">int</span> g)</span></span>&#123;</div><div class="line"><span class="keyword">int</span> h[<span class="number">6</span>];</div><div class="line">h[<span class="number">1</span>] = a, h[<span class="number">2</span>] = b, h[<span class="number">3</span>] = c, h[<span class="number">4</span>] = g;</div><div class="line">sort(h + <span class="number">1</span>, h + <span class="number">5</span>);</div><div class="line"><span class="keyword">return</span> h[<span class="number">3</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e5</span> + <span class="number">15</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></div><div class="line"><span class="keyword">int</span> to, nxt;</div><div class="line">&#125;g[MAXN * <span class="number">2</span>];</div><div class="line"></div><div class="line"><span class="keyword">int</span> ans1 = <span class="number">-1</span>, ans2 = <span class="number">-1</span>;</div><div class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>, n;</div><div class="line"><span class="keyword">int</span> a[MAXN], d[MAXN];</div><div class="line"><span class="keyword">int</span> head[MAXN], p[MAXN][<span class="number">20</span>];</div><div class="line"><span class="keyword">int</span> hx[MAXN][<span class="number">20</span>], hn[MAXN][<span class="number">20</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span>&#123;</div><div class="line">g[++ cnt] = (Node)&#123;v, head[u]&#125;;</div><div class="line">head[u] = cnt;</div><div class="line">g[++ cnt] = (Node)&#123;u, head[v]&#125;;</div><div class="line">head[v] = cnt;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">int</span> r = <span class="number">0</span>, z = <span class="number">1</span>;</div><div class="line"><span class="keyword">char</span> ch = getchar();</div><div class="line"><span class="keyword">while</span>(ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch == <span class="string">'-'</span>) z = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">while</span>(ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>)&#123;r = r * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">return</span> r * z;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="built_in">memset</span>(d, <span class="number">-1</span>, <span class="keyword">sizeof</span>(d));</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) hx[i][<span class="number">0</span>] = a[i];</div><div class="line">d[<span class="number">1</span>] = <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; i; i = g[i].nxt)&#123;</div><div class="line"><span class="keyword">int</span> v = g[i].to;</div><div class="line"><span class="keyword">if</span>(d[v] == <span class="number">-1</span>)&#123;</div><div class="line">d[v] = d[u] + <span class="number">1</span>;</div><div class="line">p[v][<span class="number">0</span>] = u;</div><div class="line">dfs(v);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">pre</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; (<span class="number">1</span> &lt;&lt; i) &lt;= n; i ++)&#123;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j ++)&#123;</div><div class="line"><span class="keyword">if</span>(p[j][i - <span class="number">1</span>])&#123;</div><div class="line">p[j][i] = p[p[j][i - <span class="number">1</span>]][i - <span class="number">1</span>];</div><div class="line">hx[j][i] = max(hx[j][i - <span class="number">1</span>], hx[p[j][i - <span class="number">1</span>]][i - <span class="number">1</span>]);</div><div class="line">hn[j][i] = Max2(hx[j][i - <span class="number">1</span>], hx[p[j][i - <span class="number">1</span>]][i - <span class="number">1</span>], hn[j][i - <span class="number">1</span>], hn[p[j][i - <span class="number">1</span>]][i - <span class="number">1</span>]);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">lca</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</div><div class="line"><span class="keyword">if</span>(d[x] &lt; d[y]) swap(x, y);</div><div class="line"><span class="keyword">int</span> i;</div><div class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; (<span class="number">1</span> &lt;&lt; i) &lt;= n; i ++);</div><div class="line">i --;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = i; j &gt;= <span class="number">0</span>; j --)</div><div class="line"><span class="keyword">if</span>(d[x] - (<span class="number">1</span> &lt;&lt; j) &gt;= d[y])&#123;</div><div class="line">ans1 = max(hx[x][j], ans1);</div><div class="line">ans2 = max(hn[x][j], ans2);</div><div class="line">x = p[x][j];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span>(x == y) <span class="keyword">return</span> x;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = i; j &gt;= <span class="number">0</span>; j --)&#123;</div><div class="line"><span class="comment">//cout&lt;&lt;x&lt;&lt;endl;</span></div><div class="line"><span class="keyword">if</span>(p[x][j] != p[y][j])&#123;</div><div class="line"><span class="keyword">int</span> tmp2 = Max2(hx[x][j], hn[x][j], hx[y][j], hn[y][j]);</div><div class="line"><span class="keyword">int</span> tmp1 = Max1(hx[x][j], hn[x][j], hx[y][j], hn[y][j]);</div><div class="line"><span class="keyword">int</span> gg2 = Max2(ans1, ans2, tmp1, tmp2);</div><div class="line"><span class="keyword">int</span> gg1 = Max1(ans1, ans2, tmp1, tmp2);</div><div class="line">ans1 = gg1, ans2 = gg2;</div><div class="line">x = p[x][j];</div><div class="line">y = p[y][j];</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> tmp2 = Max2(hx[x][<span class="number">0</span>], hn[x][<span class="number">0</span>], hx[y][<span class="number">0</span>], hn[y][<span class="number">0</span>]);</div><div class="line"><span class="keyword">int</span> tmp1 = Max1(hx[x][<span class="number">0</span>], hn[x][<span class="number">0</span>], hx[y][<span class="number">0</span>], hn[y][<span class="number">0</span>]);</div><div class="line"><span class="keyword">int</span> gg2 = Max2(ans1, ans2, tmp1, tmp2);</div><div class="line"><span class="keyword">int</span> gg1 = Max1(ans1, ans2, tmp1, tmp2);</div><div class="line">ans1 = gg1, ans2 = gg2;</div><div class="line"><span class="keyword">return</span> p[x][<span class="number">0</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">n = read();</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) a[i] = read();</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i ++)&#123;</div><div class="line"><span class="keyword">int</span> u = read(), v = read();</div><div class="line">add(u, v);</div><div class="line">&#125;</div><div class="line">init();</div><div class="line">dfs(<span class="number">1</span>);</div><div class="line">pre();</div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">for(int i = 1; i &lt;= n; i ++)&#123;</span></div><div class="line"><span class="comment">for(int j = 0; (1 &lt;&lt; j) &lt;= n; j ++) printf("%d ", hn[i][j]);</span></div><div class="line"><span class="comment">printf("\n");</span></div><div class="line"><span class="comment">&#125;</span></div><div class="line"><span class="comment">*/</span></div><div class="line"><span class="keyword">int</span> Q = read();</div><div class="line"><span class="keyword">while</span>(Q --)&#123;</div><div class="line">ans1 = <span class="number">0</span>, ans2 = <span class="number">0</span>;</div><div class="line"><span class="keyword">int</span> u = read(), v = read();</div><div class="line"><span class="keyword">int</span> gr = lca(u, v);</div><div class="line"><span class="comment">//cout&lt;&lt;ans1&lt;&lt;" "&lt;&lt;ans2&lt;&lt;endl;</span></div><div class="line"><span class="keyword">if</span>(a[gr] &gt;= ans1)&#123;</div><div class="line">ans2 = ans1;</div><div class="line">ans1 = a[gr];</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> <span class="keyword">if</span>(a[gr] &gt;= ans2) ans2 = a[gr];</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans1 + ans2);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">work();</div><div class="line"><span class="keyword">return</span>  <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>货车运输：</p><p>​    这道题说的大概就是一棵树，$q$次询问，每次询问是$u$和$v$，求$u$到$v$的路径上的边权最小值。</p><p>​    这道题相对来讲比上一道题还简单，然而我却出了一些灵异事件，比如cout和printf输出的答案不太一样，结果花了我5.5h找到了错误：for里面的$i$我重复定义了。。。这tm就尴尬了。</p><p>​    这道题主要是在LCA模板上加一个$h$数组，$h[i][j]$表示点$i$到$i$的$2^j$倍祖先的路上的所有边的边权最小值。然后同上面一道题一样，在求lca的时候更新当前的$ans$。代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> DB;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">Max</span><span class="params">(LL a, LL b)</span></span>&#123;<span class="keyword">return</span> a &gt; b ? a : b;&#125;</div><div class="line"><span class="function">LL <span class="title">Min</span><span class="params">(LL a, LL b)</span></span>&#123;<span class="keyword">return</span> a &lt; b ? a : b;&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e5</span> + <span class="number">15</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></div><div class="line"><span class="keyword">int</span> from, to, dis;</div><div class="line">&#125;e[MAXN];</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></div><div class="line"><span class="keyword">int</span> to, nxt, dis;</div><div class="line">&#125;g[MAXN];</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"><span class="keyword">int</span> cnt_edge = <span class="number">0</span>, ans;</div><div class="line"><span class="keyword">int</span> fa[MAXN / <span class="number">10</span>];</div><div class="line"><span class="keyword">int</span> head[MAXN / <span class="number">10</span>], cnt = <span class="number">0</span>;</div><div class="line"><span class="keyword">int</span> p[MAXN / <span class="number">10</span>][<span class="number">20</span>], h[MAXN / <span class="number">10</span>][<span class="number">20</span>], d[MAXN/ <span class="number">10</span>];</div><div class="line"><span class="keyword">bool</span> flag[MAXN / <span class="number">10</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> dis)</span></span>&#123;</div><div class="line">e[++ cnt_edge].from = u;</div><div class="line">e[cnt_edge].to = v;</div><div class="line">e[cnt_edge].dis = dis;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> dis)</span></span>&#123;</div><div class="line">g[++ cnt].to = v;</div><div class="line">g[cnt].nxt = head[u];</div><div class="line">g[cnt].dis = dis;</div><div class="line">head[u] = cnt;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">int</span> r = <span class="number">0</span>, z = <span class="number">1</span>;</div><div class="line"><span class="keyword">char</span> ch = getchar();</div><div class="line"><span class="keyword">while</span>(ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch == <span class="string">'-'</span>) z = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">while</span>(ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>)&#123;r = r * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line"><span class="keyword">return</span> r * z;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">fre</span><span class="params">()</span></span>&#123;</div><div class="line">freopen(<span class="string">".in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line">freopen(<span class="string">".out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(Node x, Node y)</span> </span>&#123;<span class="keyword">return</span> x.dis &gt; y.dis;&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">getfa</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line"><span class="keyword">if</span>(x == fa[x]) <span class="keyword">return</span> fa[x];</div><div class="line"><span class="keyword">return</span> fa[x] = getfa(fa[x]);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">kruskal</span><span class="params">()</span></span>&#123;</div><div class="line">sort(e + <span class="number">1</span>, e + m + <span class="number">1</span>, cmp);</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) fa[i] = i;</div><div class="line"><span class="keyword">int</span> k = <span class="number">0</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i ++)&#123;</div><div class="line"><span class="keyword">int</span> u = e[i].from, v = e[i].to, dis = e[i].dis;</div><div class="line"><span class="keyword">int</span> f1 = getfa(u), f2 = getfa(v);</div><div class="line"><span class="keyword">if</span>(f1 != f2)&#123;</div><div class="line">    fa[f2] = f1;</div><div class="line">add_edge(u, v, dis);</div><div class="line">add_edge(v, u, dis); </div><div class="line">k ++;</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>(k == n - <span class="number">1</span>) <span class="keyword">break</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">fuckit</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="built_in">memset</span>(d, <span class="number">-1</span>, <span class="keyword">sizeof</span>(d));</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)&#123;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; (<span class="number">1</span> &lt;&lt; j) &lt;= n; j ++) h[i][j] = <span class="number">2e9</span>;</div><div class="line">&#125;</div><div class="line">d[<span class="number">1</span>] = <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; i; i = g[i].nxt)&#123;</div><div class="line"><span class="keyword">int</span> v = g[i].to;</div><div class="line"><span class="keyword">if</span>(d[v] == <span class="number">-1</span>)&#123;</div><div class="line">d[v] = d[u] + <span class="number">1</span>;</div><div class="line">p[v][<span class="number">0</span>] = u;</div><div class="line">h[v][<span class="number">0</span>] = g[i].dis;</div><div class="line">flag[v] = <span class="number">1</span>;</div><div class="line">dfs(v);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; (<span class="number">1</span> &lt;&lt; i) &lt;= n; i ++)&#123;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j ++)&#123;</div><div class="line"><span class="keyword">if</span>(p[j][i - <span class="number">1</span>])&#123;</div><div class="line">p[j][i] = p[p[j][i - <span class="number">1</span>]][i - <span class="number">1</span>];</div><div class="line">h[j][i] = min(h[j][i - <span class="number">1</span>], h[p[j][i - <span class="number">1</span>]][i - <span class="number">1</span>]);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">lca</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</div><div class="line"><span class="keyword">int</span> i;</div><div class="line">ans = <span class="number">2e9</span>;</div><div class="line"><span class="keyword">if</span>(d[x] &lt; d[y]) swap(x, y);</div><div class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; (<span class="number">1</span> &lt;&lt; i) &lt;= d[x]; i ++);</div><div class="line">i --;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = i; j &gt;= <span class="number">0</span>; j --)&#123;</div><div class="line"><span class="keyword">if</span>(d[x] - (<span class="number">1</span> &lt;&lt; j) &gt;= d[y])&#123;ans = min(ans, h[x][j]); x = p[x][j];&#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//cout&lt;&lt;x&lt;&lt;"*cout"&lt;&lt;y&lt;&lt;endl;</span></div><div class="line"><span class="comment">//printf("%d %d\n", x, y);</span></div><div class="line"><span class="keyword">if</span>(x == y) <span class="keyword">return</span> x;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = i; j &gt;= <span class="number">0</span>; j --)&#123;</div><div class="line"><span class="keyword">if</span>(p[x][j] != p[y][j] &amp;&amp; p[x][j])&#123;</div><div class="line">ans = min(ans, h[x][j]);</div><div class="line">x = p[x][j];</div><div class="line">ans = min(ans, h[y][j]);</div><div class="line">y = p[y][j];</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> p[x][<span class="number">0</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">cz</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> k)</span></span>&#123;</div><div class="line"><span class="keyword">int</span> i, res = <span class="number">2e9</span> + <span class="number">7</span>;</div><div class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; (<span class="number">1</span> &lt;&lt; i) &lt;= k; i ++);</div><div class="line">    i --;</div><div class="line">    <span class="keyword">for</span>(; i &gt;= <span class="number">0</span>; i --)</div><div class="line"><span class="keyword">if</span>(k &amp; (<span class="number">1</span> &lt;&lt; i))&#123;</div><div class="line">        res = min(res, h[u][i]);</div><div class="line">        u = p[u][i];</div><div class="line">k -= (<span class="number">1</span> &lt;&lt; i); </div><div class="line">    &#125;</div><div class="line"><span class="keyword">return</span> res;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">n = read(), m = read();</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i ++)&#123;</div><div class="line"><span class="keyword">int</span> u = read(), v = read(), dis = read();</div><div class="line">add(u, v, dis);</div><div class="line">&#125;</div><div class="line">kruskal();</div><div class="line">fuckit();</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)&#123;</div><div class="line"><span class="keyword">if</span>(!flag[i])&#123;flag[i] = <span class="number">1</span>; dfs(i);&#125;</div><div class="line">&#125;</div><div class="line">work();</div><div class="line"><span class="keyword">int</span> q = read();</div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">for(int i = 1; i &lt;= n; i ++) cout&lt;&lt;d[i]&lt;&lt;" ";</span></div><div class="line"><span class="comment">cout&lt;&lt;endl;</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">for(int i = 1; i &lt;= n; i ++)&#123;</span></div><div class="line"><span class="comment">for(int j = 0; (1 &lt;&lt; j) &lt;= n; j ++) cout&lt;&lt;h[i][j]&lt;&lt;" ";</span></div><div class="line"><span class="comment">cout&lt;&lt;endl;</span></div><div class="line"><span class="comment">&#125;</span></div><div class="line"><span class="comment">for(int i = 1; i &lt;= n; i ++) printf("%d ", fa[i]);</span></div><div class="line"><span class="comment">printf("\n");</span></div><div class="line"><span class="comment">*/</span></div><div class="line"><span class="keyword">while</span>(q --)&#123;</div><div class="line"><span class="keyword">int</span> a = read(), b = read();</div><div class="line"><span class="keyword">if</span>(getfa(a) != getfa(b)) <span class="built_in">printf</span>(<span class="string">"-1\n"</span>);</div><div class="line"><span class="keyword">else</span> &#123;</div><div class="line"><span class="keyword">int</span> tmp = lca(a, b);</div><div class="line"><span class="comment">//printf("%d\n", tmp);</span></div><div class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,  min(cz(a, d[a] - d[tmp]), cz(b, d[b] - d[tmp])));</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="comment">//fre();</span></div><div class="line">init();</div><div class="line"><span class="keyword">return</span>  <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="九月份整体总结"><a href="#九月份整体总结" class="headerlink" title="九月份整体总结"></a>九月份整体总结</h3><p>​    这个月貌似天天都在练，好像没有歇过。。。这个月我已经比较累了，所以十一放假我请了三天假（貌似放假也不能放松啊）。这个九月份做了好多好多套模拟赛，大概一周4套，所以可能做了15套左右，加上这个月还有ACM，所以。。。身体已经经受不住了啊。。。不过看看小学弟还有dalao们还在拼命地练习，这让我感到十分羞愧，毕竟我跟dalao们还有很大的差距啊！！！</p><p>​    纵观整个九月份，我的模拟考成绩不算理想，虽说每套的题都比noip提高组略难。其实看看题解，我感觉我欠缺的方面确实还有很多。</p><p>​    1.知识广度不够，即会的知识过少。比如什么高端的树链剖分啊，高级的暴力啊，还有各种数论知识我都不会（尴尬），于是我只能在这短暂的一个半月时间里狂学。唉，差的确实太多了。还有80多天，要加油了！</p><p>​    2.知识深度不够。这正跟jls所说的模块方面的欠缺有关。其实我刷题刷的很少，导致我会某个知识点，但是真到比赛的时候，需要有一些变动，添加之类的我就不会了，这跟刷题少有着千丝万缕的联系，所以在接下来的这一个月，不仅要多学一些知识，更重要的是要多做题，要不然真到11.11的时候就gg了。。。</p><p>​    3.数学太差。这个。。。感觉一时间也不太好补，这方面的欠缺主要体现在找规律找不出来，数学题中的推导不会推之类的问题。像lzy这种随随便便参加数学竞赛都能拿个省一的人来说做信息中的数学题就是小菜一碟。虽说我的智商发展限制了我到达他那么厉害的程度，但是我仍然需要在这方面要有很大的提高，要不然考试也会吃很多亏的。</p><p>​    好了，说完了我在这一个月所发现的不足之处之后，我貌似好像就没什么优点了。。。好吧，我承认了我是一个什么都不会，什么都不行的，智商为$-\infty$的蒟蒻（也许我还没有达到一个做为人的基本标准。。。）</p><p>​    不管怎样，就算菜到不可救药，我还是要努力啊，要不然连省一都拿不到的话就太tm尴尬了。。。</p>]]></content>
      
      <categories>
          
          <category> 总结 </category>
          
          <category> 心得与体会 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>树链剖分</title>
      <link href="/2017/10/08/%E6%A0%91%E9%93%BE%E5%89%96%E5%88%86/"/>
      <content type="html"><![CDATA[<p>“在一棵树上进行路径的修改、求极值、求和”乍一看只要线段树就能轻松解决，实际上，仅凭线段树是不能搞定它的。我们需要用到一种貌似高级的复杂算法——树链剖分。<br>​<br> 树链，就是树上的路径。剖分，就是把路径分类为重链和轻链。<br>    记siz[v]表示以v为根的子树的节点数，dep[v]表示v的深度(根深度为1)，top[v]表示v所在的重链的顶端节点，fa[v]表示v的父亲，son[v]表示与v在同一重链上的v的儿子节点（姑且称为重儿子），w[v]表示v与其父亲节点的连边（姑且称为v的父边）在线段树中的位置。只要把这些东西求出来，就能用logn的时间完成原问题中的操作。</p><p>   <strong>重儿子</strong>：siz[u]为v的子节点中siz值最大的，那么u就是v的重儿子。<br>    <strong>轻儿子</strong>：v的其它子节点。<br>    <strong>重边</strong>：点v与其重儿子的连边。<br>    <strong>轻边</strong>：点v与其轻儿子的连边。<br>   <strong>重链</strong>：由重边连成的路径。<br>    <strong>轻链</strong>：轻边。</p><p>   剖分后的树有如下<strong>性质</strong>：<br>    <em>性质1</em>：如果(v,u)为轻边，则siz[u] <em> 2 &lt; siz[v]；    </em>性质2*：从根到某一点的路径上轻链、重链的个数都不大于logn。</p><p>   <strong>算法实现</strong>：<br>    我们可以用两个dfs来求出fa、dep、siz、son、top、w。<br>    $dfs_1$：把fa、dep、siz、son求出来，比较简单，略过。<br>   $ dfs_2$：<br>    ⒈对于v，当son[v]存在（即v不是叶子节点）时，显然有top[son[v]] = top[v]。线段树中，v的重边应当在v的父边的后面，记w[son[v]] = totw+1，totw表示最后加入的一条边在线段树中的位置。此时，为了使一条重链各边在线段树中连续分布，应当进行dfs_2(son[v])；<br>    ⒉对于v的各个轻儿子u，显然有top[u] = u，并且w[u] = totw+1，进行dfs_2过程。<br>           这就求出了top和w。<br>    将树中各边的权值在线段树中更新，建链和建线段树的过程就完成了。</p><p>  <strong>修改操作</strong>：例如将u到v的路径上每条边的权值都加上某值x。<br>    一般人需要先求LCA，然后慢慢修改u、v到公共祖先的边。而高手就不需要了。<br>    记f1 = top[u]，f2 = top[v]。<br>    当f1 &lt;&gt; f2时：不妨设dep[f1] &gt;= dep[f2]，那么就更新u到f1的父边的权值(logn)，并使u = fa[f1]。<br>    当f1 = f2时：u与v在同一条重链上，若u与v不是同一点，就更新u到v路径上的边的权值(logn)，否则修改完成；<br>    重复上述过程，直到修改完成。</p><p>   <strong>求和、求极值操作</strong>：类似修改操作，但是不更新边权，而是对其求和、求极值。<br>    就这样，原问题就解决了。鉴于鄙人语言表达能力有限，咱画图来看看：树链剖分</p><p>   如右图所示，较粗的为重边，较细的为轻边。节点编号旁边有个红色点的表明该节点是其所在链的顶端节点。边旁的蓝色数字表示该边在线段树中的位置。图中1-4-9-13-14为一条重链。<br><img src="http://s16.sinaimg.cn/middle/6974c8b2gb4c1e1110f6f&amp;690" alt="求极值"><br>    当要修改11到10的路径时：<br>    第一次迭代：u = 11，v = 10，f1 = 2，f2 = 10。此时dep[f1] &lt; dep[f2]，因此修改线段树中的5号点，v = 4, f2 = 1；<br>    第二次迭代：dep[f1] &gt; dep[f2]，修改线段树中10—11号点。u = 2，f1 = 2；<br>    第三次迭代：dep[f1] &gt; dep[f2]，修改线段树中9号点。u = 1，f1 = 1；<br>    第四次迭代：f1 = f2且u = v，修改结束。</p><p>数据规模大时，递归可能会爆栈，而非递归dfs会很麻烦，所以可将两个dfs改为宽搜+循环。即先宽搜求出fa、dep，然后逆序循环求出siz、son，再顺序循环求出top和w。<br>​<br>​<br>   题目：spoj375、USACO December Contest Gold Divison, “grassplant”。<br>    **spoj375据说不“缩行”情况下最短的程序是140+行，我的是128行。<br>    附spoj375程序(C++)：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">10010</span>;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Tedge</span></span></div><div class="line"><span class="class">&#123;</span> <span class="keyword">int</span> b, next; &#125; e[maxn &lt;&lt; <span class="number">1</span>];</div><div class="line"><span class="keyword">int</span> tree[maxn];</div><div class="line"><span class="keyword">int</span> zzz, n, z, edge, root, a, b, c;</div><div class="line"><span class="keyword">int</span> d[maxn][<span class="number">3</span>];</div><div class="line"><span class="keyword">int</span> first[maxn], dep[maxn], w[maxn], fa[maxn], top[maxn], son[maxn], siz[maxn];</div><div class="line"><span class="keyword">char</span> ch[<span class="number">10</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">     e[++edge].b = b;</div><div class="line">     e[edge].next = first[a];</div><div class="line">     first[a] = edge;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> v)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">     siz[v] = <span class="number">1</span>; son[v] = <span class="number">0</span>;</div><div class="line">     <span class="keyword">for</span> (<span class="keyword">int</span> i = first[v]; i &gt; <span class="number">0</span>; i = e[i].next)</div><div class="line">         <span class="keyword">if</span> (e[i].b != fa[v])</div><div class="line">         &#123;</div><div class="line">             fa[e[i].b] = v;</div><div class="line">             dep[e[i].b] = dep[v]+<span class="number">1</span>;</div><div class="line">             dfs(e[i].b);</div><div class="line">             <span class="keyword">if</span> (siz[e[i].b] &gt; siz[son[v]]) son[v] = e[i].b;</div><div class="line">             siz[v] += siz[e[i].b];</div><div class="line">         &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">build_tree</span><span class="params">(<span class="keyword">int</span> v, <span class="keyword">int</span> tp)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">     w[v] = ++ z; top[v] = tp;</div><div class="line">     <span class="keyword">if</span> (son[v] != <span class="number">0</span>) build_tree(son[v], top[v]);</div><div class="line">     <span class="keyword">for</span> (<span class="keyword">int</span> i = first[v]; i &gt; <span class="number">0</span>; i = e[i].next)</div><div class="line">         <span class="keyword">if</span> (e[i].b != son[v] &amp;&amp; e[i].b != fa[v])</div><div class="line">             build_tree(e[i].b, e[i].b);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> root, <span class="keyword">int</span> lo, <span class="keyword">int</span> hi, <span class="keyword">int</span> loc, <span class="keyword">int</span> x)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">     <span class="keyword">if</span> (loc &gt; hi || lo &gt; loc) <span class="keyword">return</span>;</div><div class="line">     <span class="keyword">if</span> (lo == hi)</div><div class="line">     &#123; tree[root] = x; <span class="keyword">return</span>; &#125;</div><div class="line">     <span class="keyword">int</span> mid = (lo + hi) / <span class="number">2</span>, ls = root * <span class="number">2</span>, rs = ls + <span class="number">1</span>;</div><div class="line">     update(ls, lo, mid, loc, x);</div><div class="line">     update(rs, mid+<span class="number">1</span>, hi, loc, x);</div><div class="line">     tree[root] = max(tree[ls], tree[rs]);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxi</span><span class="params">(<span class="keyword">int</span> root, <span class="keyword">int</span> lo, <span class="keyword">int</span> hi, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">     <span class="keyword">if</span> (l &gt; hi || r &lt; lo) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">     <span class="keyword">if</span> (l &lt;= lo &amp;&amp; hi &lt;= r) <span class="keyword">return</span> tree[root];</div><div class="line">     <span class="keyword">int</span> mid = (lo + hi) / <span class="number">2</span>, ls = root * <span class="number">2</span>, rs = ls + <span class="number">1</span>;</div><div class="line">     <span class="keyword">return</span> max(maxi(ls, lo, mid, l, r), maxi(rs, mid+<span class="number">1</span>, hi, l, r));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> va, <span class="keyword">int</span> vb)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">     <span class="keyword">int</span> f1 = top[va], f2 = top[vb], tmp = <span class="number">0</span>;</div><div class="line">     <span class="keyword">while</span> (f1 != f2)</div><div class="line">     &#123;</div><div class="line">           <span class="keyword">if</span> (dep[f1] &lt; dep[f2])</div><div class="line">           &#123; swap(f1, f2); swap(va, vb); &#125;</div><div class="line">           tmp = max(tmp, maxi(<span class="number">1</span>, <span class="number">1</span>, z, w[f1], w[va]));</div><div class="line">           va = fa[f1]; f1 = top[va];</div><div class="line">     &#125;</div><div class="line">     <span class="keyword">if</span> (va == vb) <span class="keyword">return</span> tmp;</div><div class="line">     <span class="keyword">if</span> (dep[va] &gt; dep[vb]) swap(va, vb);</div><div class="line">     <span class="keyword">return</span> max(tmp, maxi(<span class="number">1</span>, <span class="number">1</span>, z, w[son[va]], w[vb]));  <span class="comment">//</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">     <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">     root = (n + <span class="number">1</span>) / <span class="number">2</span>;</div><div class="line">     fa[root] = z = dep[root] = edge = <span class="number">0</span>;</div><div class="line">     <span class="built_in">memset</span>(siz, <span class="number">0</span>, <span class="keyword">sizeof</span>(siz));</div><div class="line">     <span class="built_in">memset</span>(first, <span class="number">0</span>, <span class="keyword">sizeof</span>(first));</div><div class="line">     <span class="built_in">memset</span>(tree, <span class="number">0</span>, <span class="keyword">sizeof</span>(tree));</div><div class="line">     <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++)</div><div class="line">     &#123;</div><div class="line">         <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;a, &amp;b, &amp;c);</div><div class="line">         d[i][<span class="number">0</span>] = a; d[i][<span class="number">1</span>] = b; d[i][<span class="number">2</span>] = c;</div><div class="line">         insert(a, b, c);</div><div class="line">         insert(b, a, c);</div><div class="line">     &#125;</div><div class="line">     dfs(root);</div><div class="line">     build_tree(root, root);    <span class="comment">//</span></div><div class="line">     <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++)</div><div class="line">     &#123;</div><div class="line">         <span class="keyword">if</span> (dep[d[i][<span class="number">0</span>]] &gt; dep[d[i][<span class="number">1</span>]]) swap(d[i][<span class="number">0</span>], d[i][<span class="number">1</span>]);</div><div class="line">         update(<span class="number">1</span>, <span class="number">1</span>, z, w[d[i][<span class="number">1</span>]], d[i][<span class="number">2</span>]);</div><div class="line">     &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">     ch[<span class="number">0</span>] = <span class="string">' '</span>;</div><div class="line">     <span class="keyword">while</span> (ch[<span class="number">0</span>] &lt; <span class="string">'C'</span> || ch[<span class="number">0</span>] &gt; <span class="string">'Q'</span>) <span class="built_in">scanf</span>(<span class="string">"%s"</span>, &amp;ch);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">     <span class="keyword">for</span> (read(); ch[<span class="number">0</span>] != <span class="string">'D'</span>; read())</div><div class="line">     &#123;</div><div class="line">         <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;a, &amp;b);</div><div class="line">         <span class="keyword">if</span> (ch[<span class="number">0</span>] == <span class="string">'Q'</span>) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, find(a, b));</div><div class="line">                      <span class="keyword">else</span> update(<span class="number">1</span>, <span class="number">1</span>, z, w[d[a][<span class="number">1</span>]], b);</div><div class="line">     &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;zzz); zzz &gt; <span class="number">0</span>; zzz--)</div><div class="line">    &#123;</div><div class="line">        init();</div><div class="line">        work();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> 知识点 </category>
          
          <category> 讲解与实践 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树链剖分 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
